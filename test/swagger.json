{
  "x-generator": "NSwag v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Atomex API",
    "contact": {
      "name": "Atomex",
      "url": "https://atomex.me",
      "email": "support@atomex.me"
    },
    "version": "v1.0"
  },
  "servers": [
    {
      "url": "https://api.test.atomex.me"
    }
  ],
  "paths": {
    "/v1/MarketData/quotes": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "summary": "Get top of book quotes",
        "operationId": "MarketData_GetTopOfBook",
        "parameters": [
          {
            "name": "symbols",
            "in": "query",
            "description": "Symbols. Supported values: `All` (or not specified) for all symbols or symbols separated by commas (e.g. `ETH/BTC,XTZ/BTC`)",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Quote"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/MarketData/book": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "summary": "Get order book",
        "operationId": "MarketData_GetOrderBook",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol (e.g. `ETH/BTC`)",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Add order",
        "operationId": "Orders_Post",
        "requestBody": {
          "x-name": "request",
          "description": "Order params",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrderModel"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewOrderReplyModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get orders",
        "operationId": "Orders_GetAll",
        "parameters": [
          {
            "name": "symbols",
            "in": "query",
            "description": "Symbols. Supported values: `All` (or not specified) for all symbols or symbols separated by commas (e.g. `ETH/BTC,XTZ/BTC`)",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Type of sorting by identifier. Supported values: `Asc`, `Desc`",
            "schema": {
              "default": "Desc",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Sort"
                }
              ]
            },
            "x-position": 2
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Specifies how many items should be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "maximum": 2147483647.0,
              "minimum": 0.0
            },
            "x-position": 3
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100,
              "maximum": 10000.0,
              "minimum": 0.0
            },
            "x-position": 4
          },
          {
            "name": "active",
            "in": "query",
            "description": "If this flag is set only active orders will be retunred",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get order",
        "operationId": "Orders_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Order ID",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854780000.0,
              "minimum": 1.0
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel order",
        "operationId": "Orders_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Order ID",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 1
          },
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol (e.g. `ETH/BTC`)",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "side",
            "in": "query",
            "description": "Side",
            "schema": {
              "$ref": "#/components/schemas/Side"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteOrderReplyModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Swaps/{id}": {
      "get": {
        "tags": [
          "Swaps"
        ],
        "summary": "Get swap",
        "operationId": "Swaps_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Swap ID",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwapModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Swaps": {
      "get": {
        "tags": [
          "Swaps"
        ],
        "summary": "Get swaps",
        "operationId": "Swaps_GetAll",
        "parameters": [
          {
            "name": "symbols",
            "in": "query",
            "description": "Symbols. Supported values: `All` (or not specified) for all symbols or symbols separated by commas (e.g. `ETH/BTC,XTZ/BTC`)",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Type of sorting by identifier. Supported values: `Asc`, `Sesc`",
            "schema": {
              "default": "Desc",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Sort"
                }
              ]
            },
            "x-position": 2
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Specifies how many items should be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "maximum": 2147483647.0,
              "minimum": 0.0
            },
            "x-position": 3
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100,
              "maximum": 10000.0,
              "minimum": 0.0
            },
            "x-position": 4
          },
          {
            "name": "active",
            "in": "query",
            "description": "If this flag is set only active swaps will be retunred",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 5
          },
          {
            "name": "completed",
            "in": "query",
            "description": "If this flag is set only completed swaps will be retunred",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SwapModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Swaps/{id}/requisites": {
      "post": {
        "tags": [
          "Swaps"
        ],
        "summary": "Add swap requisites",
        "operationId": "Swaps_Post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Swap ID",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 1
          },
          {
            "name": "receivingAddress",
            "in": "query",
            "description": "Receiving address",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "lockTime",
            "in": "query",
            "description": "Lock time in seconds",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "refundAddress",
            "in": "query",
            "description": "Refund address",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "rewardForRedeem",
            "in": "query",
            "description": "Reward for redeem",
            "schema": {
              "type": "number",
              "format": "decimal",
              "default": 0.0
            },
            "x-position": 5
          },
          {
            "name": "secretHash",
            "in": "query",
            "description": "Secret hash",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwapRequisitesReplyModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Symbols": {
      "get": {
        "tags": [
          "Symbols"
        ],
        "summary": "Get symbols information",
        "operationId": "Symbols_Get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SymbolModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Token": {
      "post": {
        "tags": [
          "Token"
        ],
        "summary": "Get auth token",
        "operationId": "Token_Post",
        "requestBody": {
          "x-name": "authModel",
          "description": "Authentication params",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthModel"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Quote": {
        "type": "object",
        "description": "Symbol's quote",
        "additionalProperties": false,
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol (e.g. `ETH/BTC`)",
            "nullable": true
          },
          "timeStamp": {
            "type": "integer",
            "description": "Timestamp in unix time milliseconds (UTC)",
            "format": "int64"
          },
          "bid": {
            "type": "number",
            "description": "Best bid (sell) price",
            "format": "decimal"
          },
          "ask": {
            "type": "number",
            "description": "Best offer (purchase) price",
            "format": "decimal"
          }
        }
      },
      "ValidationError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "description": "Validation error",
            "additionalProperties": false,
            "properties": {
              "errors": {
                "type": "array",
                "description": "Fields validation errors",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/FieldError"
                }
              }
            }
          }
        ]
      },
      "FieldError": {
        "type": "object",
        "description": "Field validation error",
        "additionalProperties": false,
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "nullable": true
          }
        }
      },
      "Error": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error code",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "nullable": true
          }
        }
      },
      "Snapshot": {
        "type": "object",
        "description": "Order book snapshot",
        "additionalProperties": false,
        "properties": {
          "updateId": {
            "type": "integer",
            "description": "Last applied update id",
            "format": "int64"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol (e.g. `ETH/BTC`)",
            "nullable": true
          },
          "entries": {
            "type": "array",
            "description": "Array of entries",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SnapshotEntry"
            }
          }
        }
      },
      "SnapshotEntry": {
        "type": "object",
        "description": "Order book snapshot entry",
        "additionalProperties": false,
        "properties": {
          "side": {
            "description": "Side",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Side"
              }
            ]
          },
          "price": {
            "type": "number",
            "description": "Price",
            "format": "decimal"
          },
          "qtyProfile": {
            "type": "array",
            "description": "Qty profile",
            "nullable": true,
            "items": {
              "type": "number",
              "format": "decimal"
            }
          }
        }
      },
      "Side": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Buy",
          "Sell"
        ],
        "enum": [
          "Buy",
          "Sell"
        ]
      },
      "NewOrderReplyModel": {
        "type": "object",
        "description": "Reply to a request to add an order",
        "additionalProperties": false,
        "properties": {
          "orderId": {
            "type": "integer",
            "description": "Order ID",
            "format": "int64"
          }
        }
      },
      "NewOrderModel": {
        "type": "object",
        "description": "New order request",
        "additionalProperties": false,
        "required": [
          "clientOrderId",
          "symbol",
          "price",
          "qty",
          "side",
          "type"
        ],
        "properties": {
          "clientOrderId": {
            "type": "string",
            "description": "Client order identifier",
            "minLength": 1
          },
          "symbol": {
            "type": "string",
            "description": "Symbol (e.g. `ETH/BTC`)",
            "minLength": 1
          },
          "price": {
            "type": "number",
            "description": "Price",
            "format": "decimal"
          },
          "qty": {
            "type": "number",
            "description": "Qty",
            "format": "decimal"
          },
          "side": {
            "description": "Side",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Side"
              }
            ]
          },
          "type": {
            "description": "Type",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrderType"
              }
            ]
          },
          "proofsOfFunds": {
            "type": "array",
            "description": "Proofs that the client has funds to place order",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProofOfFundsModel"
            }
          },
          "requisites": {
            "description": "Swap requisites",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RequisitesModel"
              }
            ]
          }
        }
      },
      "OrderType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Return",
          "FillOrKill",
          "ImmediateOrCancel",
          "SolidFillOrKill"
        ],
        "enum": [
          "Return",
          "FillOrKill",
          "ImmediateOrCancel",
          "SolidFillOrKill"
        ]
      },
      "ProofOfFundsModel": {
        "type": "object",
        "description": "Proof of client funds",
        "additionalProperties": false,
        "required": [
          "address",
          "currency",
          "timeStamp",
          "message",
          "publicKey",
          "signature",
          "algorithm"
        ],
        "properties": {
          "address": {
            "type": "string",
            "description": "Address",
            "minLength": 1
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "minLength": 1
          },
          "timeStamp": {
            "type": "integer",
            "description": "Timestamp in unix time milliseconds (UTC)",
            "format": "int64"
          },
          "message": {
            "type": "string",
            "description": "Message",
            "maxLength": 256,
            "minLength": 0
          },
          "publicKey": {
            "type": "string",
            "description": "Public key in HEX",
            "minLength": 1
          },
          "signature": {
            "type": "string",
            "description": "Signature in HEX",
            "minLength": 1
          },
          "algorithm": {
            "type": "string",
            "description": "Signature algorithm. Supported values: `Ed25519`, `Ed25519:Blake2b`, `Sha256WithEcdsa:Secp256k1`, `Sha256WithEcdsa:Secp256r1`",
            "minLength": 1
          }
        }
      },
      "RequisitesModel": {
        "type": "object",
        "description": "Swap requisites",
        "additionalProperties": false,
        "required": [
          "receivingAddress",
          "rewardForRedeem",
          "lockTime"
        ],
        "properties": {
          "secretHash": {
            "type": "string",
            "description": "Secret hash",
            "nullable": true
          },
          "receivingAddress": {
            "type": "string",
            "description": "Receiving address",
            "minLength": 1
          },
          "refundAddress": {
            "type": "string",
            "description": "Refund address",
            "nullable": true
          },
          "rewardForRedeem": {
            "type": "number",
            "description": "Reward for redeem",
            "format": "decimal"
          },
          "lockTime": {
            "type": "integer",
            "description": "Lock time",
            "format": "int64"
          }
        }
      },
      "OrderModel": {
        "type": "object",
        "description": "Order",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Identifier",
            "format": "int64"
          },
          "clientOrderId": {
            "type": "string",
            "description": "Client order ID",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Symbol (e.g. `ETH/BTC`)",
            "nullable": true
          },
          "side": {
            "description": "Side",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Side"
              }
            ]
          },
          "timeStamp": {
            "type": "string",
            "description": "Time Stamp",
            "format": "date-time"
          },
          "price": {
            "type": "number",
            "description": "Price",
            "format": "decimal"
          },
          "qty": {
            "type": "number",
            "description": "Qty",
            "format": "decimal"
          },
          "leaveQty": {
            "type": "number",
            "description": "Leave Qty",
            "format": "decimal"
          },
          "type": {
            "description": "Type",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrderType"
              }
            ]
          },
          "status": {
            "description": "Status",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrderStatus"
              }
            ]
          },
          "trades": {
            "type": "array",
            "description": "Trades",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TradeModel"
            }
          },
          "swaps": {
            "type": "array",
            "description": "Swaps",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SwapModel"
            }
          }
        }
      },
      "OrderStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Pending",
          "Placed",
          "PartiallyFilled",
          "Filled",
          "Canceled",
          "Rejected"
        ],
        "enum": [
          "Pending",
          "Placed",
          "PartiallyFilled",
          "Filled",
          "Canceled",
          "Rejected"
        ]
      },
      "TradeModel": {
        "type": "object",
        "description": "Trade",
        "additionalProperties": false,
        "properties": {
          "orderId": {
            "type": "integer",
            "description": "Order ID",
            "format": "int64"
          },
          "price": {
            "type": "number",
            "description": "Price",
            "format": "decimal"
          },
          "qty": {
            "type": "number",
            "description": "Qty",
            "format": "decimal"
          }
        }
      },
      "SwapModel": {
        "type": "object",
        "description": "Swap",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier",
            "format": "int64"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol (e.g. ETH/BTC)",
            "nullable": true
          },
          "side": {
            "description": "Side",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Side"
              }
            ]
          },
          "timeStamp": {
            "type": "string",
            "description": "Time Stamp",
            "format": "date-time"
          },
          "price": {
            "type": "number",
            "description": "Price",
            "format": "decimal"
          },
          "qty": {
            "type": "number",
            "description": "Qty",
            "format": "decimal"
          },
          "secret": {
            "type": "string",
            "description": "Swap secret",
            "nullable": true
          },
          "secretHash": {
            "type": "string",
            "description": "Swap secret hash",
            "nullable": true
          },
          "isInitiator": {
            "type": "boolean",
            "description": "Is user swap initiator"
          },
          "user": {
            "description": "User swap information",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PartyModel"
              }
            ]
          },
          "counterParty": {
            "description": "Counterparty swap information",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PartyModel"
              }
            ]
          }
        }
      },
      "PartyModel": {
        "type": "object",
        "description": "Swap party",
        "additionalProperties": false,
        "properties": {
          "requisites": {
            "description": "Requisites",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RequisitesModel"
              }
            ]
          },
          "status": {
            "description": "Status",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PartyStatus"
              }
            ]
          },
          "trades": {
            "type": "array",
            "description": "Trades",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TradeModel"
            }
          },
          "transactions": {
            "type": "array",
            "description": "Transactions",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PartyTransactionModel"
            }
          }
        }
      },
      "PartyStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Created",
          "Involved",
          "PartiallyInitiated",
          "Initiated",
          "Redeemed",
          "Refunded",
          "Lost",
          "Jackpot"
        ],
        "enum": [
          "Created",
          "Involved",
          "PartiallyInitiated",
          "Initiated",
          "Redeemed",
          "Refunded",
          "Lost",
          "Jackpot"
        ]
      },
      "PartyTransactionModel": {
        "type": "object",
        "description": "Swap transaction information",
        "additionalProperties": false,
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency",
            "nullable": true
          },
          "txId": {
            "type": "string",
            "description": "Identifier",
            "nullable": true
          },
          "blockHeight": {
            "type": "integer",
            "description": "Block height",
            "format": "int64"
          },
          "confirmations": {
            "type": "integer",
            "description": "Confirmations",
            "format": "int64"
          },
          "status": {
            "description": "Status",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionStatus"
              }
            ]
          },
          "type": {
            "description": "Type",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PartyTransactionType"
              }
            ]
          }
        }
      },
      "TransactionStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Pending",
          "Confirmed",
          "Canceled"
        ],
        "enum": [
          "Pending",
          "Confirmed",
          "Canceled"
        ]
      },
      "PartyTransactionType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Lock",
          "AdditionalLock",
          "Redeem",
          "Refund"
        ],
        "enum": [
          "Lock",
          "AdditionalLock",
          "Redeem",
          "Refund"
        ]
      },
      "Sort": {
        "type": "string",
        "description": "Sort type",
        "x-enumNames": [
          "Asc",
          "Desc"
        ],
        "enum": [
          "Asc",
          "Desc"
        ]
      },
      "DeleteOrderReplyModel": {
        "type": "object",
        "description": "Reply to a request to delete an order",
        "additionalProperties": false,
        "properties": {
          "result": {
            "type": "boolean",
            "description": "Result of order deletion"
          }
        }
      },
      "SwapRequisitesReplyModel": {
        "type": "object",
        "description": "Reply to a request to add swap requisites",
        "additionalProperties": false,
        "properties": {
          "result": {
            "type": "boolean",
            "description": "Result of adding swap requisites"
          }
        }
      },
      "SymbolModel": {
        "type": "object",
        "description": "Symbol information",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name (e.g. `ETH/BTC`)",
            "nullable": true
          },
          "minimumQty": {
            "type": "number",
            "description": "Minimum qty",
            "format": "decimal"
          }
        }
      },
      "User": {
        "type": "object",
        "description": "User entity",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "nullable": true
          },
          "token": {
            "type": "string",
            "description": "Authentication token",
            "nullable": true
          },
          "expires": {
            "type": "integer",
            "description": "Token expiration timestamp in unix time milliseconds (UTC)",
            "format": "int64"
          }
        }
      },
      "AuthModel": {
        "type": "object",
        "description": "Authentication parameters",
        "additionalProperties": false,
        "required": [
          "timeStamp",
          "message",
          "publicKey",
          "signature",
          "algorithm"
        ],
        "properties": {
          "timeStamp": {
            "type": "integer",
            "description": "TimeStamp in unix time milliseconds (UTC)",
            "format": "int64"
          },
          "message": {
            "type": "string",
            "description": "Nonce",
            "maxLength": 256,
            "minLength": 0
          },
          "publicKey": {
            "type": "string",
            "description": "Public key in HEX",
            "minLength": 1
          },
          "signature": {
            "type": "string",
            "description": "Signature in HEX",
            "minLength": 1
          },
          "algorithm": {
            "type": "string",
            "description": "Signature algorithm. Supported values: `Ed25519`, `Ed25519:Blake2b`, `Sha256WithEcdsa:Secp256k1`, `Sha256WithEcdsa:Secp256r1`",
            "minLength": 1
          }
        }
      }
    }
  }
}