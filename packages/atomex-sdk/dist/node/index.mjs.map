{
  "version": 3,
  "sources": ["../../src/atomex/atomex.ts", "../../src/exchange/helpers/symbolsHelper.ts", "../../src/utils/converters.ts", "../../src/native/index.node.ts", "../../src/utils/guards.ts", "../../src/utils/atomexUtils.ts", "../../src/utils/text.ts", "../../src/utils/index.ts", "../../src/exchange/helpers/ordersHelper.ts", "../../src/exchange/exchangeManager.ts", "../../src/common/models/dataSource.ts", "../../src/common/models/importantDataReceivingMode.ts", "../../src/core/event/eventEmitter.ts", "../../src/core/event/deferredEventEmitter.ts", "../../src/core/httpClient.ts", "../../src/core/cache/inMemoryCache.ts", "../../src/exchange/exchangeSymbolsProvider/inMemoryExchangeSymbolsProvider.ts", "../../src/exchange/orderBookProvider/inMemoryOrderBookProvider.ts", "../../src/exchange/priceManager/mixedPriceManager/mixedPriceManager.ts", "../../src/exchange/priceProvider/atomex/atomexPriceProvider.ts", "../../src/exchange/priceProvider/binance/binancePriceProvider.ts", "../../src/exchange/priceProvider/binance/utils.ts", "../../src/exchange/priceProvider/kraken/krakenPriceProvider.ts", "../../src/atomex/atomexSwapPreviewManager.ts", "../../src/atomex/atomexContext.ts", "../../src/atomex/defaultAtomexContext.ts", "../../src/blockchain/balanceManager/cachedBalanceManager.ts", "../../src/blockchain/walletsManager.ts", "../../src/blockchain/atomexProtocolMultiChain/helper.ts", "../../src/blockchain/balanceProvider/controlledCurrencyBalancesProvider.ts", "../../src/blockchain/atomexBlockchainProvider.ts", "../../src/evm/atomexProtocol/web3AtomexProtocolMultiChain.ts", "../../src/evm/helpers/web3Helper.ts", "../../src/evm/wallets/web3BlockchainWallet.ts", "../../src/ethereum/utils/index.ts", "../../src/ethereum/utils/guards.ts", "../../src/evm/blockchainToolkitProviders/web3BlockchainToolkitProvider.ts", "../../src/evm/balancesProviders/web3BalancesProvider.ts", "../../src/evm/abi/erc20abi.ts", "../../src/ethereum/atomexProtocol/ethereumWeb3AtomexProtocolMultiChain.ts", "../../src/ethereum/atomexProtocol/erc20EthereumWeb3AtomexProtocolMultiChain.ts", "../../src/ethereum/swapTransactionsProviders/ethereumSwapTransactionsProvider.ts", "../../src/ethereum/config/currencies.ts", "../../src/ethereum/config/atomexProtocol/base.ts", "../../src/ethereum/config/atomexProtocol/mainnetMultiChainOptions.ts", "../../src/ethereum/config/atomexProtocol/testnetMultiChainOptions.ts", "../../src/ethereum/config/defaultOptions.ts", "../../src/swaps/swapManager.ts", "../../src/tezos/wallets/beaconWalletTezosWallet.ts", "../../src/tezos/utils/index.ts", "../../src/tezos/utils/guards.ts", "../../src/tezos/utils/signing.ts", "../../src/tezos/wallets/inMemoryTezosWallet.ts", "../../src/tezos/wallets/templeWalletTezosWallet.ts", "../../src/tezos/wallets/taquitoBlockchainWallet.ts", "../../src/tezos/atomexProtocol/taquitoAtomexProtocolMultiChain.ts", "../../src/tezos/atomexProtocol/tezosTaquitoAtomexProtocolMultiChain.ts", "../../src/tezos/atomexProtocol/fa12TezosTaquitoAtomexProtocolMultiChain.ts", "../../src/tezos/atomexProtocol/fa2TezosTaquitoAtomexProtocolMultiChain.ts", "../../src/tezos/balancesProviders/tzktBalancesProvider.ts", "../../src/tezos/swapTransactionsProviders/tezosSwapTransactionsProvider.ts", "../../src/tezos/blockchainToolkitProviders/taquitoBlockchainToolkitProvider.ts", "../../src/tezos/config/currencies.ts", "../../src/tezos/config/atomexProtocol/base.ts", "../../src/tezos/config/atomexProtocol/mainnetMultiChainOptions.ts", "../../src/tezos/config/atomexProtocol/testnetMultiChainOptions.ts", "../../src/tezos/config/defaultOptions.ts", "../../src/clients/helpers.ts", "../../src/clients/rest/restAtomexClient.ts", "../../src/clients/webSocket/webSocketClient.ts", "../../src/clients/webSocket/exchangeWebSocketClient.ts", "../../src/clients/webSocket/marketDataWebSocketClient.ts", "../../src/clients/webSocket/webSocketAtomexClient.ts", "../../src/clients/mixedAtomexClient.ts", "../../src/atomexBuilder/atomexComponents/exchangeService.ts", "../../src/authorization/models/authTokenSource.ts", "../../src/authorization/authorizationManager.ts", "../../src/browser/localStorageAuthorizationManagerStore/defaultSerializedAuthTokenMapper.ts", "../../src/browser/localStorageAuthorizationManagerStore/multipleKeysStoreStrategy.ts", "../../src/browser/localStorageAuthorizationManagerStore/singleKeyStoreStrategy.ts", "../../src/browser/localStorageAuthorizationManagerStore/localStorageAuthorizationManagerStore.ts", "../../src/stores/inMemoryAuthorizationManagerStore.ts", "../../src/atomexBuilder/atomexComponents/authorizationManager.ts", "../../src/atomexBuilder/atomexConfig.ts", "../../src/atomexBuilder/atomexBuilder.ts", "../../src/atomexBuilder/createDefaultAtomex.ts", "../../src/legacy/index.ts", "../../src/legacy/config.ts", "../../src/legacy/atomex.ts", "../../src/legacy/ethereum.ts", "../../src/legacy/helpers.ts", "../../src/legacy/tezos.ts", "../../src/legacy/fa12.ts", "../../src/legacy/fa2.ts"],
  "sourcesContent": ["import BigNumber from 'bignumber.js';\n\nimport type { AuthorizationManager } from '../authorization/index';\nimport type { BalanceManager } from '../blockchain/balanceManager';\nimport type { AtomexProtocolMultiChain, WalletsManager } from '../blockchain/index';\nimport type { AtomexService, Currency } from '../common/index';\nimport { NewOrderRequest, ExchangeManager, symbolsHelper, PriceManager } from '../exchange/index';\nimport type { Swap, SwapManager } from '../swaps/index';\nimport { toFixedBigNumber } from '../utils/converters';\nimport type { AtomexContext } from './atomexContext';\nimport { AtomexSwapPreviewManager } from './atomexSwapPreviewManager';\nimport {\n  NewSwapRequest, SwapOperationCompleteStage, AtomexOptions,\n  AtomexBlockchainNetworkOptions,\n  SwapPreviewParameters,\n  NormalizedSwapPreviewParameters,\n  SwapPreview\n} from './models/index';\n\nexport class Atomex implements AtomexService {\n  readonly authorization: AuthorizationManager;\n  readonly exchangeManager: ExchangeManager;\n  readonly balanceManager: BalanceManager;\n  readonly priceManager: PriceManager;\n  readonly swapManager: SwapManager;\n  readonly wallets: WalletsManager;\n  readonly atomexContext: AtomexContext;\n\n  protected readonly swapPreviewManager: AtomexSwapPreviewManager;\n\n  private _isStarted = false;\n\n  constructor(readonly options: AtomexOptions) {\n    this.atomexContext = options.atomexContext;\n    this.swapPreviewManager = new AtomexSwapPreviewManager(options.atomexContext);\n\n    this.wallets = options.managers.walletsManager;\n    this.authorization = options.managers.authorizationManager;\n    this.exchangeManager = options.managers.exchangeManager;\n    this.swapManager = options.managers.swapManager;\n    this.balanceManager = options.managers.balanceManager;\n    this.priceManager = options.managers.priceManager;\n\n    if (options.blockchains)\n      for (const blockchainName of Object.keys(options.blockchains))\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.addBlockchain(_context => [blockchainName, options.blockchains![blockchainName]!]);\n  }\n\n  get atomexNetwork() {\n    return this.atomexContext.atomexNetwork;\n  }\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  async start(): Promise<void> {\n    if (this.isStarted)\n      return;\n\n    await this.authorization.start();\n    await this.exchangeManager.start();\n    await this.swapManager.start();\n\n    this._isStarted = true;\n  }\n\n  stop(): void {\n    if (!this.isStarted)\n      return;\n\n    this.authorization.stop();\n    this.exchangeManager.stop();\n    this.swapManager.stop();\n    this.balanceManager.dispose();\n    this.swapPreviewManager.dispose();\n\n    this._isStarted = false;\n  }\n\n  addBlockchain(factoryMethod: (context: AtomexContext) => [blockchain: string, options: AtomexBlockchainNetworkOptions]) {\n    const [blockchain, blockchainOptions] = factoryMethod(this.atomexContext);\n    this.atomexContext.providers.blockchainProvider.addBlockchain(blockchain, blockchainOptions);\n  }\n\n  getCurrency(currencyId: Currency['id']): Currency | undefined {\n    return this.atomexContext.providers.currenciesProvider.getCurrency(currencyId);\n  }\n\n  getSwapPreview(swapPreviewParameters: SwapPreviewParameters | NormalizedSwapPreviewParameters): Promise<SwapPreview> {\n    return this.swapPreviewManager.getSwapPreview(swapPreviewParameters);\n  }\n\n  async swap(newSwapRequest: NewSwapRequest, completeStage?: SwapOperationCompleteStage): Promise<Swap | readonly Swap[]>;\n  async swap(swapId: Swap['id'], completeStage?: SwapOperationCompleteStage): Promise<Swap | readonly Swap[]>;\n  async swap(newSwapRequestOrSwapId: NewSwapRequest | Swap['id'], _completeStage = SwapOperationCompleteStage.All): Promise<Swap | readonly Swap[]> {\n    if (typeof newSwapRequestOrSwapId === 'number')\n      throw new Error('Swap tracking is not implemented yet');\n\n    const swapPreview = newSwapRequestOrSwapId.swapPreview;\n    if (swapPreview.errors.length)\n      throw new Error('Swap preview has errors');\n\n    const fromAddress = swapPreview.from.address;\n    if (!fromAddress)\n      throw new Error('Swap preview doesn\\'t have the \"from\" address');\n    const toAddress = swapPreview.to.address;\n    if (!toAddress)\n      throw new Error('Swap preview doesn\\'t have the \"to\" address');\n\n    const [baseCurrencyId, quoteCurrencyId] = symbolsHelper.getBaseQuoteCurrenciesBySymbol(swapPreview.symbol);\n    const baseCurrencyInfo = this.atomexContext.providers.blockchainProvider.getCurrencyInfo(baseCurrencyId);\n    if (!baseCurrencyInfo)\n      throw new Error(`The \"${baseCurrencyId}\" currency (base) is unknown`);\n    const quoteCurrencyInfo = this.atomexContext.providers.blockchainProvider.getCurrencyInfo(quoteCurrencyId);\n    if (!quoteCurrencyInfo)\n      throw new Error(`The \"${quoteCurrencyId}\" currency (quote) is unknown`);\n\n    if (baseCurrencyInfo.atomexProtocol.type !== 'multi-chain')\n      throw new Error(`Unknown type (${baseCurrencyInfo.atomexProtocol.type}) of the Atomex protocol (base)`);\n    if (quoteCurrencyInfo.atomexProtocol.type !== 'multi-chain')\n      throw new Error(`Unknown type (${quoteCurrencyInfo.atomexProtocol.type}) of the Atomex protocol (quote)`);\n\n    const baseCurrencyAtomexProtocolMultiChain = baseCurrencyInfo.atomexProtocol as AtomexProtocolMultiChain;\n    const quoteCurrencyAtomexProtocolMultiChain = quoteCurrencyInfo.atomexProtocol as AtomexProtocolMultiChain;\n    const directionName: 'from' | 'to' = baseCurrencyId === swapPreview.from.currencyId ? 'from' : 'to';\n    const rewardForRedeem = swapPreview.fees.success.find(fee => fee.name == 'redeem-reward')?.estimated;\n    const newOrderRequest: NewOrderRequest = {\n      orderBody: {\n        type: swapPreview.type,\n        symbol: swapPreview.symbol,\n        side: swapPreview.side,\n        amount: swapPreview[directionName].actual.amount,\n        price: swapPreview[directionName].actual.price\n      },\n      requisites: {\n        secretHash: null,\n        receivingAddress: toAddress,\n        refundAddress: newSwapRequestOrSwapId.refundAddress || null,\n        rewardForRedeem: rewardForRedeem || new BigNumber(0),\n        // TODO: from config\n        lockTime: 18000,\n        baseCurrencyContract: baseCurrencyAtomexProtocolMultiChain.swapContractAddress,\n        quoteCurrencyContract: quoteCurrencyAtomexProtocolMultiChain.swapContractAddress\n      }\n    };\n\n    const orderId = await this.exchangeManager.addOrder(fromAddress, newOrderRequest);\n    const order = await this.exchangeManager.getOrder(fromAddress, orderId);\n    if (!order)\n      throw new Error(`The ${orderId} order not found`);\n\n    if (order.status !== 'Filled')\n      throw new Error(`The ${orderId} order is not filled`);\n\n    const swaps = await Promise.all(order.swapIds.map(swapId => this.swapManager.getSwap(swapId, fromAddress)));\n    if (!swaps.length)\n      throw new Error('Swaps not found');\n    if (swaps.some(swap => !swap))\n      throw new Error('Swap not found');\n\n    this.swapPreviewManager.clearCache();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return swaps.length === 1 ? swaps[0]! : (swaps as readonly Swap[]);\n  }\n\n  async convertCurrency(fromAmount: BigNumber.Value, fromCurrency: Currency['id'], toCurrency: Currency['id']): Promise<BigNumber | undefined> {\n    const price = await this.priceManager.getAveragePrice({ baseCurrency: fromCurrency, quoteCurrency: toCurrency });\n    if (!price)\n      return undefined;\n\n    const inAmountBigNumber = BigNumber.isBigNumber(fromAmount) ? fromAmount : new BigNumber(fromAmount);\n    const outAmount = inAmountBigNumber.multipliedBy(price);\n    const toCurrencyInfo = this.getCurrency(toCurrency);\n\n    return toCurrencyInfo ? toFixedBigNumber(outAmount, toCurrencyInfo.decimals) : outAmount;\n  }\n}\n", "import BigNumber from 'bignumber.js';\n\nimport type { Currency, Side } from '../../common/index';\nimport { converters, guards } from '../../utils/index';\nimport type { ExchangeSymbol, SymbolCurrency } from '../models/index';\n\nexport const getBaseQuoteCurrenciesBySymbol = (symbol: string): readonly [baseCurrency: string, quoteCurrency: string] => {\n  const result = symbol.split('/', 2);\n\n  return [result[0] || '', result[1] || ''];\n};\n\nexport const convertSymbolAndSideToFromAndToSymbolCurrencies = (\n  symbol: ExchangeSymbol,\n  side: Side,\n  currencyAmount: BigNumber.Value,\n  baseCurrencyPrice: BigNumber.Value,\n  isBaseCurrencyAmount = true\n): readonly [from: SymbolCurrency, to: SymbolCurrency] => {\n  const preparedBaseCurrencyPrice = converters.toFixedBigNumber(baseCurrencyPrice, symbol.decimals.price, BigNumber.ROUND_FLOOR);\n  const [baseCurrencyId, quoteCurrencyId] = getBaseQuoteCurrenciesBySymbol(symbol.name);\n  const isBuySide = side === 'Buy';\n\n  let preparedBaseCurrencyAmount: BigNumber;\n  let preparedQuoteCurrencyAmount: BigNumber;\n\n  if (isBaseCurrencyAmount) {\n    preparedBaseCurrencyAmount = converters.toFixedBigNumber(currencyAmount, symbol.decimals.baseCurrency, BigNumber.ROUND_FLOOR);\n    preparedQuoteCurrencyAmount = converters.toFixedBigNumber(\n      preparedBaseCurrencyPrice.multipliedBy(preparedBaseCurrencyAmount),\n      symbol.decimals.quoteCurrency,\n      isBuySide ? BigNumber.ROUND_CEIL : BigNumber.ROUND_FLOOR\n    );\n  }\n  else {\n    preparedQuoteCurrencyAmount = converters.toFixedBigNumber(currencyAmount, symbol.decimals.quoteCurrency, BigNumber.ROUND_FLOOR);\n    preparedBaseCurrencyAmount = converters.toFixedBigNumber(\n      preparedQuoteCurrencyAmount.div(preparedBaseCurrencyPrice),\n      symbol.decimals.baseCurrency,\n      isBuySide ? BigNumber.ROUND_FLOOR : BigNumber.ROUND_CEIL\n    );\n  }\n\n  const preparedQuoteCurrencyPrice = converters.toFixedBigNumber(\n    new BigNumber(1).div(preparedBaseCurrencyPrice),\n    symbol.decimals.price,\n    BigNumber.ROUND_FLOOR\n  );\n\n  const baseCurrency: SymbolCurrency = {\n    currencyId: baseCurrencyId,\n    amount: preparedBaseCurrencyAmount,\n    price: preparedBaseCurrencyPrice,\n  };\n\n  const quoteCurrency: SymbolCurrency = {\n    currencyId: quoteCurrencyId,\n    amount: preparedQuoteCurrencyAmount,\n    price: preparedQuoteCurrencyPrice,\n  };\n\n  return isBuySide\n    ? [quoteCurrency, baseCurrency]\n    : [baseCurrency, quoteCurrency];\n};\n\nexport const convertSymbolAndSideToFromAndToCurrencies = (\n  symbol: ExchangeSymbol | string,\n  side: Side\n): readonly [from: Currency['id'], to: Currency['id']] => {\n  let baseCurrency: Currency['id'];\n  let quoteCurrency: Currency['id'];\n\n  if (typeof symbol === 'string') {\n    const baseAndQuoteCurrencies = getBaseQuoteCurrenciesBySymbol(symbol);\n    baseCurrency = baseAndQuoteCurrencies[0];\n    quoteCurrency = baseAndQuoteCurrencies[1];\n  } else {\n    baseCurrency = symbol.baseCurrency;\n    quoteCurrency = symbol.quoteCurrency;\n  }\n\n  return side === 'Sell'\n    ? [quoteCurrency, baseCurrency]\n    : [baseCurrency, quoteCurrency];\n};\n\nexport const convertFromAndToCurrenciesToSymbolAndSide = (\n  symbols: ReadonlyMap<ExchangeSymbol['name'], ExchangeSymbol> | readonly ExchangeSymbol[],\n  from: Currency['id'],\n  to: Currency['id']\n): readonly [exchangeSymbol: ExchangeSymbol, side: Side] => {\n  const sellSideSymbolName = `${from}/${to}`;\n  const buySideSymbolName = `${to}/${from}`;\n  let symbol: ExchangeSymbol | undefined;\n  let side: Side = 'Sell';\n\n  if (guards.isReadonlyArray(symbols)) {\n    for (const s of symbols) {\n      if (s.name === sellSideSymbolName) {\n        symbol = s;\n        break;\n      }\n\n      if (s.name === buySideSymbolName) {\n        symbol = s;\n        side = 'Buy';\n        break;\n      }\n    }\n  }\n  else {\n    symbol = symbols.get(sellSideSymbolName);\n    if (!symbol) {\n      side = 'Buy';\n      symbol = symbols.get(buySideSymbolName);\n    }\n  }\n\n  if (!symbol)\n    throw new Error(`Invalid pair: ${from}/${to}`);\n\n  return [symbol, side];\n};\n", "import BigNumber from 'bignumber.js';\n\nimport { Buffer } from '../native';\n\nexport const hexStringToUint8Array = (hex: string): Uint8Array => {\n  const integers = hex.match(/[\\da-f]{2}/gi)?.map(val => parseInt(val, 16));\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return new Uint8Array(integers!);\n};\n\nexport const uint8ArrayToHexString = (value: Uint8Array): string => Buffer.from(value).toString('hex');\nexport const stringToHexString = (value: string): string => Buffer.from(value, 'utf8').toString('hex');\nexport const hexStringToString = (value: string): string => Buffer.from(hexStringToUint8Array(value)).toString('utf8');\n\nexport const objectToHexString = (value: Record<string, unknown>): string => stringToHexString(JSON.stringify(value));\nexport const hexStringToObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: string): T | null => {\n  try {\n    return JSON.parse(hexStringToString(value));\n  }\n  catch {\n    return null;\n  }\n};\n\nexport const tokensAmountToNat = (tokensAmount: BigNumber | number, decimals: number): BigNumber => {\n  return new BigNumber(tokensAmount).multipliedBy(10 ** decimals).integerValue();\n};\n\nexport const numberToTokensAmount = (value: BigNumber | number, decimals: number): BigNumber => {\n  return new BigNumber(value).integerValue().div(10 ** decimals);\n};\n\nexport const toFixedBigNumber = (\n  value: BigNumber.Value,\n  decimalPlaces: number,\n  roundingMode?: BigNumber.RoundingMode\n): BigNumber => {\n  value = BigNumber.isBigNumber(value) ? value : new BigNumber(value);\n\n  return new BigNumber((value as BigNumber).toFixed(decimalPlaces, roundingMode));\n};\n", "export { Buffer } from 'node:buffer';\n", "import isPlainObjectLodashFunction from 'lodash.isplainobject';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isArray = (arg: any): arg is any[] => {\n  return Array.isArray(arg);\n};\n\nexport const isReadonlyArray = (arg: unknown): arg is readonly unknown[] => {\n  return Array.isArray(arg);\n};\n\nexport const isPlainObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: unknown): value is T => {\n  return isPlainObjectLodashFunction(value);\n};\n", "import type { AtomexNetwork } from '../common/index';\n\nexport const ensureNetworksAreSame = (\n  value1: { atomexNetwork: AtomexNetwork } | AtomexNetwork,\n  value2: { atomexNetwork: AtomexNetwork } | AtomexNetwork\n) => {\n  if ((typeof value1 === 'string' ? value1 : value1.atomexNetwork) === (typeof value2 === 'string' ? value2 : value2.atomexNetwork))\n    return;\n\n  throw new Error('Networks are different');\n};\n", "export const capitalize = (value: string): string => value && (value[0]?.toLocaleUpperCase() + value.slice(1));\n\nconst stringPad = (string: string, isStart: boolean, maxLength: number, fillString = ' ') => {\n  if (String.prototype.padStart !== undefined)\n    return string.padStart(maxLength, fillString);\n\n  const stringLength = string.length;\n  // eslint-disable-next-line eqeqeq\n  if (maxLength <= stringLength || fillString == '')\n    return string;\n\n  const fillLength = maxLength - stringLength;\n  let filler = fillString.repeat(Math.ceil(fillLength / fillString.length));\n\n  if (filler.length > fillLength)\n    filler = filler.slice(0, fillLength);\n\n  return isStart ? filler + string : string + filler;\n};\n\nexport const padStart = (string: string, maxLength: number, fillString = ' ') => String.prototype.padStart !== undefined\n  ? string.padStart(maxLength, fillString)\n  : stringPad(string, true, maxLength, fillString);\n\nexport const padEnd = (string: string, maxLength: number, fillString = ' ') => String.prototype.padEnd !== undefined\n  ? string.padEnd(maxLength, fillString)\n  : stringPad(string, false, maxLength, fillString);\n", "export * as converters from './converters';\nexport * as guards from './guards';\nexport * as atomexUtils from './atomexUtils';\nexport * as textUtils from './text';\n\nexport const wait = (ms: number) => new Promise<void>(resolve => setTimeout(resolve, ms));\n\nexport const prepareTimeoutDuration = (durationMs: number) => Math.min(durationMs, 0x7FFFFFFF);\n", "import type { ExchangeSymbolsProvider } from '../exchangeSymbolsProvider';\nimport type { OrderPreviewParameters, NormalizedOrderPreviewParameters, NewOrderRequest, OrderPreview } from '../models';\nimport { convertFromAndToCurrenciesToSymbolAndSide, convertSymbolAndSideToFromAndToCurrencies } from './symbolsHelper';\n\nexport const isOrderPreview = (orderBody: NewOrderRequest['orderBody']): orderBody is OrderPreview => {\n  return typeof orderBody.symbol === 'string' && typeof orderBody.side === 'string'\n    && !!(orderBody as OrderPreview).from && !!(orderBody as OrderPreview).to;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isNormalizedOrderPreviewParameters = (orderPreviewParameters: any): orderPreviewParameters is NormalizedOrderPreviewParameters => {\n  return !!(orderPreviewParameters.symbol && orderPreviewParameters.side && orderPreviewParameters.from && orderPreviewParameters.to\n    && typeof orderPreviewParameters.isBaseCurrencyAmount === 'boolean'\n    && typeof orderPreviewParameters.isFromAmount === 'boolean'\n  );\n};\n\nexport const normalizeOrderPreviewParameters = (\n  orderPreviewParameters: OrderPreviewParameters,\n  exchangeSymbolsProvider: ExchangeSymbolsProvider\n): NormalizedOrderPreviewParameters => {\n  const exchangeSymbols = exchangeSymbolsProvider.getSymbolsMap();\n\n  let symbol: string;\n  let exchangeSymbol: NormalizedOrderPreviewParameters['exchangeSymbol'] | undefined;\n  let side: NormalizedOrderPreviewParameters['side'];\n  let isBaseCurrencyAmount: NormalizedOrderPreviewParameters['isBaseCurrencyAmount'] = true;\n  let from: NormalizedOrderPreviewParameters['from'];\n  let to: NormalizedOrderPreviewParameters['to'];\n  let isFromAmount: NormalizedOrderPreviewParameters['isFromAmount'] = true;\n\n  if (orderPreviewParameters.symbol && orderPreviewParameters.side) {\n    symbol = orderPreviewParameters.symbol;\n    exchangeSymbol = exchangeSymbols.get(symbol);\n    if (!exchangeSymbol)\n      throw new Error(`The ${symbol} Symbol not found`);\n\n    side = orderPreviewParameters.side;\n    if (orderPreviewParameters.isBaseCurrencyAmount !== undefined && orderPreviewParameters.isBaseCurrencyAmount !== null)\n      isBaseCurrencyAmount = orderPreviewParameters.isBaseCurrencyAmount;\n\n    [from, to] = convertSymbolAndSideToFromAndToCurrencies(exchangeSymbol, side);\n    isFromAmount = (isBaseCurrencyAmount && from === exchangeSymbol.baseCurrency)\n      || (!isBaseCurrencyAmount && to === exchangeSymbol.baseCurrency);\n  }\n  else if (orderPreviewParameters.from && orderPreviewParameters.to) {\n    from = orderPreviewParameters.from;\n    to = orderPreviewParameters.to;\n    isFromAmount = (orderPreviewParameters.isFromAmount !== undefined && orderPreviewParameters.isFromAmount !== null)\n      ? orderPreviewParameters.isFromAmount\n      : true;\n\n    [exchangeSymbol, side] = convertFromAndToCurrenciesToSymbolAndSide(exchangeSymbols, orderPreviewParameters.from, orderPreviewParameters.to);\n    symbol = exchangeSymbol.name;\n    isBaseCurrencyAmount = (isFromAmount && orderPreviewParameters.from === exchangeSymbol.baseCurrency)\n      || (!isFromAmount && orderPreviewParameters.to === exchangeSymbol.baseCurrency);\n  }\n  else\n    throw new Error('Invalid orderPreviewParameters argument passed');\n\n  return {\n    type: orderPreviewParameters.type,\n    amount: orderPreviewParameters.amount,\n    exchangeSymbol,\n    side,\n    isBaseCurrencyAmount,\n    from,\n    to,\n    isFromAmount\n  };\n};\n", "import { BigNumber } from 'bignumber.js';\nimport { nanoid } from 'nanoid';\n\nimport type { AuthorizationManager } from '../authorization';\nimport { AtomexService, Currency, DataSource, ImportantDataReceivingMode, Side } from '../common/index';\nimport { EventEmitter, type ToEventEmitter } from '../core/index';\nimport type { ExchangeService, ExchangeServiceEvents } from './exchangeService';\nimport type { ManagedExchangeSymbolsProvider } from './exchangeSymbolsProvider/index';\nimport { ordersHelper, symbolsHelper } from './helpers/index';\nimport type {\n  CancelAllOrdersRequest, CancelOrderRequest, CurrencyDirection, ExchangeSymbol,\n  OrderPreviewParameters as OrderPreviewParameters,\n  NewOrderRequest, Order, OrderBook, OrderPreview, OrdersSelector, Quote, OrderType,\n  NormalizedOrderPreviewParameters, FilledNewOrderRequest, SymbolLiquidity, SymbolLiquidityParameters, ProofOfFunds\n} from './models/index';\nimport type { ManagedOrderBookProvider } from './orderBookProvider';\n\nexport interface ExchangeManagerOptions {\n  authorizationManager: AuthorizationManager;\n  exchangeService: ExchangeService;\n  symbolsProvider: ManagedExchangeSymbolsProvider;\n  orderBookProvider: ManagedOrderBookProvider;\n}\n\nexport class ExchangeManager implements AtomexService {\n  readonly events: ExchangeServiceEvents = {\n    orderUpdated: new EventEmitter(),\n    orderBookSnapshot: new EventEmitter(),\n    orderBookUpdated: new EventEmitter(),\n    topOfBookUpdated: new EventEmitter()\n  };\n\n  protected readonly authorizationManager: AuthorizationManager;\n  protected readonly exchangeService: ExchangeService;\n  protected readonly symbolsProvider: ManagedExchangeSymbolsProvider;\n  protected readonly orderBookProvider: ManagedOrderBookProvider;\n\n  private _isStarted = false;\n\n  constructor(options: ExchangeManagerOptions) {\n    this.authorizationManager = options.authorizationManager;\n    this.exchangeService = options.exchangeService;\n    this.symbolsProvider = options.symbolsProvider;\n    this.orderBookProvider = options.orderBookProvider;\n  }\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  async start() {\n    if (this.isStarted)\n      return;\n\n    this.attachEvents();\n    await this.exchangeService.start();\n    await this.getSymbols();\n\n    this._isStarted = true;\n  }\n\n  stop() {\n    if (!this._isStarted)\n      return;\n\n    this.detachEvents();\n    this.exchangeService.stop();\n\n    this._isStarted = false;\n  }\n\n  getOrder(accountAddress: string, orderId: number, _mode = ImportantDataReceivingMode.SafeMerged): Promise<Order | undefined> {\n    return this.exchangeService.getOrder(accountAddress, orderId);\n  }\n\n  getOrders(accountAddress: string, selector?: OrdersSelector | undefined, _mode = ImportantDataReceivingMode.SafeMerged): Promise<Order[]> {\n    return this.exchangeService.getOrders(accountAddress, selector);\n  }\n\n  async getSymbol(name: string, dataSource = DataSource.All): Promise<ExchangeSymbol | undefined> {\n    if ((dataSource & DataSource.Local) === DataSource.Local) {\n      const symbol = this.symbolsProvider.getSymbol(name);\n      if (symbol)\n        return symbol;\n    }\n\n    if ((dataSource & DataSource.Remote) === DataSource.Remote) {\n      const symbols = await this.exchangeService.getSymbols();\n      this.symbolsProvider.setSymbols(symbols);\n\n      return this.symbolsProvider.getSymbol(name);\n    }\n\n    return undefined;\n  }\n\n  async getSymbols(dataSource = DataSource.All): Promise<readonly ExchangeSymbol[]> {\n    if ((dataSource & DataSource.Local) === DataSource.Local) {\n      const symbols = this.symbolsProvider.getSymbols();\n      if (symbols.length > 0)\n        return symbols;\n    }\n\n    if ((dataSource & DataSource.Remote) === DataSource.Remote) {\n      const symbols = await this.exchangeService.getSymbols();\n      this.symbolsProvider.setSymbols(symbols);\n\n      return symbols;\n    }\n\n    return [];\n  }\n\n  getTopOfBook(symbols?: string[]): Promise<Quote[]>;\n  getTopOfBook(directions?: CurrencyDirection[]): Promise<Quote[]>;\n  getTopOfBook(symbolsOrDirections?: string[] | CurrencyDirection[]): Promise<Quote[]> {\n    return (this.exchangeService.getTopOfBook as (symbolsOrDirections?: string[] | CurrencyDirection[]) => Promise<Quote[]>)(symbolsOrDirections);\n  }\n\n  getOrderBook(symbol: string): Promise<OrderBook | undefined>;\n  getOrderBook(direction: CurrencyDirection): Promise<OrderBook | undefined>;\n  async getOrderBook(symbolOrDirection: string | CurrencyDirection): Promise<OrderBook | undefined> {\n    let symbol: string;\n\n    if (typeof symbolOrDirection === 'string')\n      symbol = symbolOrDirection;\n    else {\n      const exchangeSymbols = this.symbolsProvider.getSymbolsMap();\n      symbol = symbolsHelper.convertFromAndToCurrenciesToSymbolAndSide(exchangeSymbols, symbolOrDirection.from, symbolOrDirection.to)[0].name;\n    }\n\n    if (!symbol)\n      throw new Error('Invalid Symbol');\n\n    const orderBook = await this.exchangeService.getOrderBook(symbol);\n    if (orderBook)\n      this.orderBookProvider.setOrderBook(symbol, orderBook);\n\n    return orderBook;\n  }\n\n  addOrder(accountAddress: string, newOrderRequest: NewOrderRequest): Promise<number> {\n    const proofsOfFunds = newOrderRequest.proofsOfFunds\n      ? newOrderRequest.proofsOfFunds\n      : this.createProofOfFunds(accountAddress, newOrderRequest);\n\n    const filledNewOrderRequest: FilledNewOrderRequest = {\n      clientOrderId: newOrderRequest.clientOrderId || nanoid(17),\n      orderBody: newOrderRequest.orderBody,\n      requisites: newOrderRequest.requisites,\n      proofsOfFunds\n    };\n\n    return this.exchangeService.addOrder(accountAddress, filledNewOrderRequest);\n  }\n\n  cancelOrder(accountAddress: string, cancelOrderRequest: CancelOrderRequest): Promise<boolean> {\n    return this.exchangeService.cancelOrder(accountAddress, cancelOrderRequest);\n  }\n\n  cancelAllOrders(accountAddress: string, cancelAllOrdersRequest: CancelAllOrdersRequest): Promise<number> {\n    return this.exchangeService.cancelAllOrders(accountAddress, cancelAllOrdersRequest);\n  }\n\n  async getOrderPreview(orderPreviewParameters: OrderPreviewParameters | NormalizedOrderPreviewParameters): Promise<OrderPreview | undefined> {\n    if (orderPreviewParameters.type !== 'SolidFillOrKill')\n      throw new Error('Only the \"SolidFillOrKill\" order type is supported at the current moment');\n\n    const normalizedPreviewParameters = this.normalizeOrderPreviewParametersIfNeeded(orderPreviewParameters);\n    const orderBookEntry = await this.findOrderBookEntry(\n      normalizedPreviewParameters.exchangeSymbol.name,\n      normalizedPreviewParameters.side, orderPreviewParameters.type,\n      normalizedPreviewParameters.amount,\n      normalizedPreviewParameters.isBaseCurrencyAmount\n    );\n    if (!orderBookEntry)\n      return undefined;\n\n    const [from, to] = symbolsHelper.convertSymbolAndSideToFromAndToSymbolCurrencies(\n      normalizedPreviewParameters.exchangeSymbol,\n      normalizedPreviewParameters.side,\n      normalizedPreviewParameters.amount,\n      orderBookEntry.price,\n      normalizedPreviewParameters.isBaseCurrencyAmount\n    );\n\n    return {\n      type: orderPreviewParameters.type,\n      from,\n      to,\n      side: normalizedPreviewParameters.side,\n      symbol: normalizedPreviewParameters.exchangeSymbol.name,\n    };\n  }\n\n  async getAvailableLiquidity(parameters: SymbolLiquidityParameters): Promise<SymbolLiquidity | undefined> {\n    if (parameters.type !== 'SolidFillOrKill')\n      throw new Error('Only the \"SolidFillOrKill\" order type is supported at the current moment');\n\n    let symbol: string;\n    let side: Side;\n\n    if (parameters.symbol !== undefined) {\n      symbol = parameters.symbol;\n      side = parameters.side;\n    } else {\n      const exchangeSymbols = this.symbolsProvider.getSymbolsMap();\n      const exchangeSymbolAndSide = symbolsHelper.convertFromAndToCurrenciesToSymbolAndSide(exchangeSymbols, parameters.from, parameters.to);\n      symbol = exchangeSymbolAndSide[0].name;\n      side = exchangeSymbolAndSide[1];\n    }\n\n    const orderBook = await this.getCachedOrderBook(symbol);\n    if (!orderBook)\n      return undefined;\n\n    const maxAmount = Math.max(\n      ...orderBook.entries\n        .filter(entry => entry.side != side)\n        .map(entry => Math.max(...entry.qtyProfile)),\n    );\n\n    if (!isFinite(maxAmount) || isNaN(maxAmount) || maxAmount <= 0)\n      return undefined;\n\n    const amount = new BigNumber(maxAmount);\n    const orderPreviewParameters: OrderPreviewParameters = parameters.symbol !== undefined ? {\n      amount,\n      symbol,\n      side,\n      type: parameters.type,\n      isBaseCurrencyAmount: true\n    } : {\n      amount,\n      type: parameters.type,\n      from: parameters.from,\n      to: parameters.to,\n      isFromAmount: side === 'Sell'\n    };\n\n    const orderPreview = await this.getOrderPreview(orderPreviewParameters);\n    if (!orderPreview)\n      return undefined;\n\n    return {\n      symbol: orderPreview.symbol,\n      type: orderPreview.type,\n      from: orderPreview.from,\n      to: orderPreview.to,\n      side: orderPreview.side,\n    };\n  }\n\n  protected attachEvents() {\n    this.exchangeService.events.orderUpdated.addListener(this.handleExchangeServiceOrderUpdated);\n    this.exchangeService.events.orderBookSnapshot.addListener(this.handleExchangeServiceOrderBookSnapshot);\n    this.exchangeService.events.orderBookUpdated.addListener(this.handleExchangeServiceOrderBookUpdated);\n    this.exchangeService.events.topOfBookUpdated.addListener(this.handleExchangeServiceTopOfBookUpdated);\n  }\n\n  protected detachEvents() {\n    this.exchangeService.events.orderUpdated.removeListener(this.handleExchangeServiceOrderUpdated);\n    this.exchangeService.events.orderBookSnapshot.removeListener(this.handleExchangeServiceOrderBookSnapshot);\n    this.exchangeService.events.orderBookUpdated.removeListener(this.handleExchangeServiceOrderBookUpdated);\n    this.exchangeService.events.topOfBookUpdated.removeListener(this.handleExchangeServiceTopOfBookUpdated);\n  }\n\n  protected handleExchangeServiceOrderUpdated = (updatedOrder: Order) => {\n    (this.events.orderUpdated as ToEventEmitter<typeof this.events.orderUpdated>).emit(updatedOrder);\n  };\n\n  protected handleExchangeServiceOrderBookSnapshot = async (orderBook: OrderBook) => {\n    (this.events.orderBookSnapshot as ToEventEmitter<typeof this.events.orderBookSnapshot>).emit(orderBook);\n  };\n\n  protected handleExchangeServiceOrderBookUpdated = async (updatedOrderBook: OrderBook) => {\n    (this.events.orderBookUpdated as ToEventEmitter<typeof this.events.orderBookUpdated>).emit(updatedOrderBook);\n  };\n\n  protected handleExchangeServiceTopOfBookUpdated = (updatedQuotes: readonly Quote[]) => {\n    (this.events.topOfBookUpdated as ToEventEmitter<typeof this.events.topOfBookUpdated>).emit(updatedQuotes);\n  };\n\n  protected normalizeOrderPreviewParametersIfNeeded(orderPreviewParameters: OrderPreviewParameters | NormalizedOrderPreviewParameters): NormalizedOrderPreviewParameters {\n    return ordersHelper.isNormalizedOrderPreviewParameters(orderPreviewParameters)\n      ? orderPreviewParameters\n      : ordersHelper.normalizeOrderPreviewParameters(orderPreviewParameters, this.symbolsProvider);\n  }\n\n  protected async findOrderBookEntry(symbol: string, side: Side, orderType: OrderType, amount: BigNumber, isBaseCurrencyAmount: boolean) {\n    if (orderType !== 'SolidFillOrKill')\n      return undefined;\n\n    const orderBook = await this.getCachedOrderBook(symbol);\n    if (!orderBook)\n      return undefined;\n\n    for (const entry of orderBook.entries) {\n      if (entry.side !== side && (isBaseCurrencyAmount ? amount : amount.div(entry.price)).isLessThanOrEqualTo(Math.max(...entry.qtyProfile))) {\n        return entry;\n      }\n    }\n  }\n\n  protected createProofOfFunds(accountAddress: string, newOrderRequest: NewOrderRequest): ProofOfFunds[] {\n    const authToken = this.authorizationManager.getAuthToken(accountAddress);\n    if (!authToken)\n      throw new Error(`Cannot find auth token for address: ${accountAddress}`);\n\n    const _currency: Currency['id'] = ordersHelper.isOrderPreview(newOrderRequest.orderBody)\n      ? newOrderRequest.orderBody.from.currencyId\n      : symbolsHelper.convertSymbolAndSideToFromAndToCurrencies(newOrderRequest.orderBody.symbol, newOrderRequest.orderBody.side)[0];\n\n    return [\n      // {\n      //   address: accountAddress,\n      //   currency,\n      //   timeStamp: authToken.request.timeStamp,\n      //   message: authToken.request.message,\n      //   publicKey: authToken.request.publicKey,\n      //   signature: authToken.request.signature,\n      //   algorithm: authToken.request.algorithm\n      // }\n    ];\n  }\n\n  protected getCachedOrderBook(symbol: string): Promise<OrderBook | undefined> {\n    const cachedOrderBook = this.orderBookProvider.getOrderBook(symbol);\n\n    return cachedOrderBook ? Promise.resolve(cachedOrderBook) : this.getOrderBook(symbol);\n  }\n}\n", "export enum DataSource {\n  Local = 1 << 0,\n  Remote = 1 << 1,\n\n  All = Local | Remote\n}\n", "export enum ImportantDataReceivingMode {\n  Local = 0,\n  Remote = 1,\n  SafeMerged = 2\n}\n", "export interface PublicEventEmitter<T extends readonly unknown[]> {\n    addListener(listener: (...args: T) => void): this;\n    removeListener(listener: (...args: T) => void): this;\n    removeAllListeners(): this;\n}\n\nexport class EventEmitter<T extends readonly unknown[]> implements PublicEventEmitter<T> {\n    private listeners: Set<(...args: T) => void> = new Set();\n\n    addListener(listener: (...args: T) => void) {\n        this.listeners.add(listener);\n        return this;\n    }\n\n    removeListener(listener: (...args: T) => void) {\n        if (this.listeners.has(listener))\n            this.listeners.delete(listener);\n        return this;\n    }\n\n    removeAllListeners() {\n        this.listeners = new Set();\n        return this;\n    }\n\n    emit(...args: T) {\n        if (!this.listeners.size)\n            return;\n\n        if (this.listeners.size === 1) {\n            this.listeners.values().next().value(...args);\n        } else {\n            // We copy listeners to prevent an unbounded loop if there is the adding of a new event handler inside the handler; \n            [...this.listeners].forEach(listener => listener(...args));\n        }\n    }\n}\n\nexport type ToEventEmitter<T> = T extends PublicEventEmitter<infer TArgs> ? EventEmitter<TArgs> : never;\nexport type ToEventEmitters<T> = T extends Record<infer K, PublicEventEmitter<infer TArgs>> ? Record<K, EventEmitter<TArgs>> : never;\n", "import { EventEmitter, PublicEventEmitter } from './eventEmitter';\n\nexport class DeferredEventEmitter<K, T extends readonly unknown[]> implements PublicEventEmitter<T> {\n  private readonly watcherIdsMap: Map<K, ReturnType<typeof setTimeout>> = new Map();\n  private readonly internalEmitter = new EventEmitter<T>();\n\n  constructor(\n    private readonly latencyMs: number = 1000\n  ) { }\n\n  addListener(listener: (...args: T) => void) {\n    this.internalEmitter.addListener(listener);\n    return this;\n  }\n\n  removeListener(listener: (...args: T) => void) {\n    this.internalEmitter.removeListener(listener);\n    return this;\n  }\n\n  removeAllListeners() {\n    this.internalEmitter.removeAllListeners();\n    return this;\n  }\n\n  emit(key: K, ...args: T) {\n    const oldWatcherId = this.watcherIdsMap.get(key);\n    if (oldWatcherId)\n      clearTimeout(oldWatcherId);\n\n    const watcherId = setTimeout(() => {\n      this.watcherIdsMap.delete(key);\n      this.internalEmitter.emit(...args);\n    }, this.latencyMs);\n\n    this.watcherIdsMap.set(key, watcherId);\n  }\n}\n\nexport type ToDeferredEventEmitter<K, T> = T extends PublicEventEmitter<infer TArgs> ? DeferredEventEmitter<K, TArgs> : never;\nexport type ToDeferredEventEmitters<K, T> = T extends Record<infer P, PublicEventEmitter<infer TArgs>> ? Record<P, DeferredEventEmitter<K, TArgs>> : never;\n", "type QueryParams = { [key: string]: string | number | boolean | null | undefined };\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Payload = { [key: string]: any };\n\nexport interface RequestOptions {\n  urlPath: string;\n  method?: 'GET' | 'POST' | 'DELETE'\n  authToken?: string;\n  params?: QueryParams;\n  payload?: Payload;\n}\n\nexport class HttpClient {\n  constructor(\n    protected readonly baseUrl: string\n  ) { }\n\n  async request<T>(options: RequestOptions): Promise<T | undefined>;\n  async request<T>(options: RequestOptions, returnUndefinedOn404: true): Promise<T | undefined>;\n  async request<T>(options: RequestOptions, returnUndefinedOn404: false): Promise<T>;\n  async request<T>(options: RequestOptions, returnUndefinedOn404 = true): Promise<T | undefined> {\n    const url = new URL(options.urlPath, this.baseUrl);\n\n    if (options.params)\n      this.setSearchParams(url, options.params);\n\n    const response = await fetch(url.toString(), {\n      headers: this.createHeaders(options),\n      method: options.method || 'GET',\n      body: options.payload ? JSON.stringify(options.payload) : undefined\n    });\n\n    if (returnUndefinedOn404 && response.status === 404)\n      return undefined;\n\n    if (!response.ok) {\n      const errorBody = await response.text();\n      throw Error(errorBody);\n    }\n\n    return await response.json();\n  }\n\n  private setSearchParams(url: URL, params: RequestOptions['params']) {\n    for (const key in params) {\n      const value = params[key];\n      if (value !== null && value !== undefined)\n        url.searchParams.set(key, String(value));\n    }\n  }\n\n  private createHeaders(options: RequestOptions): { [key: string]: string } {\n    const headers: { [key: string]: string } = {};\n    if (options.authToken)\n      headers['Authorization'] = `Bearer ${options.authToken}`;\n\n    if (options.method === 'POST' && options.payload)\n      headers['Content-Type'] = 'application/json';\n\n    return headers;\n  }\n}\n", "import type { Cache, SetCacheOptions } from './cache';\n\ninterface CacheEntry {\n  value: unknown;\n  watcherId: ReturnType<typeof setTimeout>;\n  options: SetCacheOptions;\n}\n\nexport class InMemoryCache<K = string> implements Cache<K> {\n  private static readonly defaultCacheOptions: SetCacheOptions = {\n    absoluteExpirationMs: 1000 * 60 * 30,\n  };\n\n  private readonly cacheMap: Map<K, CacheEntry> = new Map();\n\n  constructor(\n    private readonly defaultCacheOptions: SetCacheOptions = InMemoryCache.defaultCacheOptions\n  ) { }\n\n  get<T = unknown>(key: K): T | undefined {\n    const entry = this.cacheMap.get(key);\n    if (!entry)\n      return undefined;\n\n    const isSlidingExpiration = this.getTimeoutAndIsSlidingExpiration(entry.options)[1];\n    if (isSlidingExpiration)\n      this.set(key, entry.value, entry.options);\n\n    return entry.value as T | undefined;\n  }\n\n  set(key: K, value: unknown, options = this.defaultCacheOptions): void {\n    this.delete(key);\n\n    const [timeout] = this.getTimeoutAndIsSlidingExpiration(options);\n    const watcherId = setTimeout(() => {\n      this.cacheMap.delete(key);\n    }, timeout);\n\n    const entry: CacheEntry = { value, watcherId, options };\n    this.cacheMap.set(key, entry);\n  }\n\n  delete(key: K): void {\n    const oldEntry = this.cacheMap.get(key);\n    if (!oldEntry)\n      return;\n\n    clearTimeout(oldEntry.watcherId);\n    this.cacheMap.delete(key);\n  }\n\n  clear(): void {\n    const keys = [...this.cacheMap.keys()];\n    keys.forEach(key => this.delete(key));\n  }\n\n  async dispose(): Promise<void> {\n    this.clear();\n  }\n\n  private getTimeoutAndIsSlidingExpiration(options: SetCacheOptions): [timeout: number, isSlidingExpiration: boolean] {\n    return options.slidingExpirationMs !== undefined\n      ? [options.slidingExpirationMs, true]\n      : [options.absoluteExpirationMs, false];\n  }\n}\n", "import type { ExchangeSymbol } from '../models/exchangeSymbol';\nimport type { ManagedExchangeSymbolsProvider } from './exchangeSymbolsProvider';\n\nexport class InMemoryExchangeSymbolsProvider implements ManagedExchangeSymbolsProvider {\n  private symbolsMap: Map<ExchangeSymbol['name'], ExchangeSymbol> = new Map();\n  private symbolsCollectionCache: readonly ExchangeSymbol[] = [];\n\n  getSymbol(name: string): ExchangeSymbol | undefined {\n    return this.symbolsMap.get(name);\n  }\n\n  getSymbols(): readonly ExchangeSymbol[] {\n    return this.symbolsCollectionCache;\n  }\n\n  getSymbolsMap(): ReadonlyMap<ExchangeSymbol['name'], ExchangeSymbol> {\n    return this.symbolsMap;\n  }\n\n  setSymbols(exchangeSymbols: readonly ExchangeSymbol[]): void {\n    this.symbolsCollectionCache = exchangeSymbols;\n    this.symbolsMap = this.mapSymbolsCollectionToMap(exchangeSymbols);\n  }\n\n  protected mapSymbolsCollectionToMap(symbolsCollection: readonly ExchangeSymbol[]): Map<ExchangeSymbol['name'], ExchangeSymbol> {\n    const symbolsMap: Map<ExchangeSymbol['name'], ExchangeSymbol> = new Map();\n\n    for (const symbol of symbolsCollection)\n      symbolsMap.set(symbol.name, symbol);\n\n    return symbolsMap;\n  }\n}\n", "import type { OrderBook } from '../models';\nimport type { ManagedOrderBookProvider } from './orderBookProvider';\n\nexport class InMemoryOrderBookProvider implements ManagedOrderBookProvider {\n  private readonly orderBookMap: Map<OrderBook['symbol'], OrderBook> = new Map();\n\n  getOrderBook(symbol: string): OrderBook | undefined {\n    return this.orderBookMap.get(symbol);\n  }\n\n  setOrderBook(symbol: string, orderBook: OrderBook): void {\n    this.orderBookMap.set(symbol, orderBook);\n  }\n}\n", "import BigNumber from 'bignumber.js';\n\nimport { CurrenciesProvider, Currency, DataSource } from '../../../common';\nimport { Cache, InMemoryCache } from '../../../core/index';\nimport type { PriceProvider } from '../../priceProvider/index';\nimport type { GetAveragePriceParameters, GetPriceParameters, PriceManager } from '../priceManager';\n\ninterface GetCacheKeyParameters {\n  isAverage: boolean;\n  baseCurrencyOrSymbol: Currency | Currency['id'];\n  quoteCurrencyOrSymbol: Currency | Currency['id'];\n  provider?: string;\n}\n\nexport class MixedPriceManager implements PriceManager {\n  private readonly cache: Cache = new InMemoryCache({ absoluteExpirationMs: 1000 * 30 });\n\n  constructor(\n    private readonly currenciesProvider: CurrenciesProvider,\n    private readonly providersMap: Map<string, PriceProvider>\n  ) { }\n\n  async getAveragePrice({ baseCurrency, quoteCurrency, dataSource = DataSource.All }: GetAveragePriceParameters): Promise<BigNumber | undefined> {\n    const baseCurrencyOrSymbol = this.tryFindCurrency(baseCurrency);\n    const quoteCurrencyOrSymbol = this.tryFindCurrency(quoteCurrency);\n\n    const key = this.getCacheKey({ isAverage: true, baseCurrencyOrSymbol, quoteCurrencyOrSymbol });\n    if ((dataSource & DataSource.Local) === DataSource.Local) {\n      const cachedAveragePrice = this.cache.get<BigNumber>(key);\n      if (cachedAveragePrice)\n        return cachedAveragePrice;\n    }\n\n    if ((dataSource & DataSource.Remote) === DataSource.Remote) {\n      const providers = this.getAvailableProviders();\n      const pricePromises = providers.map(provider => this.getPrice({\n        baseCurrency: baseCurrencyOrSymbol,\n        quoteCurrency: quoteCurrencyOrSymbol,\n        provider,\n        dataSource\n      }));\n      const pricePromiseResults = await Promise.allSettled(pricePromises);\n\n      const prices: BigNumber[] = [];\n      for (const result of pricePromiseResults)\n        if (result.status === 'fulfilled' && result.value !== undefined)\n          prices.push(result.value);\n\n      if (prices.length) {\n        const averagePrice = BigNumber.sum(...prices).div(prices.length);\n        this.cache.set(key, averagePrice);\n        return averagePrice;\n      }\n    }\n\n    return undefined;\n  }\n\n  async getPrice({ baseCurrency, quoteCurrency, provider, dataSource = DataSource.All }: GetPriceParameters): Promise<BigNumber | undefined> {\n    const baseCurrencyOrSymbol = this.tryFindCurrency(baseCurrency);\n    const quoteCurrencyOrSymbol = this.tryFindCurrency(quoteCurrency);\n\n    const key = this.getCacheKey({ isAverage: false, baseCurrencyOrSymbol, quoteCurrencyOrSymbol, provider });\n    if ((dataSource & DataSource.Local) === DataSource.Local) {\n      const cachedPrice = this.cache.get<BigNumber>(key);\n      if (cachedPrice)\n        return cachedPrice;\n    }\n\n    if ((dataSource & DataSource.Remote) === DataSource.Remote) {\n      let price = await this.getPriceCore(baseCurrencyOrSymbol, quoteCurrencyOrSymbol, provider);\n      if (!price) {\n        const reversedPrice = await this.getPriceCore(quoteCurrencyOrSymbol, baseCurrencyOrSymbol, provider);\n        if (reversedPrice)\n          price = reversedPrice.pow(-1);\n      }\n\n      if (price) {\n        this.cache.set(key, price);\n        return price;\n      }\n    }\n\n    return undefined;\n  }\n\n  getAvailableProviders(): string[] {\n    return [...this.providersMap.keys()];\n  }\n\n  async dispose(): Promise<void> {\n    this.cache.clear();\n  }\n\n  private tryFindCurrency(baseCurrency: Currency | Currency['id'] | string): Currency | string {\n    if (typeof baseCurrency !== 'string')\n      return baseCurrency;\n\n    return this.currenciesProvider.getCurrency(baseCurrency) || baseCurrency;\n  }\n\n  private getCacheKey({ isAverage, baseCurrencyOrSymbol, quoteCurrencyOrSymbol, provider }: GetCacheKeyParameters) {\n    const prefix = isAverage ? 'average' : 'actual';\n    const baseCurrencySymbol = typeof baseCurrencyOrSymbol === 'string' ? baseCurrencyOrSymbol : baseCurrencyOrSymbol.id;\n    const quoteCurrencySymbol = typeof quoteCurrencyOrSymbol === 'string' ? quoteCurrencyOrSymbol : quoteCurrencyOrSymbol.id;\n    const postfix = provider ? provider : '';\n\n    return `${prefix}_${baseCurrencySymbol}_${quoteCurrencySymbol}_${postfix}`;\n  }\n\n  private async getPriceCore(baseCurrencyOrSymbol: Currency | string, quoteCurrencyOrSymbol: Currency | string, provider?: string): Promise<BigNumber | undefined> {\n    const providers = this.getSelectedProviders(provider);\n    const pricePromises = providers.map(provider => provider.getPrice(baseCurrencyOrSymbol, quoteCurrencyOrSymbol));\n    const pricePromiseResults = await Promise.allSettled(pricePromises);\n\n    for (const result of pricePromiseResults)\n      if (result.status === 'fulfilled' && result.value !== undefined)\n        return result.value;\n\n    return undefined;\n  }\n\n  private getSelectedProviders(provider?: string): PriceProvider[] {\n    if (!provider)\n      return [...this.providersMap.values()];\n\n    const selectedProvider = this.providersMap.get(provider);\n    if (!selectedProvider)\n      throw new Error(`Provider not found for key: ${provider}`);\n\n    return [selectedProvider];\n  }\n}\n", "import type BigNumber from 'bignumber.js';\n\nimport type { Currency } from '../../../common/index';\nimport type { ExchangeService } from '../../exchangeService';\nimport type { Quote } from '../../models/index';\nimport type { PriceProvider } from '../priceProvider';\n\nexport class AtomexPriceProvider implements PriceProvider {\n  constructor(\n    private readonly exchangeService: ExchangeService\n  ) { }\n\n  async getPrice(baseCurrencyOrSymbol: Currency | string, quoteCurrencyOrSymbol: Currency | string): Promise<BigNumber | undefined> {\n    const baseCurrency = this.getSymbol(baseCurrencyOrSymbol);\n    const quoteCurrency = this.getSymbol(quoteCurrencyOrSymbol);\n    const pairSymbol = `${baseCurrency}/${quoteCurrency}`;\n\n    const quote = (await this.exchangeService.getTopOfBook([{ from: baseCurrency, to: quoteCurrency }]))?.[0];\n\n    return quote && quote.symbol === pairSymbol ? this.getMiddlePrice(quote) : undefined;\n  }\n\n  private getSymbol(currencyOrSymbol: Currency | string): string {\n    return typeof currencyOrSymbol === 'string' ? currencyOrSymbol : currencyOrSymbol.id;\n  }\n\n  private getMiddlePrice(quote: Quote): BigNumber {\n    return quote.ask.plus(quote.bid).div(2);\n  }\n}\n", "import BigNumber from 'bignumber.js';\n\nimport type { Currency } from '../../../common';\nimport { HttpClient } from '../../../core';\nimport type { PriceProvider } from '../priceProvider';\nimport type { BinanceErrorDto, BinanceRatesDto } from './dtos';\nimport { isErrorDto } from './utils';\n\nexport class BinancePriceProvider implements PriceProvider {\n  private static readonly baseUrl = 'https://www.binance.com';\n  private static readonly priceUrlPath = '/api/v3/ticker/price';\n\n  private readonly httpClient: HttpClient;\n  private _allSymbols: Set<string> | undefined;\n\n  constructor() {\n    this.httpClient = new HttpClient(BinancePriceProvider.baseUrl);\n  }\n\n  async getPrice(baseCurrencyOrSymbol: Currency | string, quoteCurrencyOrSymbol: Currency | string): Promise<BigNumber | undefined> {\n    const baseCurrency = this.getSymbol(baseCurrencyOrSymbol);\n    const quoteCurrency = this.getSymbol(quoteCurrencyOrSymbol);\n\n    const pairSymbol = `${baseCurrency}${quoteCurrency}`;\n    const allSymbols = await this.getAllSymbols();\n    if (!allSymbols.has(pairSymbol))\n      return undefined;\n\n    const urlPath = `${BinancePriceProvider.priceUrlPath}?symbol=${pairSymbol}`;\n    const responseDto = await this.httpClient.request<BinanceRatesDto | BinanceErrorDto>({ urlPath }, false);\n\n    return this.mapRatesDtoToPrice(responseDto);\n  }\n\n  private getSymbol(currencyOrSymbol: Currency | string): string {\n    const symbol = typeof currencyOrSymbol === 'string' ? currencyOrSymbol : currencyOrSymbol.symbol;\n\n    return symbol.toUpperCase();\n  }\n\n  private mapRatesDtoToPrice(dto: BinanceRatesDto | BinanceErrorDto): BigNumber | undefined {\n    if (isErrorDto(dto))\n      return undefined;\n\n    return new BigNumber(dto.price);\n  }\n\n  private async getAllSymbols(): Promise<Set<string>> {\n    if (!this._allSymbols)\n      this._allSymbols = new Set(await this.requestAllSymbols());\n\n    return this._allSymbols;\n  }\n\n  private async requestAllSymbols(): Promise<string[]> {\n    const urlPath = BinancePriceProvider.priceUrlPath;\n    const responseDto = await this.httpClient.request<BinanceRatesDto[]>({ urlPath }, false);\n\n    return responseDto.map(dto => dto.symbol);\n  }\n}\n", "import type { BinanceErrorDto } from './dtos';\n\nexport const isErrorDto = (dto: unknown): dto is BinanceErrorDto => {\n  const errorDto = dto as BinanceErrorDto;\n  return typeof errorDto.code === 'number' && typeof errorDto.msg === 'string';\n};\n", "import BigNumber from 'bignumber.js';\n\nimport type { Currency } from '../../../common';\nimport { HttpClient } from '../../../core';\nimport type { PriceProvider } from '../priceProvider';\nimport type { KrakenRatesDto } from './dtos';\n\nexport class KrakenPriceProvider implements PriceProvider {\n  private static readonly baseUrl = 'https://api.kraken.com';\n\n  private readonly httpClient: HttpClient;\n\n  constructor() {\n    this.httpClient = new HttpClient(KrakenPriceProvider.baseUrl);\n  }\n\n  async getPrice(baseCurrencyOrSymbol: Currency | string, quoteCurrencyOrSymbol: Currency | string): Promise<BigNumber | undefined> {\n    const baseCurrency = this.getSymbol(baseCurrencyOrSymbol);\n    const quoteCurrency = this.getSymbol(quoteCurrencyOrSymbol);\n\n    const pairSymbol = `${baseCurrency}${quoteCurrency}`;\n    const urlPath = `/0/public/Ticker?pair=${pairSymbol}`;\n    const responseDto = await this.httpClient.request<KrakenRatesDto>({ urlPath }, false);\n\n    return this.mapRatesDtoToPrice(responseDto);\n  }\n\n  private getSymbol(currencyOrSymbol: Currency | string): string {\n    const symbol = typeof currencyOrSymbol === 'string' ? currencyOrSymbol : currencyOrSymbol.symbol;\n\n    return symbol.toUpperCase();\n  }\n\n  private mapRatesDtoToPrice(dto: KrakenRatesDto): BigNumber | undefined {\n    if (dto.error.length)\n      return undefined;\n\n    const symbol = Object.keys(dto.result)[0];\n    const tickerInfo = symbol ? dto.result[symbol] : undefined;\n    if (!tickerInfo)\n      return undefined;\n\n    return new BigNumber(tickerInfo.c[0]);\n  }\n}\n", "import BigNumber from 'bignumber.js';\n\nimport type { AtomexProtocolMultiChain, CurrencyInfo, FeesInfo } from '../blockchain/index';\nimport type { Currency, Disposable } from '../common/index';\nimport { Mutable, Cache, InMemoryCache } from '../core/index';\nimport { ExchangeSymbolsProvider, ordersHelper, symbolsHelper, type NormalizedOrderPreviewParameters, type OrderPreview } from '../exchange/index';\nimport type { Swap } from '../swaps/index';\nimport { converters } from '../utils/index';\nimport type { AtomexContext } from './atomexContext';\nimport type { NormalizedSwapPreviewParameters, SwapPreview, SwapPreviewFee, SwapPreviewParameters } from './models/index';\n\ninterface UserInvolvedSwapsInfo {\n  readonly swaps: readonly Swap[];\n  readonly fromCurrencyId: string;\n  readonly fromTotalAmount: BigNumber;\n}\n\nexport class AtomexSwapPreviewManager implements Disposable {\n  private readonly swapPreviewFeesCache: Cache = new InMemoryCache({ absoluteExpirationMs: 20 * 1000 });\n  private readonly userInvolvedSwapsCache: Cache = new InMemoryCache({ slidingExpirationMs: 30 * 1000 });\n\n  constructor(protected readonly atomexContext: AtomexContext) {\n  }\n\n  async getSwapPreview(swapPreviewParameters: SwapPreviewParameters | NormalizedSwapPreviewParameters): Promise<SwapPreview> {\n    const normalizedSwapPreviewParameters = this.normalizeSwapPreviewParametersIfNeeded(swapPreviewParameters);\n    const fromCurrencyInfo = this.atomexContext.providers.blockchainProvider.getCurrencyInfo(normalizedSwapPreviewParameters.from);\n    if (!fromCurrencyInfo)\n      throw new Error(`The \"${normalizedSwapPreviewParameters.from}\" currency (from) is unknown`);\n    const toCurrencyInfo = this.atomexContext.providers.blockchainProvider.getCurrencyInfo(normalizedSwapPreviewParameters.to);\n    if (!toCurrencyInfo)\n      throw new Error(`The \"${normalizedSwapPreviewParameters.to}\" currency (to) is unknown`);\n    const fromNativeCurrencyInfo = this.atomexContext.providers.blockchainProvider.getNativeCurrencyInfo(fromCurrencyInfo.currency.blockchain);\n    if (!fromNativeCurrencyInfo)\n      throw new Error(`The \"${fromCurrencyInfo.currency.id}\" currency is a currency of unknown blockchain: ${fromCurrencyInfo.currency.blockchain}`);\n    const toNativeCurrencyInfo = this.atomexContext.providers.blockchainProvider.getNativeCurrencyInfo(toCurrencyInfo.currency.blockchain);\n    if (!toNativeCurrencyInfo)\n      throw new Error(`The \"${toCurrencyInfo.currency.id}\" currency is a currency of unknown blockchain: ${toCurrencyInfo.currency.blockchain}`);\n\n    const availableLiquidity = await this.atomexContext.managers.exchangeManager.getAvailableLiquidity({\n      type: normalizedSwapPreviewParameters.type,\n      symbol: normalizedSwapPreviewParameters.exchangeSymbol.name,\n      side: normalizedSwapPreviewParameters.side\n    });\n    if (!availableLiquidity)\n      throw new Error(`No available liquidity for the \"${normalizedSwapPreviewParameters.exchangeSymbol.name}\" symbol`);\n\n    const errors: Mutable<SwapPreview['errors']> = [];\n    const warnings: Mutable<SwapPreview['warnings']> = [];\n\n    const actualOrderPreview = await this.atomexContext.managers.exchangeManager.getOrderPreview(normalizedSwapPreviewParameters);\n    const fees = await this.calculateSwapPreviewFees(\n      fromCurrencyInfo,\n      fromNativeCurrencyInfo,\n      toCurrencyInfo,\n      toNativeCurrencyInfo,\n      normalizedSwapPreviewParameters.useWatchTower\n    );\n\n    const swapPreviewAccountData = await this.getSwapPreviewAccountData(\n      normalizedSwapPreviewParameters,\n      fromCurrencyInfo,\n      fromNativeCurrencyInfo,\n      toCurrencyInfo,\n      toNativeCurrencyInfo,\n      availableLiquidity.from.amount,\n      fees,\n      errors,\n      warnings\n    );\n\n    if (!actualOrderPreview)\n      errors.push({ id: 'not-enough-liquidity' });\n    else if (swapPreviewAccountData.maxOrderPreview && actualOrderPreview.from.amount.isGreaterThan(swapPreviewAccountData.maxOrderPreview.from.amount))\n      errors.push({ id: 'not-enough-funds' });\n\n    return {\n      type: normalizedSwapPreviewParameters.type,\n      from: {\n        currencyId: normalizedSwapPreviewParameters.from,\n        address: swapPreviewAccountData.fromAddress,\n        actual: actualOrderPreview\n          ? {\n            amount: actualOrderPreview.from.amount,\n            price: actualOrderPreview.from.price,\n          }\n          : {\n            amount: normalizedSwapPreviewParameters.isFromAmount ? normalizedSwapPreviewParameters.amount : new BigNumber(0),\n            price: new BigNumber(0)\n          },\n        available: {\n          amount: availableLiquidity.from.amount,\n          price: availableLiquidity.from.price\n        },\n        max: swapPreviewAccountData.maxOrderPreview && {\n          amount: swapPreviewAccountData.maxOrderPreview.from.amount,\n          price: swapPreviewAccountData.maxOrderPreview.from.price\n        }\n      },\n      to: {\n        currencyId: normalizedSwapPreviewParameters.to,\n        address: swapPreviewAccountData.toAddress,\n        actual: actualOrderPreview\n          ? {\n            amount: actualOrderPreview.to.amount,\n            price: actualOrderPreview.to.price,\n          }\n          : {\n            amount: !normalizedSwapPreviewParameters.isFromAmount ? normalizedSwapPreviewParameters.amount : new BigNumber(0),\n            price: new BigNumber(0)\n          },\n        available: {\n          amount: availableLiquidity.to.amount,\n          price: availableLiquidity.to.price\n        },\n        max: swapPreviewAccountData.maxOrderPreview && {\n          amount: swapPreviewAccountData.maxOrderPreview.to.amount,\n          price: swapPreviewAccountData.maxOrderPreview.to.price\n        }\n      },\n      symbol: normalizedSwapPreviewParameters.exchangeSymbol.name,\n      side: normalizedSwapPreviewParameters.side,\n      fees,\n      errors,\n      warnings\n    };\n  }\n\n  // TODO: Temporarily. Remove this method when we add local swap tracking\n  clearCache() {\n    this.swapPreviewFeesCache.clear();\n    this.userInvolvedSwapsCache.clear();\n  }\n\n  async dispose(): Promise<void> {\n    this.clearCache();\n  }\n\n  protected normalizeSwapPreviewParametersIfNeeded(swapPreviewParameters: SwapPreviewParameters | NormalizedSwapPreviewParameters): NormalizedSwapPreviewParameters {\n    return AtomexSwapPreviewManager.isNormalizedSwapPreviewParameters(swapPreviewParameters)\n      ? swapPreviewParameters\n      : AtomexSwapPreviewManager.normalizeSwapPreviewParameters(swapPreviewParameters, this.atomexContext.providers.exchangeSymbolsProvider, true);\n  }\n\n  protected async getSwapPreviewAccountData(\n    normalizedSwapPreviewParameters: NormalizedOrderPreviewParameters,\n    fromCurrencyInfo: CurrencyInfo,\n    fromNativeCurrencyInfo: CurrencyInfo,\n    toCurrencyInfo: CurrencyInfo,\n    toNativeCurrencyInfo: CurrencyInfo,\n    fromAvailableAmount: BigNumber,\n    swapPreviewFees: SwapPreview['fees'],\n    errors: Mutable<SwapPreview['errors']>,\n    warnings: Mutable<SwapPreview['warnings']>\n  ): Promise<{ fromAddress?: string; toAddress?: string; maxOrderPreview?: OrderPreview }> {\n    let fromAddress: string | undefined;\n    let toAddress: string | undefined;\n    let maxOrderPreview: OrderPreview | undefined;\n\n    const maxFromNativeCurrencyFee = AtomexSwapPreviewManager.calculateMaxTotalFee(swapPreviewFees, fromNativeCurrencyInfo.currency.id);\n    const maxToNativeCurrencyFee = AtomexSwapPreviewManager.calculateMaxTotalFee(swapPreviewFees, toNativeCurrencyInfo.currency.id);\n\n    const [fromWallet, toWallet] = await Promise.all([\n      this.atomexContext.managers.walletsManager.getWallet(undefined, fromCurrencyInfo.currency.blockchain),\n      this.atomexContext.managers.walletsManager.getWallet(undefined, toCurrencyInfo.currency.blockchain),\n    ]);\n\n    if (fromWallet) {\n      fromAddress = await fromWallet.getAddress();\n      const [fromCurrencyBalance, fromNativeCurrencyBalance] = await Promise.all([\n        this.atomexContext.managers.balanceManager.getBalance(fromAddress, fromCurrencyInfo.currency),\n        this.atomexContext.managers.balanceManager.getBalance(fromAddress, fromNativeCurrencyInfo.currency)\n      ]);\n\n      if (!fromCurrencyBalance || !fromNativeCurrencyBalance)\n        throw new Error('Can not get from currency balances');\n\n      if (fromNativeCurrencyBalance.isLessThan(maxFromNativeCurrencyFee)) {\n        errors.push({\n          id: 'not-enough-funds-network-fee',\n          data: { requiredAmount: maxFromNativeCurrencyFee }\n        });\n      }\n\n      maxOrderPreview = await this.getMaxOrderPreview(\n        normalizedSwapPreviewParameters,\n        fromAddress,\n        fromAvailableAmount,\n        fromCurrencyBalance,\n        fromCurrencyInfo,\n        fromNativeCurrencyBalance,\n        fromNativeCurrencyInfo,\n        maxFromNativeCurrencyFee,\n        errors,\n        warnings\n      );\n    }\n\n    if (toWallet) {\n      toAddress = await toWallet.getAddress();\n      const toNativeCurrencyBalance = await this.atomexContext.managers.balanceManager.getBalance(toAddress, toNativeCurrencyInfo.currency);\n      if (!toNativeCurrencyBalance)\n        throw new Error('Can not get to currency balance');\n\n      if (toNativeCurrencyBalance.isLessThan(maxToNativeCurrencyFee))\n        errors.push({\n          id: 'not-enough-funds-network-fee',\n          data: { requiredAmount: maxToNativeCurrencyFee }\n        });\n    }\n\n    return {\n      fromAddress,\n      toAddress,\n      maxOrderPreview\n    };\n  }\n\n  protected async getMaxOrderPreview(\n    normalizedSwapPreviewParameters: NormalizedOrderPreviewParameters,\n    fromAddress: string,\n    fromAvailableAmount: BigNumber,\n    fromCurrencyBalance: BigNumber,\n    fromCurrencyInfo: CurrencyInfo,\n    _fromNativeCurrencyBalance: BigNumber,\n    fromNativeCurrencyInfo: CurrencyInfo,\n    fromNativeCurrencyNetworkFee: BigNumber,\n    _errors: Mutable<SwapPreview['errors']>,\n    _warnings: Mutable<SwapPreview['warnings']>\n  ): Promise<OrderPreview | undefined> {\n    const userInvolvedSwapsInfo = await this.getUserInvolvedSwapsInfo(fromAddress, fromCurrencyInfo.currency.id);\n    let maxAmount = fromCurrencyInfo.currency.id === fromNativeCurrencyInfo.currency.id\n      ? fromCurrencyBalance.minus(fromNativeCurrencyNetworkFee)\n      : fromCurrencyBalance;\n    maxAmount = maxAmount.minus(userInvolvedSwapsInfo.fromTotalAmount);\n    if (maxAmount.isLessThanOrEqualTo(0))\n      return undefined;\n\n    maxAmount = BigNumber.min(maxAmount, fromAvailableAmount);\n\n    return this.atomexContext.managers.exchangeManager.getOrderPreview({\n      type: normalizedSwapPreviewParameters.type,\n      from: normalizedSwapPreviewParameters.from,\n      to: normalizedSwapPreviewParameters.to,\n      amount: maxAmount,\n      isFromAmount: true,\n    });\n  }\n\n  protected async getUserInvolvedSwapsInfo(userAddress: string, fromCurrencyId: Currency['id']): Promise<UserInvolvedSwapsInfo> {\n    const cacheKey = this.getUserInvolvedSwapsCacheKey(userAddress, fromCurrencyId);\n    let swapsInfo = this.userInvolvedSwapsCache.get<UserInvolvedSwapsInfo>(cacheKey);\n    if (swapsInfo)\n      return swapsInfo;\n\n    const swaps = (await this.atomexContext.managers.swapManager.getSwaps(userAddress))\n      .filter(swap => swap.user.status === 'Involved' && swap.from.currencyId === fromCurrencyId);\n    const fromTotalAmount = swaps.reduce(\n      (total, swap) => total.plus(swap.from.amount),\n      new BigNumber(0)\n    );\n\n    swapsInfo = { fromCurrencyId, swaps, fromTotalAmount };\n    this.userInvolvedSwapsCache.set(cacheKey, swapsInfo);\n\n    return swapsInfo;\n  }\n\n  protected async calculateSwapPreviewFees(\n    fromCurrencyInfo: CurrencyInfo,\n    fromNativeCurrencyInfo: CurrencyInfo,\n    toCurrencyInfo: CurrencyInfo,\n    toNativeCurrencyInfo: CurrencyInfo,\n    useWatchTower: boolean\n  ): Promise<SwapPreview['fees']> {\n    const feesCacheKey = this.getSwapPreviewFeesCacheKey(fromCurrencyInfo, toCurrencyInfo, useWatchTower);\n    const cachedFees = this.swapPreviewFeesCache.get<SwapPreview['fees']>(feesCacheKey);\n    if (cachedFees)\n      return cachedFees;\n\n    const fromAtomexProtocol = (fromCurrencyInfo.atomexProtocol as AtomexProtocolMultiChain);\n    const toAtomexProtocol = (toCurrencyInfo.atomexProtocol as AtomexProtocolMultiChain);\n\n    const toRedeemFees = await toAtomexProtocol.getRedeemFees({});\n    const [fromInitiateFees, toRedeemOrRewardForRedeem, fromRefundFees, toInitiateFees, fromRedeemFees] = await Promise.all([\n      // TODO: fill parameters\n      fromAtomexProtocol.getInitiateFees({}),\n      useWatchTower ? toAtomexProtocol.getRedeemReward(toRedeemFees) : toRedeemFees,\n      fromAtomexProtocol.getRefundFees({}),\n\n      toAtomexProtocol.getInitiateFees({}),\n      fromAtomexProtocol.getRedeemFees({}),\n    ]);\n\n    const paymentFee: SwapPreviewFee = {\n      name: 'payment-fee',\n      currencyId: fromNativeCurrencyInfo.currency.id,\n      estimated: fromInitiateFees.estimated,\n      max: fromInitiateFees.max,\n    };\n    const makerFee = await this.calculateMakerFees(\n      fromCurrencyInfo.currency,\n      fromNativeCurrencyInfo.currency,\n      toNativeCurrencyInfo.currency,\n      toInitiateFees,\n      fromRedeemFees\n    );\n\n    const swapPreviewFees: SwapPreview['fees'] = {\n      success: [\n        paymentFee,\n        makerFee,\n        {\n          name: useWatchTower ? 'redeem-reward' : 'redeem-fee',\n          currencyId: useWatchTower ? toCurrencyInfo.currency.id : toNativeCurrencyInfo.currency.id,\n          estimated: toRedeemOrRewardForRedeem.estimated,\n          max: toRedeemOrRewardForRedeem.max\n        }\n      ],\n      refund: [\n        paymentFee,\n        makerFee,\n        {\n          name: 'refund-fee',\n          currencyId: fromNativeCurrencyInfo.currency.id,\n          estimated: fromRefundFees.estimated,\n          max: fromRefundFees.max\n        }\n      ]\n    };\n    this.swapPreviewFeesCache.set(feesCacheKey, swapPreviewFees);\n\n    return swapPreviewFees;\n  }\n\n  protected async calculateMakerFees(\n    fromCurrency: Currency,\n    fromNativeCurrency: Currency,\n    toNativeCurrency: Currency,\n    toInitiateFees: FeesInfo,\n    fromRedeemFees: FeesInfo\n  ): Promise<SwapPreviewFee> {\n    const toInitiateFeeConversationPromise = this.convertFeesFromNativeCurrencyToCustom(toInitiateFees, toNativeCurrency, fromCurrency);\n    const fromRedeemFeeConversationPromise = fromCurrency !== fromNativeCurrency\n      ? this.convertFeesFromNativeCurrencyToCustom(fromRedeemFees, fromNativeCurrency, fromCurrency)\n      : undefined;\n\n    let estimatedToInitiateFeesInFromCurrency: BigNumber;\n    let maxToInitiateFeesInFromCurrency: BigNumber;\n    let estimatedFromRedeemFeesInFromCurrency: BigNumber;\n    let maxFromRedeemFeesInFromCurrency: BigNumber;\n    if (fromRedeemFeeConversationPromise) {\n      const conversationResult = await Promise.all([toInitiateFeeConversationPromise, fromRedeemFeeConversationPromise]);\n      estimatedToInitiateFeesInFromCurrency = conversationResult[0].estimated;\n      maxToInitiateFeesInFromCurrency = conversationResult[0].max;\n      estimatedFromRedeemFeesInFromCurrency = conversationResult[1].estimated;\n      maxFromRedeemFeesInFromCurrency = conversationResult[1].max;\n    }\n    else {\n      const conversationResult = await toInitiateFeeConversationPromise;\n      estimatedToInitiateFeesInFromCurrency = conversationResult.estimated;\n      maxToInitiateFeesInFromCurrency = conversationResult.max;\n      estimatedFromRedeemFeesInFromCurrency = fromRedeemFees.estimated;\n      maxFromRedeemFeesInFromCurrency = fromRedeemFees.max;\n    }\n\n    return {\n      name: 'maker-fee',\n      currencyId: fromCurrency.id,\n      estimated: estimatedToInitiateFeesInFromCurrency.plus(estimatedFromRedeemFeesInFromCurrency),\n      max: maxToInitiateFeesInFromCurrency.plus(maxFromRedeemFeesInFromCurrency)\n    };\n  }\n\n  protected async convertFeesFromNativeCurrencyToCustom(fees: FeesInfo, nativeCurrency: Currency, customCurrency: Currency): Promise<FeesInfo> {\n    const price = await this.atomexContext.managers.priceManager.getPrice({ baseCurrency: nativeCurrency, quoteCurrency: customCurrency, provider: 'atomex' });\n    if (!price)\n      throw new Error(`It's no possible to convert fees from \"${nativeCurrency.id}\" to \"${customCurrency.id}\" currency`);\n\n    const [exchangeSymbol, _] = symbolsHelper.convertFromAndToCurrenciesToSymbolAndSide(\n      this.atomexContext.providers.exchangeSymbolsProvider.getSymbolsMap(),\n      nativeCurrency.id,\n      customCurrency.id\n    );\n    const customCurrencyDecimals = exchangeSymbol.baseCurrency === customCurrency.id ? exchangeSymbol.decimals.baseCurrency : exchangeSymbol.decimals.quoteCurrency;\n    const estimatedInCustomCurrency = converters.toFixedBigNumber(fees.estimated.multipliedBy(price), customCurrencyDecimals, BigNumber.ROUND_CEIL);\n    const maxInCustomCurrency = converters.toFixedBigNumber(fees.max.multipliedBy(price), customCurrencyDecimals, BigNumber.ROUND_CEIL);\n\n    return {\n      estimated: estimatedInCustomCurrency,\n      max: maxInCustomCurrency\n    };\n  }\n\n  private getSwapPreviewFeesCacheKey(\n    fromCurrencyInfo: CurrencyInfo,\n    toCurrencyInfo: CurrencyInfo,\n    useWatchTower: boolean\n  ) {\n    return `${fromCurrencyInfo.currency.id}_${toCurrencyInfo.currency.id}_${useWatchTower}`;\n  }\n\n  private getUserInvolvedSwapsCacheKey(\n    userAddress: string,\n    fromCurrencyId: Currency['id']\n  ) {\n    return `${userAddress}_${fromCurrencyId}`;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static isNormalizedSwapPreviewParameters(swapPreviewParameters: any): swapPreviewParameters is NormalizedSwapPreviewParameters {\n    return ordersHelper.isNormalizedOrderPreviewParameters(swapPreviewParameters);\n  }\n\n  static normalizeSwapPreviewParameters(\n    swapPreviewParameters: SwapPreviewParameters,\n    exchangeSymbolsProvider: ExchangeSymbolsProvider,\n    defaultUseWatchTowerParameter: boolean\n  ): NormalizedSwapPreviewParameters {\n    const normalizedOrderPreviewParameters = ordersHelper.normalizeOrderPreviewParameters(swapPreviewParameters, exchangeSymbolsProvider);\n\n    return {\n      type: swapPreviewParameters.type,\n      amount: swapPreviewParameters.amount,\n      useWatchTower: typeof swapPreviewParameters.useWatchTower !== 'boolean' ? defaultUseWatchTowerParameter : swapPreviewParameters.useWatchTower,\n      from: normalizedOrderPreviewParameters.from,\n      to: normalizedOrderPreviewParameters.to,\n      isFromAmount: normalizedOrderPreviewParameters.isFromAmount,\n      exchangeSymbol: normalizedOrderPreviewParameters.exchangeSymbol,\n      side: normalizedOrderPreviewParameters.side,\n      isBaseCurrencyAmount: normalizedOrderPreviewParameters.isBaseCurrencyAmount,\n    };\n  }\n\n  protected static calculateMaxTotalFee(fees: SwapPreview['fees'], currencyId: Currency['id']) {\n    const successTotalFee = this.calculateTotalFee(fees.success, currencyId);\n    const refundTotalFee = this.calculateTotalFee(fees.refund, currencyId);\n\n    return BigNumber.max(successTotalFee, refundTotalFee);\n  }\n\n  protected static calculateTotalFee(fees: readonly SwapPreviewFee[], currencyId: Currency['id']) {\n    return fees.reduce(\n      (total, fee) => fee.currencyId === currencyId && fee.name.endsWith('fee') ? total.plus(fee.max) : total,\n      new BigNumber(0)\n    );\n  }\n}\n", "import type { AuthorizationManager } from '../authorization/index';\nimport type { BalanceManager } from '../blockchain/balanceManager';\nimport type { WalletsManager, AtomexBlockchainProvider } from '../blockchain/index';\nimport type { AtomexNetwork, CurrenciesProvider } from '../common/index';\nimport type { ExchangeManager, ExchangeService, ManagedExchangeSymbolsProvider, ManagedOrderBookProvider, PriceManager } from '../exchange/index';\nimport type { SwapManager, SwapService } from '../swaps/index';\n\nexport interface AtomexContext {\n  readonly id: number;\n  readonly atomexNetwork: AtomexNetwork;\n\n  readonly managers: AtomexContextManagersSection;\n  readonly services: AtomexContextServicesSection;\n  readonly providers: AtomexContextProvidersSection;\n}\n\nexport interface AtomexContextManagersSection {\n  get walletsManager(): WalletsManager;\n  get authorizationManager(): AuthorizationManager;\n  get exchangeManager(): ExchangeManager;\n  get swapManager(): SwapManager;\n  get priceManager(): PriceManager;\n  get balanceManager(): BalanceManager;\n}\n\nexport interface AtomexContextServicesSection {\n  get exchangeService(): ExchangeService;\n  get swapService(): SwapService;\n}\n\nexport interface AtomexContextProvidersSection {\n  get blockchainProvider(): AtomexBlockchainProvider;\n  get currenciesProvider(): CurrenciesProvider;\n  get exchangeSymbolsProvider(): ManagedExchangeSymbolsProvider;\n  get orderBookProvider(): ManagedOrderBookProvider;\n}\n\nexport class AtomexComponentNotResolvedError extends Error {\n  readonly name: string;\n  readonly componentName: string;\n\n  constructor(componentName: string) {\n    super(AtomexComponentNotResolvedError.getMessage(componentName));\n\n    this.componentName = componentName;\n    this.name = this.constructor.name;\n  }\n\n  private static getMessage(componentName: string) {\n    return `Atomex \"${componentName}\" component has not resolved yet`;\n  }\n}\n", "import type { AuthorizationManager } from '../authorization/index';\nimport type { BalanceManager } from '../blockchain/balanceManager';\nimport type { WalletsManager, AtomexBlockchainProvider } from '../blockchain/index';\nimport type { AtomexNetwork, CurrenciesProvider } from '../common/index';\nimport type { ExchangeManager, ExchangeService, ManagedExchangeSymbolsProvider, ManagedOrderBookProvider, PriceManager } from '../exchange/index';\nimport type { SwapManager, SwapService } from '../swaps/index';\nimport {\n  AtomexComponentNotResolvedError, AtomexContext,\n  AtomexContextManagersSection, AtomexContextProvidersSection, AtomexContextServicesSection\n} from './atomexContext';\n\nexport class DefaultAtomexContext implements AtomexContext {\n  private static idCounter = 0;\n\n  readonly id: number;\n\n  readonly managers: DefaultAtomexContextManagersSection;\n  readonly services: DefaultAtomexContextServicesSection;\n  readonly providers: DefaultAtomexContextProvidersSection;\n\n  constructor(readonly atomexNetwork: AtomexNetwork) {\n    this.id = DefaultAtomexContext.idCounter++;\n\n    this.managers = new DefaultAtomexContextManagersSection(this);\n    this.services = new DefaultAtomexContextServicesSection(this);\n    this.providers = new DefaultAtomexContextProvidersSection(this);\n  }\n}\n\nclass DefaultAtomexContextManagersSection implements AtomexContextManagersSection {\n  private _walletsManager: WalletsManager | undefined;\n  private _authorizationManager: AuthorizationManager | undefined;\n  private _exchangeManager: ExchangeManager | undefined;\n  private _swapManager: SwapManager | undefined;\n  private _priceManager: PriceManager | undefined;\n  private _balanceManager: BalanceManager | undefined;\n\n  constructor(readonly context: DefaultAtomexContext) {\n  }\n\n  get walletsManager(): WalletsManager {\n    if (!this._walletsManager)\n      throw new AtomexComponentNotResolvedError('managers.walletsManager');\n\n    return this._walletsManager;\n  }\n\n  private set walletsManager(walletsManager: WalletsManager) {\n    this._walletsManager = walletsManager;\n  }\n\n  get authorizationManager(): AuthorizationManager {\n    if (!this._authorizationManager)\n      throw new AtomexComponentNotResolvedError('managers.authorizationManager');\n\n    return this._authorizationManager;\n  }\n\n  private set authorizationManager(authorizationManager: AuthorizationManager) {\n    this._authorizationManager = authorizationManager;\n  }\n\n  get exchangeManager(): ExchangeManager {\n    if (!this._exchangeManager)\n      throw new AtomexComponentNotResolvedError('managers.exchangeManager');\n\n    return this._exchangeManager;\n  }\n\n  private set exchangeManager(exchangeManager: ExchangeManager) {\n    this._exchangeManager = exchangeManager;\n  }\n\n  get swapManager(): SwapManager {\n    if (!this._swapManager)\n      throw new AtomexComponentNotResolvedError('managers.swapManager');\n\n    return this._swapManager;\n  }\n\n  private set swapManager(swapManager: SwapManager) {\n    this._swapManager = swapManager;\n  }\n\n  get priceManager(): PriceManager {\n    if (!this._priceManager)\n      throw new AtomexComponentNotResolvedError('managers.priceManager');\n\n    return this._priceManager;\n  }\n\n  private set priceManager(priceManager: PriceManager) {\n    this._priceManager = priceManager;\n  }\n\n  get balanceManager(): BalanceManager {\n    if (!this._balanceManager)\n      throw new AtomexComponentNotResolvedError('managers.balanceManager');\n\n    return this._balanceManager;\n  }\n\n  private set balanceManager(balanceManager: BalanceManager) {\n    this._balanceManager = balanceManager;\n  }\n}\n\nclass DefaultAtomexContextServicesSection implements AtomexContextServicesSection {\n  private _exchangeService: ExchangeService | undefined;\n  private _swapService: SwapService | undefined;\n\n  constructor(readonly context: DefaultAtomexContext) {\n  }\n\n  get exchangeService(): ExchangeService {\n    if (!this._exchangeService)\n      throw new AtomexComponentNotResolvedError('services.exchangeService');\n\n    return this._exchangeService;\n  }\n\n  private set exchangeService(exchangeService: ExchangeService) {\n    this._exchangeService = exchangeService;\n  }\n\n  get swapService(): SwapService {\n    if (!this._swapService)\n      throw new AtomexComponentNotResolvedError('services.swapService');\n\n    return this._swapService;\n  }\n\n  private set swapService(swapService: SwapService) {\n    this._swapService = swapService;\n  }\n}\n\nclass DefaultAtomexContextProvidersSection implements AtomexContextProvidersSection {\n  private _blockchainProvider: AtomexBlockchainProvider | undefined;\n  private _currenciesProvider: CurrenciesProvider | undefined;\n  private _exchangeSymbolsProvider: ManagedExchangeSymbolsProvider | undefined;\n  private _orderBookProvider: ManagedOrderBookProvider | undefined;\n\n  constructor(readonly context: DefaultAtomexContext) {\n  }\n\n  get blockchainProvider(): AtomexBlockchainProvider {\n    if (!this._blockchainProvider)\n      throw new AtomexComponentNotResolvedError('providers.blockchainProvider');\n\n    return this._blockchainProvider;\n  }\n\n  private set blockchainProvider(blockchainProvider: AtomexBlockchainProvider) {\n    this._blockchainProvider = blockchainProvider;\n  }\n\n  get currenciesProvider(): CurrenciesProvider {\n    if (!this._currenciesProvider)\n      throw new AtomexComponentNotResolvedError('providers.currenciesProvider');\n\n    return this._currenciesProvider;\n  }\n\n  private set currenciesProvider(currenciesProvider: CurrenciesProvider) {\n    this._currenciesProvider = currenciesProvider;\n  }\n\n  get exchangeSymbolsProvider(): ManagedExchangeSymbolsProvider {\n    if (!this._exchangeSymbolsProvider)\n      throw new AtomexComponentNotResolvedError('providers.exchangeSymbolsProvider');\n\n    return this._exchangeSymbolsProvider;\n  }\n\n  private set exchangeSymbolsProvider(exchangeSymbolsProvider: ManagedExchangeSymbolsProvider) {\n    this._exchangeSymbolsProvider = exchangeSymbolsProvider;\n  }\n\n  get orderBookProvider(): ManagedOrderBookProvider {\n    if (!this._orderBookProvider)\n      throw new AtomexComponentNotResolvedError('providers.orderBookProvider');\n\n    return this._orderBookProvider;\n  }\n\n  private set orderBookProvider(orderBookProvider: ManagedOrderBookProvider) {\n    this._orderBookProvider = orderBookProvider;\n  }\n}\n", "import type BigNumber from 'bignumber.js';\n\nimport { Currency, DataSource } from '../../common';\nimport { Cache, InMemoryCache } from '../../core/index';\nimport type { AtomexBlockchainProvider } from '../atomexBlockchainProvider';\nimport type { BalanceManager } from './balanceManager';\n\nexport class CachedBalanceManager implements BalanceManager {\n  private static readonly cacheExpirationTime = 1000 * 60 * 1;\n  private readonly cache: Cache;\n\n  constructor(\n    readonly blockchainProvider: AtomexBlockchainProvider\n  ) {\n    this.cache = new InMemoryCache({\n      absoluteExpirationMs: CachedBalanceManager.cacheExpirationTime\n    });\n  }\n\n  async getBalance(address: string, currency: Currency, dataSource = DataSource.All): Promise<BigNumber | undefined> {\n    const key = this.getCacheKey(address, currency);\n    if ((dataSource & DataSource.Local) === DataSource.Local) {\n      const cachedBalance = this.cache.get<BigNumber>(key);\n      if (cachedBalance)\n        return cachedBalance;\n    }\n\n    if ((dataSource & DataSource.Remote) === DataSource.Remote) {\n      const balanceProvider = this.blockchainProvider.getCurrencyInfo(currency.id)?.balanceProvider;\n      if (!balanceProvider)\n        throw new Error(`Balance provider not found for currency: ${currency.id}`);\n\n      const balance = await balanceProvider.getBalance(address);\n      this.cache.set(key, balance);\n\n      return balance;\n    }\n\n    return undefined;\n  }\n\n  dispose(): Promise<void> {\n    return this.cache.dispose();\n  }\n\n  private getCacheKey(address: string, currency: Currency) {\n    return `${address}_${currency.id}`;\n  }\n}\n", "import type { AtomexNetwork } from '../common/index';\nimport { atomexUtils } from '../utils/index';\nimport type { BlockchainWallet } from './blockchainWallet';\n\nexport class WalletsManager {\n  private readonly wallets: Set<BlockchainWallet> = new Set();\n\n  constructor(readonly atomexNetwork: AtomexNetwork) {\n  }\n\n  addWallet(wallet: BlockchainWallet): Promise<BlockchainWallet> {\n    atomexUtils.ensureNetworksAreSame(this, wallet);\n    this.wallets.add(wallet);\n\n    return Promise.resolve(wallet);\n  }\n\n  async removeWallet(wallet: BlockchainWallet): Promise<boolean> {\n    const result = this.wallets.delete(wallet);\n\n    return Promise.resolve(result);\n  }\n\n  async getWallet<Toolkit = unknown>(address?: string, blockchain?: string, toolkit?: string): Promise<BlockchainWallet<Toolkit> | undefined> {\n    if (!this.wallets.size || (!address && !blockchain && !toolkit))\n      return undefined;\n\n    const walletPromises: Array<Promise<readonly [\n      wallet: BlockchainWallet<Toolkit>,\n      address: string | undefined,\n      blockchain: string | undefined\n    ]>> = [];\n\n    for (const wallet of this.wallets as Set<BlockchainWallet<Toolkit>>) {\n      if (toolkit && wallet.id !== toolkit)\n        continue;\n\n      const addressOrPromise = address ? wallet.getAddress() : undefined;\n      const blockchainOrPromise = blockchain ? wallet.getBlockchain() : undefined;\n\n      if ((!address || address === addressOrPromise) && (!blockchain || blockchain == blockchainOrPromise))\n        return wallet;\n\n      walletPromises.push(Promise.all([addressOrPromise, blockchainOrPromise]).then(([address, blockchain]) => [wallet, address, blockchain]));\n    }\n\n    const walletResults = await Promise.allSettled(walletPromises);\n    for (const walletResult of walletResults) {\n      if (walletResult.status !== 'fulfilled') {\n        // TODO: warning if status === 'rejected'\n        continue;\n      }\n\n      const [wallet, walletAddress, walletBlockchain] = walletResult.value;\n      if ((!address || address === walletAddress) && (!blockchain || blockchain == walletBlockchain))\n        return wallet;\n    }\n\n    return undefined;\n  }\n}\n", "import type { Currency } from '../../common';\nimport type { PriceManager } from '../../exchange';\nimport type { AtomexBlockchainProvider } from '../atomexBlockchainProvider';\nimport type { FeesInfo } from '../models/index';\n\nexport const getRedeemRewardInNativeCurrency = async (\n  currencyOrId: Currency | Currency['id'],\n  redeemFee: FeesInfo,\n  priceManager: PriceManager\n): Promise<FeesInfo> => {\n  const nativeTokenPriceInUsd = await priceManager.getAveragePrice({ baseCurrency: currencyOrId, quoteCurrency: 'USD' });\n  if (!nativeTokenPriceInUsd)\n    throw new Error(`Price for ${currencyOrId} in USD not found`);\n\n  const maxRewardPercentValue = 30;\n  const maxRewardPercent = 0.15;\n  const maxRewardForRedeemDeviation = 0.05;\n\n  const redeemFeeInUsd = redeemFee.estimated.multipliedBy(nativeTokenPriceInUsd);\n  const k = maxRewardPercentValue / Math.log((1 - maxRewardPercent) / maxRewardForRedeemDeviation);\n  const p = (1 - maxRewardPercent) / Math.exp(redeemFeeInUsd.toNumber() / k) + maxRewardPercent;\n\n  const rewardForRedeem = redeemFee.estimated.multipliedBy(1 + p);\n  const result: FeesInfo = { estimated: rewardForRedeem, max: rewardForRedeem };\n\n  return result;\n};\n\nexport const getRedeemRewardInToken = async (\n  currencyOrId: Currency | Currency['id'],\n  redeemFee: FeesInfo,\n  priceManager: PriceManager,\n  blockchainProvider: AtomexBlockchainProvider\n): Promise<FeesInfo> => {\n  const currency = typeof currencyOrId === 'string' ? blockchainProvider.getCurrency(currencyOrId) : currencyOrId;\n  if (!currency)\n    throw new Error(`Currency info not found for ${currencyOrId}`);\n\n  const nativeCurrency = blockchainProvider.getNativeCurrencyInfo(currency.blockchain)?.currency;\n  if (!nativeCurrency)\n    throw new Error(`Native currency not found fir ${currency.blockchain}`);\n\n  const nativeTokenPriceInCurrency = await priceManager.getAveragePrice({ baseCurrency: nativeCurrency, quoteCurrency: currencyOrId });\n\n  if (!nativeTokenPriceInCurrency)\n    throw new Error(`Price for ${nativeCurrency.id} in ${currencyOrId} not found`);\n\n  const inNativeToken = await getRedeemRewardInNativeCurrency(nativeCurrency.id, redeemFee, priceManager);\n\n  return {\n    estimated: inNativeToken.estimated.multipliedBy(nativeTokenPriceInCurrency),\n    max: inNativeToken.max.multipliedBy(nativeTokenPriceInCurrency)\n  };\n};\n", "import type { BigNumber } from 'bignumber.js';\n\nimport type { Currency } from '../../common/index';\nimport type { CurrencyBalanceProvider } from './currencyBalanceProvider';\n\nexport class ControlledCurrencyBalancesProvider implements CurrencyBalanceProvider {\n  constructor(\n    readonly currency: Currency,\n    protected readonly getBalanceImplementation: (address: string) => Promise<BigNumber>\n  ) { }\n\n  getBalance(address: string): Promise<BigNumber> {\n    return this.getBalanceImplementation(address);\n  }\n}\n", "import type { AtomexBlockchainNetworkOptions } from '../atomex/models/atomexOptions';\nimport type { CurrenciesProvider, Currency } from '../common/index';\nimport type { AtomexProtocol } from './atomexProtocol';\nimport { ControlledCurrencyBalancesProvider, CurrencyBalanceProvider, BalancesProvider } from './balanceProvider/index';\nimport type { BlockchainToolkitProvider } from './blockchainToolkitProvider';\nimport type { SwapTransactionsProvider } from './swapTransactionProvider';\n\nexport interface CurrencyInfo {\n  currency: Currency;\n  atomexProtocol: AtomexProtocol;\n  blockchainToolkitProvider: BlockchainToolkitProvider;\n  balanceProvider: CurrencyBalanceProvider;\n  swapTransactionsProvider: SwapTransactionsProvider;\n}\n\nexport class AtomexBlockchainProvider implements CurrenciesProvider {\n  protected readonly currencyInfoMap: Map<Currency['id'], CurrencyInfo> = new Map();\n  protected readonly networkOptionsMap: Map<string, AtomexBlockchainNetworkOptions> = new Map();\n  protected readonly blockchainToolkitProviders: Set<BlockchainToolkitProvider> = new Set();\n\n  addBlockchain(blockchain: string, networkOptions: AtomexBlockchainNetworkOptions) {\n    if (this.networkOptionsMap.has(blockchain))\n      throw new Error('There is already blockchain added with the same key');\n\n    this.networkOptionsMap.set(blockchain, networkOptions);\n    this.blockchainToolkitProviders.add(networkOptions.blockchainToolkitProvider);\n\n    for (const currency of networkOptions.currencies) {\n      if (this.currencyInfoMap.has(currency.id))\n        throw new Error('There is already currency added with the same key');\n\n      const currencyOptions = networkOptions.currencyOptions[currency.id];\n      const atomexProtocol = currencyOptions?.atomexProtocol;\n      if (!atomexProtocol)\n        throw new Error(`Atomex protocol is not defined for the \"${currency.id}\" currency`);\n\n      const options: CurrencyInfo = {\n        currency,\n        atomexProtocol,\n        blockchainToolkitProvider: networkOptions.blockchainToolkitProvider,\n        balanceProvider: currencyOptions?.currencyBalanceProvider ?? this.createControlledBalancesProvider(currency, networkOptions.balancesProvider),\n        swapTransactionsProvider: currencyOptions?.swapTransactionsProvider ?? networkOptions.swapTransactionsProvider,\n      };\n      this.currencyInfoMap.set(currency.id, options);\n    }\n  }\n\n  getNetworkOptions(blockchain: string): AtomexBlockchainNetworkOptions | undefined {\n    return this.networkOptionsMap.get(blockchain);\n  }\n\n  async getReadonlyToolkit<Toolkit = unknown>(toolkitId: string, blockchain?: string): Promise<Toolkit | undefined> {\n    const providerToolkitPromises: Array<Promise<unknown | undefined>> = [];\n    for (const provider of this.blockchainToolkitProviders) {\n      if (provider.toolkitId === toolkitId)\n        providerToolkitPromises.push(provider.getReadonlyToolkit(blockchain));\n    }\n\n    const providerToolkitResults = await Promise.all(providerToolkitPromises);\n    for (const providerResult of providerToolkitResults) {\n      if (providerResult)\n        return providerResult as Toolkit;\n    }\n\n    return Promise.resolve(undefined);\n  }\n\n  getCurrency(currencyId: Currency['id']): Currency | undefined {\n    return this.getCurrencyInfo(currencyId)?.currency;\n  }\n\n  getNativeCurrencyInfo(blockchain: string): CurrencyInfo | undefined {\n    for (const currencyInfo of this.currencyInfoMap) {\n      if (currencyInfo[1].currency.type === 'native' && currencyInfo[1].currency.blockchain === blockchain)\n        return currencyInfo[1];\n    }\n  }\n\n  getCurrencyInfo(currencyId: Currency['id']): CurrencyInfo | undefined {\n    const options = this.currencyInfoMap.get(currencyId);\n\n    return options;\n  }\n\n  protected createControlledBalancesProvider(currency: Currency, balancesProvider: BalancesProvider): ControlledCurrencyBalancesProvider {\n    return new ControlledCurrencyBalancesProvider(\n      currency,\n      (address: string) => balancesProvider.getBalance(address, currency)\n    );\n  }\n}\n", "import BigNumber from 'bignumber.js';\nimport type Web3 from 'web3';\n\nimport type { AtomexProtocolMultiChainBase } from '../../blockchain/atomexProtocolMultiChain';\nimport type {\n  AtomexBlockchainProvider,\n  AtomexProtocolMultiChainInitiateParameters,\n  AtomexProtocolMultiChainRedeemParameters, AtomexProtocolMultiChainRefundParameters,\n  BlockchainWallet, FeesInfo, Transaction, WalletsManager\n} from '../../blockchain/index';\nimport type { AtomexNetwork } from '../../common/index';\nimport type { DeepReadonly } from '../../core/index';\nimport type { PriceManager } from '../../exchange';\nimport { web3Helper } from '../helpers';\nimport type { Web3AtomexProtocolMultiChainOptions } from '../models/index';\n\nexport abstract class Web3AtomexProtocolMultiChain implements AtomexProtocolMultiChainBase {\n  protected static maxNetworkFeeMultiplier = new BigNumber(1.2);\n\n  abstract readonly type: string;\n\n  constructor(\n    protected readonly blockchain: string,\n    readonly atomexNetwork: AtomexNetwork,\n    protected readonly atomexProtocolOptions: DeepReadonly<Web3AtomexProtocolMultiChainOptions>,\n    protected readonly atomexBlockchainProvider: AtomexBlockchainProvider,\n    protected readonly walletsManager: WalletsManager,\n    protected readonly priceManager: PriceManager\n  ) {\n  }\n\n  get currencyId() {\n    return this.atomexProtocolOptions.currencyId;\n  }\n\n  get swapContractAddress() {\n    return this.atomexProtocolOptions.swapContractAddress;\n  }\n\n  abstract initiate(params: AtomexProtocolMultiChainInitiateParameters): Promise<Transaction>;\n\n  async getInitiateFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    const toolkit = await this.getReadonlyWeb3();\n    const gasPriceInWei = await web3Helper.getGasPriceInWei(toolkit);\n    const gasLimitOptions = this.atomexProtocolOptions.initiateOperation.gasLimit;\n    const hasRewardForRedeem = params.rewardForRedeem?.isGreaterThan(0);\n    const gasLimit = new BigNumber(hasRewardForRedeem ? gasLimitOptions.withReward : gasLimitOptions.withoutReward);\n\n    const estimatedWei = gasPriceInWei.multipliedBy(gasLimit).multipliedBy(Web3AtomexProtocolMultiChain.maxNetworkFeeMultiplier);\n    const estimated = web3Helper.convertFromWei(toolkit, estimatedWei, 'ether');\n    const result: FeesInfo = { estimated, max: estimated };\n\n    return Promise.resolve(result);\n  }\n\n  abstract redeem(params: AtomexProtocolMultiChainRedeemParameters): Promise<Transaction>;\n\n  abstract getRedeemReward(redeemFee: FeesInfo): Promise<FeesInfo>;\n\n  async getRedeemFees(_params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    const toolkit = await this.getReadonlyWeb3();\n    const gasPriceInWei = await web3Helper.getGasPriceInWei(toolkit);\n    const gasLimit = this.atomexProtocolOptions.redeemOperation.gasLimit;\n\n    const estimatedWei = gasPriceInWei.multipliedBy(gasLimit).multipliedBy(Web3AtomexProtocolMultiChain.maxNetworkFeeMultiplier);\n    const estimated = web3Helper.convertFromWei(toolkit, estimatedWei, 'ether');\n    const result: FeesInfo = { estimated, max: estimated };\n\n    return Promise.resolve(result);\n  }\n\n  abstract refund(params: AtomexProtocolMultiChainRefundParameters): Promise<Transaction>;\n\n  async getRefundFees(_params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    const toolkit = await this.getReadonlyWeb3();\n    const gasPriceInWei = await web3Helper.getGasPriceInWei(toolkit);\n    const gasLimit = this.atomexProtocolOptions.refundOperation.gasLimit;\n\n    const estimatedWei = gasPriceInWei.multipliedBy(gasLimit).multipliedBy(Web3AtomexProtocolMultiChain.maxNetworkFeeMultiplier);\n    const estimated = web3Helper.convertFromWei(toolkit, estimatedWei, 'ether');\n    const result: FeesInfo = { estimated, max: estimated };\n\n    return Promise.resolve(result);\n  }\n\n  protected async getReadonlyWeb3(): Promise<Web3> {\n    const toolkit = await this.atomexBlockchainProvider.getReadonlyToolkit<Web3>('web3', this.blockchain);\n    if (!toolkit)\n      throw new Error('Web3 toolkit not found');\n\n    return toolkit;\n  }\n\n  protected async getWallet(address?: string): Promise<BlockchainWallet<Web3>> {\n    const web3Wallet = await this.walletsManager.getWallet<Web3>(address, this.blockchain, 'web3');\n    if (!web3Wallet)\n      throw new Error(`${this.blockchain} Web3 wallet not found`);\n\n    return web3Wallet;\n  }\n}\n", "import BigNumber from 'bignumber.js';\nimport type Web3 from 'web3';\nimport type { Unit } from 'web3-utils';\n\nexport const getGasPriceInWei = async (toolkit: Web3): Promise<BigNumber> => {\n  const gasPrice = await toolkit.eth.getGasPrice();\n\n  return new BigNumber(gasPrice);\n};\n\nexport const convertFromWei = (toolkit: Web3, value: BigNumber | string, unit: Unit): BigNumber => {\n  const stringValue = typeof value === 'string' ? value : value.toString(10);\n  const result = toolkit.utils.fromWei(stringValue, unit);\n\n  return new BigNumber(result);\n};\n", "import Web3 from 'web3';\n\nimport type { Atomex } from '../../atomex/index';\nimport type { AtomexSignature, BlockchainWallet } from '../../blockchain/index';\nimport type { AtomexNetwork } from '../../common/index';\nimport { recoverPublicKey } from '../../ethereum/utils/index';\n\nexport class Web3BlockchainWallet implements BlockchainWallet<Web3> {\n  static readonly signingAlgorithm = 'Keccak256WithEcdsa:Geth2940';\n\n  readonly id = 'web3';\n  readonly toolkit: Web3;\n\n  constructor(\n    readonly atomexNetwork: AtomexNetwork,\n    readonly provider: Web3['currentProvider']\n  ) {\n    this.toolkit = new Web3(provider);\n  }\n\n  async getBlockchain(): Promise<string> {\n    const chainId = await this.toolkit.eth.getChainId();\n    switch (chainId) {\n      case 1:\n      case 5:\n        return 'ethereum';\n\n      case 56:\n      case 97:\n        return 'binance';\n    }\n\n    return '';\n  }\n\n  async getAddress(): Promise<string> {\n    const accounts = await this.toolkit.eth.getAccounts();\n    const address = accounts[0];\n    if (!address)\n      throw new Error('Address is unavailable');\n\n    return address;\n  }\n\n  getPublicKey() {\n    return undefined;\n  }\n\n  async sign(message: string): Promise<AtomexSignature> {\n    const address = await this.getAddress();\n\n    const signatureBytes = await this.signInternal(message, address);\n    const publicKeyBytes = recoverPublicKey(signatureBytes, this.toolkit.eth.accounts.hashMessage(message));\n\n    return {\n      address,\n      publicKeyBytes: publicKeyBytes.startsWith('0x') ? publicKeyBytes.substring(2) : publicKeyBytes,\n      signatureBytes: signatureBytes.substring(signatureBytes.startsWith('0x') ? 2 : 0, signatureBytes.length - 2),\n      algorithm: Web3BlockchainWallet.signingAlgorithm\n    };\n  }\n\n  protected signInternal(message: string, address: string) {\n    return new Promise<string>((resolve, reject) => this.toolkit.eth.personal.sign(message, address, '', (error, signature) => {\n      return signature ? resolve(signature) : reject(error);\n    }));\n  }\n\n  static async bind(atomex: Atomex, provider: Web3['currentProvider']): Promise<Web3BlockchainWallet> {\n    const wallet = new Web3BlockchainWallet(atomex.atomexNetwork, provider);\n    await atomex.wallets.addWallet(wallet);\n\n    return wallet;\n  }\n}\n", "import { ec as EC } from 'elliptic';\n\nimport { Buffer } from '../../native';\nimport { converters } from '../../utils';\nimport { uint8ArrayToHexString } from '../../utils/converters';\n\nexport { isEthereumCurrency } from './guards';\n\nlet secp256k1Curve: EC | null = null;\nconst getSecp256k1Curve = () => {\n  if (!secp256k1Curve)\n    secp256k1Curve = new EC('secp256k1');\n\n  return secp256k1Curve;\n};\n\nconst splitSignature = (hexSignature: string): { r: string, s: string, v: number, recoveryParameter: number } => {\n  const signatureBytes = converters.hexStringToUint8Array(hexSignature);\n\n  if (signatureBytes.length !== 64 && signatureBytes.length !== 65)\n    throw new Error(`Invalid signature: ${hexSignature}`);\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  let v = signatureBytes.length === 64 ? 27 + (signatureBytes[32]! >> 7) : signatureBytes[64]!;\n  if (v === 0 || v === 1)\n    v += 27;\n\n  const result = {\n    r: uint8ArrayToHexString(signatureBytes.slice(0, 32)),\n    s: uint8ArrayToHexString(signatureBytes.slice(32, 64)),\n    v,\n    recoveryParameter: 1 - (v % 2)\n  };\n\n  return result;\n};\n\nexport const recoverPublicKey = (hexSignature: string, web3MessageHash: string) => {\n  const splittedSignature = splitSignature(hexSignature);\n\n  const messageBuffer = Buffer.from(web3MessageHash.startsWith('0x') ? web3MessageHash.substring(2) : web3MessageHash, 'hex');\n  const ecPublicKey = getSecp256k1Curve().recoverPubKey(\n    messageBuffer,\n    { r: splittedSignature.r, s: splittedSignature.s },\n    splittedSignature.recoveryParameter,\n  );\n\n  return '0x' + ecPublicKey.encode('hex', false);\n};\n", "import type { Currency } from '../../common';\nimport type { EthereumCurrency } from '../models';\n\nexport const isEthereumCurrency = (currency: Currency): currency is EthereumCurrency => {\n  return currency.blockchain === 'ethereum';\n};\n", "import Web3 from 'web3';\n\nimport type { BlockchainToolkitProvider } from '../../blockchain/index';\n\nexport class Web3BlockchainToolkitProvider implements BlockchainToolkitProvider<Web3> {\n  readonly toolkitId = 'web3';\n\n  protected toolkit: Web3 | undefined;\n\n  constructor(\n    protected readonly blockchain: string,\n    protected readonly rpcUrl: string\n  ) { }\n\n  getReadonlyToolkit(blockchain?: string): Promise<Web3 | undefined> {\n    if (blockchain && blockchain !== this.blockchain)\n      return Promise.resolve(undefined);\n\n    if (!this.toolkit)\n      this.toolkit = new Web3(this.rpcUrl);\n\n    return Promise.resolve(this.toolkit);\n  }\n}\n", "import BigNumber from 'bignumber.js';\nimport type Web3 from 'web3';\n\nimport type { AtomexBlockchainProvider, BalancesProvider } from '../../blockchain/index';\nimport type { Currency } from '../../common/index';\nimport type { ERC20EthereumCurrency, NativeEthereumCurrency } from '../../ethereum/models';\nimport { isEthereumCurrency } from '../../ethereum/utils/index';\nimport { numberToTokensAmount } from '../../utils/converters';\nimport { erc20Abi } from '../abi/index';\n\nexport class Web3BalancesProvider implements BalancesProvider {\n  constructor(\n    private readonly blockchainProvider: AtomexBlockchainProvider\n  ) { }\n\n  async getBalance(address: string, currency: Currency): Promise<BigNumber> {\n    if (!isEthereumCurrency(currency))\n      throw new Error('Not ethereum blockchain currency provided');\n\n    const toolkit = await this.blockchainProvider.getReadonlyToolkit<Web3>('web3');\n    if (!toolkit)\n      throw new Error('Readonly web3 toolkit not found');\n\n    switch (currency.type) {\n      case 'native':\n        return await this.getNativeTokenBalance(address, currency, toolkit);\n\n      case 'erc-20':\n        return await this.getTokenBalance(address, currency, toolkit);\n    }\n  }\n\n  private async getNativeTokenBalance(address: string, currency: NativeEthereumCurrency, toolkit: Web3): Promise<BigNumber> {\n    const balance = await toolkit.eth.getBalance(address);\n\n    return numberToTokensAmount(new BigNumber(balance), currency.decimals);\n  }\n\n  private async getTokenBalance(address: string, currency: ERC20EthereumCurrency, toolkit: Web3): Promise<BigNumber> {\n    const contract = new toolkit.eth.Contract(erc20Abi, currency.contractAddress);\n    const balance = await contract.methods.balanceOf(address).call() as string;\n\n    return numberToTokensAmount(new BigNumber(balance), currency.decimals);\n  }\n}\n", "import type { AbiItem } from 'web3-utils';\n\nexport const erc20Abi: AbiItem[] = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n];\n", "import { AtomexProtocolMultiChain, atomexProtocolMultiChainHelper } from '../../blockchain/atomexProtocolMultiChain';\nimport type {\n  AtomexBlockchainProvider,\n  AtomexProtocolMultiChainInitiateParameters,\n  AtomexProtocolMultiChainRedeemParameters,\n  AtomexProtocolMultiChainRefundParameters,\n  FeesInfo, Transaction, WalletsManager\n} from '../../blockchain/index';\nimport type { AtomexNetwork } from '../../common/index';\nimport type { DeepReadonly } from '../../core/index';\nimport { Web3AtomexProtocolMultiChain } from '../../evm/index';\nimport type { PriceManager } from '../../exchange';\nimport type { EthereumWeb3AtomexProtocolMultiChainOptions } from '../models/index';\n\nexport class EthereumWeb3AtomexProtocolMultiChain extends Web3AtomexProtocolMultiChain implements AtomexProtocolMultiChain {\n  readonly type = 'multi-chain';\n\n  constructor(\n    atomexNetwork: AtomexNetwork,\n    protected readonly atomexProtocolOptions: DeepReadonly<EthereumWeb3AtomexProtocolMultiChainOptions>,\n    atomexBlockchainProvider: AtomexBlockchainProvider,\n    walletsManager: WalletsManager,\n    priceManager: PriceManager\n  ) {\n    super('ethereum', atomexNetwork, atomexProtocolOptions, atomexBlockchainProvider, walletsManager, priceManager);\n  }\n\n  initiate(_params: AtomexProtocolMultiChainInitiateParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getInitiateFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getInitiateFees(params);\n  }\n\n  redeem(_params: AtomexProtocolMultiChainRedeemParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getRedeemReward(redeemFee: FeesInfo): Promise<FeesInfo> {\n    return atomexProtocolMultiChainHelper.getRedeemRewardInNativeCurrency(this.currencyId, redeemFee, this.priceManager);\n  }\n\n  getRedeemFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getRedeemFees(params);\n  }\n\n  refund(_params: AtomexProtocolMultiChainRefundParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getRefundFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getRefundFees(params);\n  }\n}\n", "import { AtomexProtocolMultiChainApprovable, atomexProtocolMultiChainHelper } from '../../blockchain/atomexProtocolMultiChain';\nimport type {\n  AtomexBlockchainProvider,\n  AtomexProtocolMultiChainInitiateParameters, AtomexProtocolMultiChainRedeemParameters, AtomexProtocolMultiChainRefundParameters,\n  FeesInfo, Transaction, WalletsManager\n} from '../../blockchain/index';\nimport type { AtomexNetwork } from '../../common/index';\nimport type { DeepReadonly } from '../../core/index';\nimport { Web3AtomexProtocolMultiChain } from '../../evm/index';\nimport type { PriceManager } from '../../exchange';\nimport type { ERC20EthereumWeb3AtomexProtocolMultiChainOptions } from '../models/index';\n\nexport class ERC20EthereumWeb3AtomexProtocolMultiChain extends Web3AtomexProtocolMultiChain implements AtomexProtocolMultiChainApprovable {\n  readonly type = 'multi-chain-approvable';\n\n  constructor(\n    atomexNetwork: AtomexNetwork,\n    protected readonly atomexProtocolOptions: DeepReadonly<ERC20EthereumWeb3AtomexProtocolMultiChainOptions>,\n    atomexBlockchainProvider: AtomexBlockchainProvider,\n    walletsManager: WalletsManager,\n    priceManager: PriceManager\n  ) {\n    super('ethereum', atomexNetwork, atomexProtocolOptions, atomexBlockchainProvider, walletsManager, priceManager);\n  }\n\n  get currencyId() {\n    return this.atomexProtocolOptions.currencyId;\n  }\n\n  approve(_params: AtomexProtocolMultiChainInitiateParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  initiate(_params: AtomexProtocolMultiChainInitiateParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getInitiateFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getInitiateFees(params);\n  }\n\n  redeem(_params: AtomexProtocolMultiChainRedeemParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getRedeemReward(redeemFee: FeesInfo): Promise<FeesInfo> {\n    return atomexProtocolMultiChainHelper.getRedeemRewardInToken(this.currencyId, redeemFee, this.priceManager, this.atomexBlockchainProvider);\n  }\n\n  getRedeemFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getRedeemFees(params);\n  }\n\n  refund(_params: AtomexProtocolMultiChainRefundParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getRefundFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getRefundFees(params);\n  }\n}\n", "import type { SwapTransactionsProvider, Transaction } from '../../blockchain/index';\nimport type { Swap } from '../../index';\n\nexport class EthereumSwapTransactionsProvider implements SwapTransactionsProvider {\n  private _isStarted = false;\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  async start() {\n    if (this.isStarted)\n      return;\n\n    this._isStarted = true;\n  }\n\n  stop(): void {\n    if (!this.isStarted)\n      return;\n\n    this._isStarted = false;\n  }\n\n  getSwapTransactions(_swap: Swap): Promise<readonly Transaction[]> {\n    throw new Error('Method not implemented.');\n  }\n}\n", "import type { EthereumCurrency, NativeEthereumCurrency } from '../models/currency';\n\nconst nativeEthereumCurrency: NativeEthereumCurrency = {\n  id: 'ETH',\n  name: 'Ethereum',\n  symbol: 'ETH',\n  blockchain: 'ethereum',\n  decimals: 18,\n  type: 'native'\n};\n\nexport const ethereumMainnetCurrencies: EthereumCurrency[] = [\n  nativeEthereumCurrency\n];\n\nexport const ethereumTestnetCurrencies: EthereumCurrency[] = [\n  nativeEthereumCurrency\n];\n", "import type { AbiItem } from 'web3-utils';\n\nexport const ethereumWeb3AtomexProtocolMultiChainABI: AbiItem[] = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: '_hashedSecret',\n        type: 'bytes32'\n      }\n    ],\n    name: 'Activated',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: '_hashedSecret',\n        type: 'bytes32'\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: '_sender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Added',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: '_hashedSecret',\n        type: 'bytes32'\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_participant',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: '_initiator',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: '_refundTimestamp',\n        type: 'uint256'\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: '_countdown',\n        type: 'uint256'\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: '_value',\n        type: 'uint256'\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: '_payoff',\n        type: 'uint256'\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: '_active',\n        type: 'bool'\n      }\n    ],\n    name: 'Initiated',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: '_hashedSecret',\n        type: 'bytes32'\n      },\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: '_secret',\n        type: 'bytes32'\n      }\n    ],\n    name: 'Redeemed',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: '_hashedSecret',\n        type: 'bytes32'\n      }\n    ],\n    name: 'Refunded',\n    type: 'event'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32'\n      }\n    ],\n    name: 'swaps',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'hashedSecret',\n        type: 'bytes32'\n      },\n      {\n        internalType: 'address payable',\n        name: 'initiator',\n        type: 'address'\n      },\n      {\n        internalType: 'address payable',\n        name: 'participant',\n        type: 'address'\n      },\n      {\n        internalType: 'uint256',\n        name: 'refundTimestamp',\n        type: 'uint256'\n      },\n      {\n        internalType: 'uint256',\n        name: 'countdown',\n        type: 'uint256'\n      },\n      {\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256'\n      },\n      {\n        internalType: 'uint256',\n        name: 'payoff',\n        type: 'uint256'\n      },\n      {\n        internalType: 'bool',\n        name: 'active',\n        type: 'bool'\n      },\n      {\n        internalType: 'enum Atomex.State',\n        name: 'state',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '_hashedSecret',\n        type: 'bytes32'\n      },\n      {\n        internalType: 'address payable',\n        name: '_participant',\n        type: 'address'\n      },\n      {\n        internalType: 'uint256',\n        name: '_refundTimestamp',\n        type: 'uint256'\n      },\n      {\n        internalType: 'uint256',\n        name: '_payoff',\n        type: 'uint256'\n      }\n    ],\n    name: 'initiate',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '_hashedSecret',\n        type: 'bytes32'\n      }\n    ],\n    name: 'add',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '_hashedSecret',\n        type: 'bytes32'\n      }\n    ],\n    name: 'activate',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '_hashedSecret',\n        type: 'bytes32'\n      },\n      {\n        internalType: 'bytes32',\n        name: '_secret',\n        type: 'bytes32'\n      }\n    ],\n    name: 'redeem',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '_hashedSecret',\n        type: 'bytes32'\n      }\n    ],\n    name: 'refund',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  }\n];\n", "import type { EthereumWeb3AtomexProtocolMultiChainOptions } from '../../models/index';\nimport { ethereumWeb3AtomexProtocolMultiChainABI } from './base';\n\nconst mainnetNativeEthereumWeb3AtomexProtocolMultiChainOptions: EthereumWeb3AtomexProtocolMultiChainOptions = {\n  atomexProtocolVersion: 1,\n  currencyId: 'ETH',\n  swapContractAddress: '0xe9c251cbb4881f9e056e40135e7d3ea9a7d037df',\n  swapContractBlockId: '8168569',\n  initiateOperation: {\n    gasLimit: {\n      withoutReward: 200000,\n      withReward: 210000\n    }\n  },\n  redeemOperation: {\n    gasLimit: 140000\n  },\n  refundOperation: {\n    gasLimit: 90000\n  },\n  defaultGasPriceInGwei: 90,\n  maxGasPriceInGwei: 650,\n  abi: ethereumWeb3AtomexProtocolMultiChainABI\n};\n\nexport const mainnetEthereumWeb3AtomexProtocolMultiChainOptions = {\n  ETH: mainnetNativeEthereumWeb3AtomexProtocolMultiChainOptions\n} as const;\n", "import type { EthereumWeb3AtomexProtocolMultiChainOptions } from '../../models/index';\nimport { mainnetEthereumWeb3AtomexProtocolMultiChainOptions } from './mainnetMultiChainOptions';\n\nconst testnetNativeEthereumWeb3AtomexProtocolMultiChainOptions: EthereumWeb3AtomexProtocolMultiChainOptions = {\n  ...mainnetEthereumWeb3AtomexProtocolMultiChainOptions.ETH,\n  swapContractAddress: '0x512fe6B803bA327DCeFBF2Cec7De333f761B0f2b',\n  swapContractBlockId: '6954501',\n};\n\nexport const testnetEthereumWeb3AtomexProtocolMultiChainOptions = {\n  ETH: testnetNativeEthereumWeb3AtomexProtocolMultiChainOptions\n} as const;\n", "import type { AtomexBlockchainNetworkOptions, AtomexContext, AtomexCurrencyOptions } from '../../atomex/index';\nimport { Web3BlockchainToolkitProvider, Web3BalancesProvider } from '../../evm/index';\nimport { ERC20EthereumWeb3AtomexProtocolMultiChain, EthereumWeb3AtomexProtocolMultiChain } from '../atomexProtocol/index';\nimport type { EthereumCurrency } from '../models';\nimport { EthereumSwapTransactionsProvider } from '../swapTransactionsProviders/index';\nimport { mainnetEthereumWeb3AtomexProtocolMultiChainOptions, testnetEthereumWeb3AtomexProtocolMultiChainOptions } from './atomexProtocol';\nimport { ethereumMainnetCurrencies, ethereumTestnetCurrencies } from './currencies';\n\ntype AtomexProtocolOptions = typeof mainnetEthereumWeb3AtomexProtocolMultiChainOptions | typeof testnetEthereumWeb3AtomexProtocolMultiChainOptions;\n\nconst createAtomexProtocol = (\n  atomexContext: AtomexContext,\n  currency: EthereumCurrency,\n  atomexProtocolOptions: AtomexProtocolOptions[keyof AtomexProtocolOptions]\n) => {\n  switch (currency.type) {\n    case 'native':\n      return new EthereumWeb3AtomexProtocolMultiChain(\n        atomexContext.atomexNetwork,\n        atomexProtocolOptions,\n        atomexContext.providers.blockchainProvider,\n        atomexContext.managers.walletsManager,\n        atomexContext.managers.priceManager\n      );\n    case 'erc-20':\n      return new ERC20EthereumWeb3AtomexProtocolMultiChain(\n        atomexContext.atomexNetwork,\n        atomexProtocolOptions,\n        atomexContext.providers.blockchainProvider,\n        atomexContext.managers.walletsManager,\n        atomexContext.managers.priceManager\n      );\n    default:\n      throw new Error(`Unknown Ethereum currency: ${(currency as EthereumCurrency).id}`);\n  }\n};\n\nconst createCurrencyOptions = (\n  atomexContext: AtomexContext,\n  currencies: EthereumCurrency[],\n  atomexProtocolOptions: AtomexProtocolOptions\n): Record<EthereumCurrency['id'], AtomexCurrencyOptions> => {\n  const result: Record<EthereumCurrency['id'], AtomexCurrencyOptions> = {};\n  const currenciesMap = currencies.reduce<Record<EthereumCurrency['id'], EthereumCurrency>>(\n    (obj, currency) => {\n      obj[currency.id] = currency;\n\n      return obj;\n    },\n    {}\n  );\n\n  for (const options of Object.values(atomexProtocolOptions)) {\n    const currency = currenciesMap[options.currencyId];\n    if (!currency)\n      throw new Error(`The ${options.currencyId} currency not found`);\n\n    result[currency.id] = {\n      atomexProtocol: createAtomexProtocol(atomexContext, currency, options)\n    };\n  }\n\n  return result;\n};\n\nexport const createDefaultEthereumBlockchainOptions = (atomexContext: AtomexContext): AtomexBlockchainNetworkOptions => {\n  const blockchain = 'ethereum';\n  const mainnetRpcUrl = 'https://mainnet.infura.io/v3/df01d4ef450640a2a48d9af4c2078eaf';\n  const testNetRpcUrl = 'https://goerli.infura.io/v3/df01d4ef450640a2a48d9af4c2078eaf';\n\n  const balancesProvider = new Web3BalancesProvider(atomexContext.providers.blockchainProvider);\n  const swapTransactionsProvider = new EthereumSwapTransactionsProvider();\n\n  const ethereumOptions: AtomexBlockchainNetworkOptions = atomexContext.atomexNetwork === 'mainnet'\n    ? {\n      rpcUrl: mainnetRpcUrl,\n      currencies: ethereumMainnetCurrencies,\n      currencyOptions: createCurrencyOptions(atomexContext, ethereumMainnetCurrencies, mainnetEthereumWeb3AtomexProtocolMultiChainOptions),\n      blockchainToolkitProvider: new Web3BlockchainToolkitProvider(blockchain, mainnetRpcUrl),\n      balancesProvider,\n      swapTransactionsProvider,\n    }\n    : {\n      rpcUrl: testNetRpcUrl,\n      currencies: ethereumTestnetCurrencies,\n      currencyOptions: createCurrencyOptions(atomexContext, ethereumTestnetCurrencies, testnetEthereumWeb3AtomexProtocolMultiChainOptions),\n      blockchainToolkitProvider: new Web3BlockchainToolkitProvider(blockchain, testNetRpcUrl),\n      balancesProvider,\n      swapTransactionsProvider,\n    };\n\n  return ethereumOptions;\n};\n", "import { AtomexService, ImportantDataReceivingMode } from '../common/index';\nimport { EventEmitter, ToEventEmitter } from '../core/index';\nimport type { SwapsSelector } from '../exchange/index';\nimport type { Swap } from './models/index';\nimport type { SwapService, SwapServiceEvents } from './swapService';\n\nexport class SwapManager implements AtomexService {\n  readonly events: SwapServiceEvents = {\n    swapUpdated: new EventEmitter()\n  };\n\n  private _isStarted = false;\n\n  constructor(\n    protected readonly swapService: SwapService\n  ) {\n  }\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  async start(): Promise<void> {\n    if (this.isStarted)\n      return;\n\n    this.attachEvents();\n    await this.swapService.start();\n\n    this._isStarted = true;\n  }\n\n  stop(): void {\n    if (!this.isStarted)\n      return;\n\n    this.detachEvents();\n    this.swapService.stop();\n\n    this._isStarted = false;\n  }\n\n  getSwap(swapId: number, accountAddress: string, mode?: ImportantDataReceivingMode): Promise<Swap | undefined>;\n  getSwap(swapId: number, accountAddresses: string[], mode?: ImportantDataReceivingMode): Promise<Swap | undefined>;\n  getSwap(swapId: number, addressOrAddresses: string | string[], _mode = ImportantDataReceivingMode.SafeMerged): Promise<Swap | undefined> {\n    return (this.swapService.getSwap as (swapId: number, addressOrAddresses: string | string[]) => Promise<Swap>)(swapId, addressOrAddresses);\n  }\n\n  getSwaps(accountAddress: string, selector?: SwapsSelector, mode?: ImportantDataReceivingMode): Promise<Swap[]>;\n  getSwaps(accountAddresses: string[], selector?: SwapsSelector, mode?: ImportantDataReceivingMode): Promise<Swap[]>;\n  getSwaps(addressOrAddresses: string | string[], selector?: SwapsSelector, _mode = ImportantDataReceivingMode.SafeMerged): Promise<Swap[]> {\n    return (this.swapService.getSwaps as (addressOrAddresses: string | string[], selector?: SwapsSelector) => Promise<Swap[]>)(addressOrAddresses, selector);\n  }\n\n  protected attachEvents() {\n    this.swapService.events.swapUpdated.addListener(this.handleSwapServiceSwapUpdated);\n  }\n\n  protected detachEvents() {\n    this.swapService.events.swapUpdated.removeListener(this.handleSwapServiceSwapUpdated);\n  }\n\n  protected handleSwapServiceSwapUpdated = (updatedSwap: Swap) => {\n    (this.events.swapUpdated as ToEventEmitter<typeof this.events.swapUpdated>).emit(updatedSwap);\n  };\n}\n", "import { SigningType } from '@airgap/beacon-sdk';\nimport type { BeaconWallet } from '@taquito/beacon-wallet';\nimport { TezosToolkit } from '@taquito/taquito';\n\nimport type { AtomexSignature, BlockchainWallet } from '../../blockchain/index';\nimport type { AtomexNetwork } from '../../common/index';\nimport { TezosAtomexSigningDataType } from '../models/index';\nimport { decodePublicKey, signingUtils } from '../utils/index';\nimport { decodeSignature } from '../utils/signing';\n\nexport class BeaconWalletTezosWallet implements BlockchainWallet<TezosToolkit> {\n  readonly id = 'taquito';\n  readonly toolkit: TezosToolkit;\n\n  constructor(\n    readonly atomexNetwork: AtomexNetwork,\n    readonly beaconWallet: BeaconWallet,\n    rpcUrl: string\n  ) {\n    this.toolkit = new TezosToolkit(rpcUrl);\n    this.toolkit.setWalletProvider(beaconWallet);\n  }\n\n  getBlockchain(): string | Promise<string> {\n    return 'tezos';\n  }\n\n  getAddress(): Promise<string> {\n    return this.beaconWallet.getPKH();\n  }\n\n  async getPublicKey(): Promise<string | undefined> {\n    return (await this.beaconWallet.client.getActiveAccount())?.publicKey;\n  }\n\n  async sign(message: string): Promise<AtomexSignature> {\n    const [address, publicKey, signature] = await Promise.all([\n      this.getAddress(),\n      this.getPublicKey(),\n      this.beaconWallet.client.requestSignPayload({\n        payload: signingUtils.getWalletMichelineSigningData(message),\n        signingType: SigningType.MICHELINE,\n      })\n    ]);\n\n    if (!publicKey)\n      throw new Error('BeaconWallet: public key is unavailable');\n\n    const algorithm = signingUtils.getTezosSigningAlgorithm(publicKey);\n    const publicKeyBytes = decodePublicKey(publicKey);\n    const signatureBytes = decodeSignature(signature.signature);\n\n    return {\n      address,\n      algorithm,\n      publicKeyBytes,\n      signatureBytes,\n      signingDataType: TezosAtomexSigningDataType.WalletMicheline\n    };\n  }\n}\n", "import { b58cdecode, prefix, validatePkAndExtractPrefix } from '@taquito/utils';\nimport BigNumber from 'bignumber.js';\n\nimport { Buffer } from '../../native';\nexport { isTezosCurrency } from './guards';\n\nexport const mutezInTez = new BigNumber(1_000_000);\n\nexport const decodePublicKey = (publicKey: string) => {\n  const keyPrefix = validatePkAndExtractPrefix(publicKey);\n  const decodedKeyBytes = b58cdecode(publicKey, prefix[keyPrefix]);\n\n  return Buffer.from(decodedKeyBytes).toString('hex');\n};\nexport * as signingUtils from './signing';\n", "import type { Currency } from '../../common';\nimport type { TezosCurrency } from '../models';\n\nexport const isTezosCurrency = (currency: Currency): currency is TezosCurrency => {\n  return currency.blockchain === 'tezos';\n};   \n", "import { b58cdecode, prefix, Prefix } from '@taquito/utils';\n\nimport { converters, textUtils } from '../../utils/index';\nimport type { SigPrefix } from '../models/index';\n\n// 'Tezos Signed Message: '\nconst tezosSignedMessagePrefixBytes = '54657a6f73205369676e6564204d6573736167653a20';\nconst getMichelineSigningData = (message: string, prefixBytes?: string) => {\n  const messageBytes = converters.stringToHexString(message);\n  const signedMessageBytes = prefixBytes ? (prefixBytes + messageBytes) : messageBytes;\n  const messageLength = textUtils.padStart((signedMessageBytes.length / 2).toString(16), 8, '0');\n\n  return '0501' + messageLength + signedMessageBytes;\n};\n\nexport const getRawSigningData = (message: string) => converters.stringToHexString(message);\nexport const getRawMichelineSigningData = (message: string) => getMichelineSigningData(message);\nexport const getWalletMichelineSigningData = (message: string) => getMichelineSigningData(message, tezosSignedMessagePrefixBytes);\n\nexport const getTezosSigningAlgorithm = (addressOrPublicKey: string) => {\n  const prefix = addressOrPublicKey.substring(0, addressOrPublicKey.startsWith('tz') ? 3 : 4);\n\n  switch (prefix) {\n    case Prefix.TZ1:\n    case Prefix.EDPK:\n      return 'Ed25519:Blake2b';\n\n    case Prefix.TZ2:\n    case Prefix.SPPK:\n      return 'Blake2bWithEcdsa:Secp256k1';\n\n    case Prefix.TZ3:\n    case Prefix.P2PK:\n      return 'Blake2bWithEcdsa:Secp256r1';\n\n    default:\n      throw new Error(`Unexpected address/public key prefix: ${prefix} (${addressOrPublicKey})`);\n  }\n};\n\nexport const decodeSignature = (signature: string) => {\n  const signaturePrefix = (signature.startsWith('sig')\n    ? signature.substring(0, 3)\n    : signature.substring(0, 5)) as SigPrefix;\n  const decodedKeyBytes = b58cdecode(signature, prefix[signaturePrefix]);\n\n  return Buffer.from(decodedKeyBytes).toString('hex');\n};\n", "import { InMemorySigner } from '@taquito/signer';\nimport { TezosToolkit } from '@taquito/taquito';\n\nimport type { AtomexSignature, BlockchainWallet } from '../../blockchain/index';\nimport type { AtomexNetwork } from '../../common/index';\nimport { decodePublicKey, signingUtils } from '../utils/index';\n\nexport class InMemoryTezosWallet implements BlockchainWallet<TezosToolkit> {\n  readonly id = 'taquito';\n  readonly toolkit: TezosToolkit;\n\n  protected readonly internalInMemorySigner: InMemorySigner;\n\n  constructor(\n    readonly atomexNetwork: AtomexNetwork,\n    secretKey: string,\n    rpcUrl: string,\n  ) {\n    this.internalInMemorySigner = new InMemorySigner(secretKey);\n    this.toolkit = new TezosToolkit(rpcUrl);\n    this.toolkit.setSignerProvider(this.internalInMemorySigner);\n  }\n\n  getBlockchain(): string | Promise<string> {\n    return 'tezos';\n  }\n\n  getAddress(): Promise<string> {\n    return this.internalInMemorySigner.publicKeyHash();\n  }\n\n  getPublicKey(): Promise<string> {\n    return this.internalInMemorySigner.publicKey();\n  }\n\n  async sign(message: string): Promise<AtomexSignature> {\n    const messageBytes = signingUtils.getRawSigningData(message);\n\n    const [address, publicKey, rawSignature] = await Promise.all([\n      this.getAddress(),\n      this.getPublicKey(),\n      this.internalInMemorySigner.sign(messageBytes)\n    ]);\n\n    const publicKeyBytes = decodePublicKey(publicKey);\n    const signatureBytes = rawSignature.sbytes.substring(rawSignature.bytes.length);\n    const algorithm = signingUtils.getTezosSigningAlgorithm(publicKey);\n\n    return {\n      address,\n      algorithm,\n      publicKeyBytes,\n      signatureBytes\n    };\n  }\n}\n", "import { TezosToolkit } from '@taquito/taquito';\nimport type { TempleWallet } from '@temple-wallet/dapp';\n\nimport type { AtomexSignature, BlockchainWallet } from '../../blockchain/index';\nimport type { AtomexNetwork } from '../../common/index';\nimport { TezosAtomexSigningDataType } from '../models/index';\nimport { decodePublicKey, signingUtils } from '../utils/index';\nimport { decodeSignature } from '../utils/signing';\n\nexport class TempleWalletTezosWallet implements BlockchainWallet<TezosToolkit> {\n  readonly id = 'taquito';\n  readonly blockchain = 'tezos';\n  readonly toolkit: TezosToolkit;\n\n  constructor(\n    readonly atomexNetwork: AtomexNetwork,\n    readonly templeWallet: TempleWallet,\n    rpcUrl: string\n  ) {\n    this.toolkit = new TezosToolkit(rpcUrl);\n    this.toolkit.setWalletProvider(templeWallet);\n  }\n\n  getBlockchain(): string | Promise<string> {\n    return 'tezos';\n  }\n\n  getAddress(): Promise<string> {\n    return this.templeWallet.getPKH();\n  }\n\n  getPublicKey(): string | undefined {\n    return this.templeWallet.permission?.publicKey;\n  }\n\n  async sign(message: string): Promise<AtomexSignature> {\n    const [address, publicKey, signature] = await Promise.all([\n      this.getAddress(),\n      this.getPublicKey(),\n      this.templeWallet.sign(signingUtils.getWalletMichelineSigningData(message))\n    ]);\n\n    if (!publicKey)\n      throw new Error('TempleWallet: public key is unavailable');\n\n    const algorithm = signingUtils.getTezosSigningAlgorithm(publicKey);\n    const publicKeyBytes = decodePublicKey(publicKey);\n    const signatureBytes = decodeSignature(signature);\n\n    return {\n      address,\n      algorithm,\n      publicKeyBytes,\n      signatureBytes,\n      signingDataType: TezosAtomexSigningDataType.WalletMicheline\n    };\n  }\n}\n", "import type { BeaconWallet } from '@taquito/beacon-wallet';\nimport type { TempleWallet } from '@temple-wallet/dapp';\n\nimport type { Atomex } from '../../atomex/index';\nimport type { AtomexSignature, BlockchainWallet } from '../../blockchain/index';\nimport type { AtomexNetwork } from '../../common';\nimport { BeaconWalletTezosWallet } from './beaconWalletTezosWallet';\nimport { InMemoryTezosWallet } from './inMemoryTezosWallet';\nimport { TempleWalletTezosWallet } from './templeWalletTezosWallet';\n\nexport class TaquitoBlockchainWallet implements BlockchainWallet {\n  protected readonly internalWallet: BlockchainWallet;\n\n  constructor(\n    readonly atomexNetwork: AtomexNetwork,\n    readonly walletOrSecretKey: BeaconWallet | TempleWallet | string,\n    readonly rpcUrl: string,\n  ) {\n    this.internalWallet = this.createInternalWallet(walletOrSecretKey);\n  }\n\n  get id() {\n    return this.internalWallet.id;\n  }\n\n  get toolkit() {\n    return this.internalWallet.toolkit;\n  }\n\n  getAddress(): string | Promise<string> {\n    return this.internalWallet.getAddress();\n  }\n\n  getPublicKey(): string | Promise<string | undefined> | undefined {\n    return this.internalWallet.getPublicKey();\n  }\n\n  getBlockchain(): string | Promise<string> {\n    return this.internalWallet.getBlockchain();\n  }\n\n  sign(message: string): Promise<AtomexSignature> {\n    return this.internalWallet.sign(message);\n  }\n\n  protected createInternalWallet(walletOrSecretKey: BeaconWallet | TempleWallet | string): BlockchainWallet {\n    if (typeof walletOrSecretKey === 'string')\n      return new InMemoryTezosWallet(this.atomexNetwork, (walletOrSecretKey as string), this.rpcUrl);\n    else if ((walletOrSecretKey as BeaconWallet).client?.name !== undefined)\n      return new BeaconWalletTezosWallet(this.atomexNetwork, (walletOrSecretKey as BeaconWallet), this.rpcUrl);\n    else if ((walletOrSecretKey as TempleWallet).permission !== undefined && (walletOrSecretKey as TempleWallet).connected !== undefined)\n      return new TempleWalletTezosWallet(this.atomexNetwork, (walletOrSecretKey as TempleWallet), this.rpcUrl);\n    else\n      throw new Error('Unknown Tezos wallet');\n  }\n\n  static async bind(atomex: Atomex, walletOrSecretKey: BeaconWallet | TempleWallet | string): Promise<TaquitoBlockchainWallet> {\n    const blockchain = 'tezos';\n    const rpcUrl = atomex.atomexContext.providers.blockchainProvider.getNetworkOptions(blockchain)?.rpcUrl;\n    if (!rpcUrl)\n      throw new Error(`There is not rpc url for ${blockchain} network`);\n\n    const wallet = new TaquitoBlockchainWallet(atomex.atomexNetwork, walletOrSecretKey, rpcUrl);\n    await atomex.wallets.addWallet(wallet);\n\n    return wallet;\n  }\n}\n", "import type { TezosToolkit } from '@taquito/taquito';\nimport BigNumber from 'bignumber.js';\n\nimport type {\n  AtomexBlockchainProvider,\n  AtomexProtocolMultiChain, FeesInfo, AtomexProtocolMultiChainInitiateParameters, AtomexProtocolMultiChainRedeemParameters, AtomexProtocolMultiChainRefundParameters,\n  BlockchainWallet, Transaction, WalletsManager\n} from '../../blockchain/index';\nimport type { AtomexNetwork } from '../../common/index';\nimport type { DeepReadonly } from '../../core/index';\nimport type { PriceManager } from '../../exchange';\nimport type { TaquitoAtomexProtocolMultiChainOptions } from '../models/index';\nimport { mutezInTez } from '../utils';\n\nexport abstract class TaquitoAtomexProtocolMultiChain implements AtomexProtocolMultiChain {\n  readonly type = 'multi-chain';\n\n  constructor(\n    protected readonly blockchain: string,\n    readonly atomexNetwork: AtomexNetwork,\n    protected readonly atomexProtocolOptions: DeepReadonly<TaquitoAtomexProtocolMultiChainOptions>,\n    protected readonly atomexBlockchainProvider: AtomexBlockchainProvider,\n    protected readonly walletsManager: WalletsManager,\n    protected readonly priceManager: PriceManager\n  ) {\n  }\n\n  get currencyId() {\n    return this.atomexProtocolOptions.currencyId;\n  }\n\n  get swapContractAddress() {\n    return this.atomexProtocolOptions.swapContractAddress;\n  }\n\n  abstract initiate(params: AtomexProtocolMultiChainInitiateParameters): Promise<Transaction>;\n\n  getInitiateFees(_params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    const estimated = new BigNumber(this.atomexProtocolOptions.initiateOperation.fee).div(mutezInTez);\n    const result: FeesInfo = { estimated, max: estimated };\n\n    return Promise.resolve(result);\n  }\n\n  abstract redeem(params: AtomexProtocolMultiChainRedeemParameters): Promise<Transaction>;\n\n  abstract getRedeemReward(redeemFee: FeesInfo): Promise<FeesInfo>;\n\n  getRedeemFees(_params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    const estimated = new BigNumber(this.atomexProtocolOptions.redeemOperation.fee).div(mutezInTez);\n    const result: FeesInfo = { estimated, max: estimated };\n\n    return Promise.resolve(result);\n  }\n\n  abstract refund(params: AtomexProtocolMultiChainRefundParameters): Promise<Transaction>;\n\n  getRefundFees(_params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    const estimated = new BigNumber(this.atomexProtocolOptions.refundOperation.fee).div(mutezInTez);\n    const result: FeesInfo = { estimated, max: estimated };\n\n    return Promise.resolve(result);\n  }\n\n  protected async getReadonlyTezosToolkit(): Promise<TezosToolkit> {\n    const toolkit = await this.atomexBlockchainProvider.getReadonlyToolkit<TezosToolkit>('taquito', this.blockchain);\n    if (!toolkit)\n      throw new Error('Tezos toolkit not found');\n\n    return toolkit;\n  }\n\n  protected async getWallet(address?: string): Promise<BlockchainWallet<TezosToolkit>> {\n    const taquitoWallet = await this.walletsManager.getWallet<TezosToolkit>(address, this.blockchain, 'taquito');\n    if (!taquitoWallet)\n      throw new Error(`${this.blockchain} Taqutio wallet not found`);\n\n    return taquitoWallet;\n  }\n}\n", "import { atomexProtocolMultiChainHelper } from '../../blockchain/atomexProtocolMultiChain';\nimport type {\n  AtomexBlockchainProvider,\n  AtomexProtocolMultiChainInitiateParameters,\n  AtomexProtocolMultiChainRedeemParameters,\n  AtomexProtocolMultiChainRefundParameters,\n  FeesInfo, Transaction, WalletsManager\n} from '../../blockchain/index';\nimport type { AtomexNetwork } from '../../common/index';\nimport type { DeepReadonly } from '../../core/index';\nimport type { PriceManager } from '../../exchange';\nimport type { TezosTaquitoAtomexProtocolMultiChainOptions } from '../models/index';\nimport { TaquitoAtomexProtocolMultiChain } from './taquitoAtomexProtocolMultiChain';\n\nexport class TezosTaquitoAtomexProtocolMultiChain extends TaquitoAtomexProtocolMultiChain {\n  constructor(\n    atomexNetwork: AtomexNetwork,\n    protected readonly atomexProtocolOptions: DeepReadonly<TezosTaquitoAtomexProtocolMultiChainOptions>,\n    atomexBlockchainProvider: AtomexBlockchainProvider,\n    walletsManager: WalletsManager,\n    priceManager: PriceManager\n  ) {\n    super('tezos', atomexNetwork, atomexProtocolOptions, atomexBlockchainProvider, walletsManager, priceManager);\n  }\n\n  get currencyId() {\n    return this.atomexProtocolOptions.currencyId;\n  }\n\n  initiate(_params: AtomexProtocolMultiChainInitiateParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getInitiateFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getInitiateFees(params);\n  }\n\n  redeem(_params: AtomexProtocolMultiChainRedeemParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getRedeemReward(redeemFee: FeesInfo): Promise<FeesInfo> {\n    return atomexProtocolMultiChainHelper.getRedeemRewardInNativeCurrency(this.currencyId, redeemFee, this.priceManager);\n  }\n\n  getRedeemFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getRedeemFees(params);\n  }\n\n  refund(_params: AtomexProtocolMultiChainRefundParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getRefundFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getRefundFees(params);\n  }\n}\n", "import { atomexProtocolMultiChainHelper } from '../../blockchain/atomexProtocolMultiChain';\nimport type {\n  AtomexBlockchainProvider,\n  AtomexProtocolMultiChainInitiateParameters,\n  AtomexProtocolMultiChainRedeemParameters,\n  AtomexProtocolMultiChainRefundParameters,\n  FeesInfo, Transaction, WalletsManager\n} from '../../blockchain/index';\nimport type { AtomexNetwork } from '../../common/index';\nimport type { DeepReadonly } from '../../core/index';\nimport type { PriceManager } from '../../exchange';\nimport type { FA12TezosTaquitoAtomexProtocolMultiChainOptions } from '../models/index';\nimport { TaquitoAtomexProtocolMultiChain } from './taquitoAtomexProtocolMultiChain';\n\nexport class FA12TezosTaquitoAtomexProtocolMultiChain extends TaquitoAtomexProtocolMultiChain {\n  constructor(\n    atomexNetwork: AtomexNetwork,\n    protected readonly atomexProtocolOptions: DeepReadonly<FA12TezosTaquitoAtomexProtocolMultiChainOptions>,\n    atomexBlockchainProvider: AtomexBlockchainProvider,\n    walletsManager: WalletsManager,\n    priceManager: PriceManager\n  ) {\n    super('tezos', atomexNetwork, atomexProtocolOptions, atomexBlockchainProvider, walletsManager, priceManager);\n  }\n\n  get currencyId() {\n    return this.atomexProtocolOptions.currencyId;\n  }\n\n  initiate(_params: AtomexProtocolMultiChainInitiateParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getInitiateFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getInitiateFees(params);\n  }\n\n  redeem(_params: AtomexProtocolMultiChainRedeemParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getRedeemReward(redeemFee: FeesInfo): Promise<FeesInfo> {\n    return atomexProtocolMultiChainHelper.getRedeemRewardInToken(this.currencyId, redeemFee, this.priceManager, this.atomexBlockchainProvider);\n  }\n\n  getRedeemFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getRedeemFees(params);\n  }\n\n  refund(_params: AtomexProtocolMultiChainRefundParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getRefundFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getRefundFees(params);\n  }\n}\n", "import { atomexProtocolMultiChainHelper } from '../../blockchain/atomexProtocolMultiChain';\nimport type {\n  AtomexBlockchainProvider,\n  AtomexProtocolMultiChainInitiateParameters,\n  AtomexProtocolMultiChainRedeemParameters,\n  AtomexProtocolMultiChainRefundParameters,\n  FeesInfo, Transaction, WalletsManager\n} from '../../blockchain/index';\nimport type { AtomexNetwork } from '../../common/index';\nimport type { DeepReadonly } from '../../core/index';\nimport type { PriceManager } from '../../exchange';\nimport type { FA2TezosTaquitoAtomexProtocolMultiChainOptions } from '../models/index';\nimport { TaquitoAtomexProtocolMultiChain } from './taquitoAtomexProtocolMultiChain';\n\nexport class FA2TezosTaquitoAtomexProtocolMultiChain extends TaquitoAtomexProtocolMultiChain {\n  constructor(\n    atomexNetwork: AtomexNetwork,\n    protected readonly atomexProtocolOptions: DeepReadonly<FA2TezosTaquitoAtomexProtocolMultiChainOptions>,\n    atomexBlockchainProvider: AtomexBlockchainProvider,\n    walletsManager: WalletsManager,\n    priceManager: PriceManager\n  ) {\n    super('tezos', atomexNetwork, atomexProtocolOptions, atomexBlockchainProvider, walletsManager, priceManager);\n  }\n\n  get currencyId() {\n    return this.atomexProtocolOptions.currencyId;\n  }\n\n  initiate(_params: AtomexProtocolMultiChainInitiateParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getInitiateFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getInitiateFees(params);\n  }\n\n  redeem(_params: AtomexProtocolMultiChainRedeemParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getRedeemReward(redeemFee: FeesInfo): Promise<FeesInfo> {\n    return atomexProtocolMultiChainHelper.getRedeemRewardInToken(this.currencyId, redeemFee, this.priceManager, this.atomexBlockchainProvider);\n  }\n\n  getRedeemFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getRedeemFees(params);\n  }\n\n  refund(_params: AtomexProtocolMultiChainRefundParameters): Promise<Transaction> {\n    throw new Error('Method not implemented.');\n  }\n\n  getRefundFees(params: Partial<AtomexProtocolMultiChainInitiateParameters>): Promise<FeesInfo> {\n    return super.getRefundFees(params);\n  }\n}\n", "import type BigNumber from 'bignumber.js';\n\nimport type { BalancesProvider } from '../../blockchain/index';\nimport type { Currency } from '../../common/index';\nimport { HttpClient } from '../../core/index';\nimport { numberToTokensAmount } from '../../utils/converters';\nimport type { FA12TezosCurrency, FA2TezosCurrency, NativeTezosCurrency } from '../models/index';\nimport { isTezosCurrency } from '../utils/index';\n\nexport class TzktBalancesProvider implements BalancesProvider {\n  private readonly httpClient: HttpClient;\n\n  constructor(baseUrl: string) {\n    this.httpClient = new HttpClient(baseUrl);\n  }\n\n  async getBalance(address: string, currency: Currency): Promise<BigNumber> {\n    if (!isTezosCurrency(currency))\n      throw new Error('Not tezos blockchain currency provided');\n\n    switch (currency.type) {\n      case 'native':\n        return await this.getNativeTokenBalance(address, currency);\n\n      case 'fa1.2':\n      case 'fa2':\n        return await this.getTokenBalance(address, currency);\n    }\n  }\n\n  private async getNativeTokenBalance(address: string, currency: NativeTezosCurrency): Promise<BigNumber> {\n    const urlPath = `/v1/accounts/${address}/balance`;\n    const balance = await this.httpClient.request<number>({ urlPath }, false);\n\n    return numberToTokensAmount(balance, currency.decimals);\n  }\n\n  private async getTokenBalance(address: string, currency: FA12TezosCurrency | FA2TezosCurrency): Promise<BigNumber> {\n    const urlPath = '/v1/tokens/balances';\n    const params = {\n      'account': address,\n      'token.contract': currency.contractAddress,\n      'token.tokenId': currency.type === 'fa1.2' ? 0 : currency.tokenId,\n      'select': 'balance'\n    };\n\n    const balances = await this.httpClient.request<number[]>({ urlPath, params }, false);\n    const balance = balances.length ? balances[0] : 0;\n    if (balance === undefined)\n      throw new Error('Invalid response');\n\n    return numberToTokensAmount(balance, currency.decimals);\n  }\n}\n", "import type { SwapTransactionsProvider, Transaction } from '../../blockchain/index';\nimport type { Swap } from '../../index';\n\nexport class TezosSwapTransactionsProvider implements SwapTransactionsProvider {\n  private _isStarted = false;\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  async start() {\n    if (this.isStarted)\n      return;\n\n    this._isStarted = true;\n  }\n\n  stop(): void {\n    if (!this.isStarted)\n      return;\n\n    this._isStarted = false;\n  }\n\n  getSwapTransactions(_swap: Swap): Promise<readonly Transaction[]> {\n    throw new Error('Method not implemented.');\n  }\n}\n", "import { TezosToolkit } from '@taquito/taquito';\n\nimport type { BlockchainToolkitProvider } from '../../blockchain/index';\n\nexport class TaquitoBlockchainToolkitProvider implements BlockchainToolkitProvider {\n  static readonly BLOCKCHAIN = 'tezos';\n\n  readonly toolkitId = 'taquito';\n  protected toolkit: TezosToolkit | undefined;\n\n  constructor(\n    protected readonly rpcUrl: string\n  ) { }\n\n  getReadonlyToolkit(blockchain?: string): Promise<TezosToolkit | undefined> {\n    if (blockchain && blockchain !== TaquitoBlockchainToolkitProvider.BLOCKCHAIN)\n      return Promise.resolve(undefined);\n\n    if (!this.toolkit)\n      this.toolkit = new TezosToolkit(this.rpcUrl);\n\n    return Promise.resolve(this.toolkit);\n  }\n}\n", "import type { NativeTezosCurrency, TezosCurrency, FA12TezosCurrency, FA2TezosCurrency } from '../models/index';\n\nconst nativeTezosCurrency: NativeTezosCurrency = {\n  id: 'XTZ',\n  name: 'Tezos',\n  symbol: 'XTZ',\n  blockchain: 'tezos',\n  decimals: 6,\n  type: 'native'\n};\n\nconst tzBtcCurrency: FA12TezosCurrency = {\n  id: 'TZBTC',\n  name: 'tzBTC',\n  symbol: 'tzBTC',\n  blockchain: 'tezos',\n  type: 'fa1.2',\n  contractAddress: 'KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn',\n  decimals: 8,\n};\n\nconst kusdCurrency: FA12TezosCurrency = {\n  id: 'KUSD',\n  name: 'Kolibri USD',\n  symbol: 'kUSD',\n  blockchain: 'tezos',\n  type: 'fa1.2',\n  contractAddress: 'KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV',\n  decimals: 18\n};\n\nconst usdtCurrency: FA2TezosCurrency = {\n  id: 'USDT_XTZ',\n  name: 'Tether USD',\n  symbol: 'USDt',\n  blockchain: 'tezos',\n  type: 'fa2',\n  tokenId: 0,\n  contractAddress: 'KT1XnTn74bUtxHfDtBmm2bGZAQfhPbvKWR8o',\n  decimals: 6,\n};\n\nexport const tezosMainnetCurrencies: TezosCurrency[] = [\n  nativeTezosCurrency,\n  tzBtcCurrency,\n  kusdCurrency,\n  usdtCurrency\n];\n\nexport const tezosTestnetCurrencies: TezosCurrency[] = [\n  nativeTezosCurrency,\n  // ({ ...tzBtcCurrency, contractAddress: 'KT1DM4k79uSx5diQnwqDiF4XeA86aCBxBD35' } as FA12TezosCurrency),\n  ({ ...usdtCurrency, contractAddress: 'KT1BWvRQnVVowZZLGkct9A7sdj5YEe8CdUhR' } as FA2TezosCurrency)\n];\n", "\nimport type { FA12TezosTaquitoAtomexProtocolMultiChainOptions, FA2TezosTaquitoAtomexProtocolMultiChainOptions } from '../../models/index';\n\nexport const mainnetFA12TezosTaquitoAtomexProtocolMultiChainOptionsBase: Omit<\n  FA12TezosTaquitoAtomexProtocolMultiChainOptions,\n  'currencyId' | 'swapContractAddress' | 'swapContractBlockId'\n> = {\n  atomexProtocolVersion: 1,\n  initiateOperation: {\n    fee: 11000,\n    gasLimit: 110000,\n    storageLimit: 350,\n  },\n  redeemOperation: {\n    fee: 11000,\n    gasLimit: 15000,\n    storageLimit: 257\n  },\n  refundOperation: {\n    fee: 11000,\n    gasLimit: 110000,\n    storageLimit: 257,\n  }\n};\n\nexport const mainnetFA2TezosTaquitoAtomexProtocolMultiChainOptionsBase: Omit<\n  FA2TezosTaquitoAtomexProtocolMultiChainOptions,\n  'currencyId' | 'swapContractAddress' | 'swapContractBlockId'\n> = {\n  atomexProtocolVersion: 1,\n  initiateOperation: {\n    fee: 350000,\n    gasLimit: 400000,\n    storageLimit: 250,\n  },\n  redeemOperation: {\n    fee: 120000,\n    gasLimit: 400000,\n    storageLimit: 257\n  },\n  refundOperation: {\n    fee: 120000,\n    gasLimit: 400000,\n    storageLimit: 257,\n  }\n};\n\nexport const testnetFA12TezosTaquitoAtomexProtocolMultiChainOptionsBase: Omit<\n  FA12TezosTaquitoAtomexProtocolMultiChainOptions,\n  'currencyId' | 'swapContractAddress' | 'swapContractBlockId'\n> = {\n  atomexProtocolVersion: 1,\n  initiateOperation: {\n    fee: 2000,\n    gasLimit: 15000,\n    storageLimit: 350,\n  },\n  redeemOperation: {\n    fee: 2500,\n    gasLimit: 20000,\n    storageLimit: 257\n  },\n  refundOperation: {\n    fee: 2500,\n    gasLimit: 15000,\n    storageLimit: 257,\n  }\n};\n\nexport const testnetFA2TezosTaquitoAtomexProtocolMultiChainOptionsBase: Omit<\n  FA2TezosTaquitoAtomexProtocolMultiChainOptions,\n  'currencyId' | 'swapContractAddress' | 'swapContractBlockId'\n> = {\n  atomexProtocolVersion: 1,\n  initiateOperation: {\n    fee: 350000,\n    gasLimit: 400000,\n    storageLimit: 250,\n  },\n  redeemOperation: {\n    fee: 120000,\n    gasLimit: 400000,\n    storageLimit: 257\n  },\n  refundOperation: {\n    fee: 120000,\n    gasLimit: 400000,\n    storageLimit: 257,\n  }\n};\n", "import type { FA12TezosTaquitoAtomexProtocolMultiChainOptions, FA2TezosTaquitoAtomexProtocolMultiChainOptions, TezosTaquitoAtomexProtocolMultiChainOptions } from '../../models/index';\nimport { mainnetFA12TezosTaquitoAtomexProtocolMultiChainOptionsBase, mainnetFA2TezosTaquitoAtomexProtocolMultiChainOptionsBase } from './base';\n\nconst mainnetNativeTezosTaquitoAtomexProtocolMultiChainOptions: TezosTaquitoAtomexProtocolMultiChainOptions = {\n  atomexProtocolVersion: 1,\n  currencyId: 'XTZ',\n  swapContractAddress: 'KT1VG2WtYdSWz5E7chTeAdDPZNy2MpP8pTfL',\n  swapContractBlockId: '513046',\n  initiateOperation: {\n    fee: 2000,\n    gasLimit: 11000,\n    storageLimit: 257\n  },\n  redeemOperation: {\n    fee: 2000,\n    gasLimit: 15000,\n    storageLimit: 257\n  },\n  refundOperation: {\n    fee: 1600,\n    gasLimit: 13000,\n    storageLimit: 257,\n  }\n};\n\nconst mainnetTZBTCTezosTaquitoAtomexProtocolMultiChainOptions: FA12TezosTaquitoAtomexProtocolMultiChainOptions = {\n  ...mainnetFA12TezosTaquitoAtomexProtocolMultiChainOptionsBase,\n  currencyId: 'TZBTC',\n  swapContractAddress: 'KT1Ap287P1NzsnToSJdA4aqSNjPomRaHBZSr',\n  swapContractBlockId: '900350',\n  redeemOperation: {\n    ...mainnetFA12TezosTaquitoAtomexProtocolMultiChainOptionsBase.redeemOperation,\n    gasLimit: 180000\n  }\n};\n\nconst mainnetKUSDTezosTaquitoAtomexProtocolMultiChainOptions: FA12TezosTaquitoAtomexProtocolMultiChainOptions = {\n  ...mainnetFA12TezosTaquitoAtomexProtocolMultiChainOptionsBase,\n  currencyId: 'KUSD',\n  swapContractAddress: 'KT1EpQVwqLGSH7vMCWKJnq6Uxi851sEDbhWL',\n  swapContractBlockId: '1358868',\n  redeemOperation: {\n    ...mainnetFA12TezosTaquitoAtomexProtocolMultiChainOptionsBase.redeemOperation,\n    gasLimit: 110000\n  }\n};\n\n\nconst mainnetUSDtTezosTaquitoAtomexProtocolMultiChainOptions: FA2TezosTaquitoAtomexProtocolMultiChainOptions = {\n  ...mainnetFA2TezosTaquitoAtomexProtocolMultiChainOptionsBase,\n  currencyId: 'USDT_XTZ',\n  swapContractAddress: 'KT1Ays1Chwx3ArnHGoQXchUgDsvKe9JboUjj',\n  swapContractBlockId: '2496680'\n};\n\nexport const mainnetTezosTaquitoAtomexProtocolMultiChainOptions = {\n  XTZ: mainnetNativeTezosTaquitoAtomexProtocolMultiChainOptions,\n  TZBTC: mainnetTZBTCTezosTaquitoAtomexProtocolMultiChainOptions,\n  KUSD: mainnetKUSDTezosTaquitoAtomexProtocolMultiChainOptions,\n  USDT_XTZ: mainnetUSDtTezosTaquitoAtomexProtocolMultiChainOptions\n} as const;\n", "import type { FA2TezosTaquitoAtomexProtocolMultiChainOptions, TezosTaquitoAtomexProtocolMultiChainOptions } from '../../models/index';\nimport { testnetFA2TezosTaquitoAtomexProtocolMultiChainOptionsBase } from './base';\n\nconst testnetNativeTezosTaquitoAtomexProtocolMultiChainOptions: TezosTaquitoAtomexProtocolMultiChainOptions = {\n  atomexProtocolVersion: 1,\n  currencyId: 'XTZ',\n  swapContractAddress: 'KT1SJMtHZFSPva5AzQEx5btBuQ8BjvXqort3',\n  swapContractBlockId: '320132',\n  initiateOperation: {\n    fee: 2000,\n    gasLimit: 11000,\n    storageLimit: 257\n  },\n  redeemOperation: {\n    fee: 2000,\n    gasLimit: 15000,\n    storageLimit: 257\n  },\n  refundOperation: {\n    fee: 1600,\n    gasLimit: 13000,\n    storageLimit: 257,\n  }\n};\n\n\nconst testnetUSDtTezosTaquitoAtomexProtocolMultiChainOptions: FA2TezosTaquitoAtomexProtocolMultiChainOptions = {\n  ...testnetFA2TezosTaquitoAtomexProtocolMultiChainOptionsBase,\n  currencyId: 'USDT_XTZ',\n  swapContractAddress: 'KT1BWvRQnVVowZZLGkct9A7sdj5YEe8CdUhR',\n  swapContractBlockId: '665321'\n};\n\nexport const testnetTezosTaquitoAtomexProtocolMultiChainOptions = {\n  XTZ: testnetNativeTezosTaquitoAtomexProtocolMultiChainOptions,\n  USDT_XTZ: testnetUSDtTezosTaquitoAtomexProtocolMultiChainOptions\n} as const;\n", "import type { AtomexBlockchainNetworkOptions, AtomexContext, AtomexCurrencyOptions } from '../../atomex/index';\nimport { FA12TezosTaquitoAtomexProtocolMultiChain, FA2TezosTaquitoAtomexProtocolMultiChain, TezosTaquitoAtomexProtocolMultiChain } from '../atomexProtocol';\nimport { TzktBalancesProvider } from '../balancesProviders/index';\nimport { TaquitoBlockchainToolkitProvider } from '../blockchainToolkitProviders/index';\nimport type { TezosCurrency } from '../models';\nimport { TezosSwapTransactionsProvider } from '../swapTransactionsProviders/index';\nimport { mainnetTezosTaquitoAtomexProtocolMultiChainOptions, testnetTezosTaquitoAtomexProtocolMultiChainOptions } from './atomexProtocol';\nimport { tezosMainnetCurrencies, tezosTestnetCurrencies } from './currencies';\n\ntype AtomexProtocolOptions = typeof mainnetTezosTaquitoAtomexProtocolMultiChainOptions | typeof testnetTezosTaquitoAtomexProtocolMultiChainOptions;\n\nconst createAtomexProtocol = (\n  atomexContext: AtomexContext,\n  currency: TezosCurrency,\n  atomexProtocolOptions: AtomexProtocolOptions[keyof AtomexProtocolOptions]\n) => {\n  switch (currency.type) {\n    case 'native':\n      return new TezosTaquitoAtomexProtocolMultiChain(\n        atomexContext.atomexNetwork,\n        atomexProtocolOptions,\n        atomexContext.providers.blockchainProvider,\n        atomexContext.managers.walletsManager,\n        atomexContext.managers.priceManager\n      );\n    case 'fa1.2':\n      return new FA12TezosTaquitoAtomexProtocolMultiChain(\n        atomexContext.atomexNetwork,\n        atomexProtocolOptions,\n        atomexContext.providers.blockchainProvider,\n        atomexContext.managers.walletsManager,\n        atomexContext.managers.priceManager\n      );\n    case 'fa2':\n      return new FA2TezosTaquitoAtomexProtocolMultiChain(\n        atomexContext.atomexNetwork,\n        atomexProtocolOptions,\n        atomexContext.providers.blockchainProvider,\n        atomexContext.managers.walletsManager,\n        atomexContext.managers.priceManager\n      );\n    default:\n      throw new Error(`Unknown Tezos currency: ${(currency as TezosCurrency).id}`);\n  }\n\n};\n\nconst createCurrencyOptions = (\n  atomexContext: AtomexContext,\n  currencies: TezosCurrency[],\n  atomexProtocolOptions: AtomexProtocolOptions\n): Record<TezosCurrency['id'], AtomexCurrencyOptions> => {\n  const result: Record<TezosCurrency['id'], AtomexCurrencyOptions> = {};\n  const currenciesMap = currencies.reduce<Record<TezosCurrency['id'], TezosCurrency>>(\n    (obj, currency) => {\n      obj[currency.id] = currency;\n\n      return obj;\n    },\n    {}\n  );\n\n  for (const options of Object.values(atomexProtocolOptions)) {\n    const currency = currenciesMap[options.currencyId];\n    if (!currency)\n      throw new Error(`The ${options.currencyId} currency not found`);\n\n    result[currency.id] = {\n      atomexProtocol: createAtomexProtocol(atomexContext, currency, options)\n    };\n  }\n\n  return result;\n};\n\nexport const createDefaultTezosBlockchainOptions = (atomexContext: AtomexContext): AtomexBlockchainNetworkOptions => {\n  const mainnetRpcUrl = 'https://rpc.tzkt.io/mainnet/';\n  const testNetRpcUrl = 'https://rpc.tzkt.io/ithacanet/';\n  const swapTransactionsProvider = new TezosSwapTransactionsProvider();\n\n  const tezosOptions: AtomexBlockchainNetworkOptions = atomexContext.atomexNetwork === 'mainnet'\n    ? {\n      rpcUrl: mainnetRpcUrl,\n      currencies: tezosMainnetCurrencies,\n      currencyOptions: createCurrencyOptions(atomexContext, tezosMainnetCurrencies, mainnetTezosTaquitoAtomexProtocolMultiChainOptions),\n      blockchainToolkitProvider: new TaquitoBlockchainToolkitProvider(mainnetRpcUrl),\n      balancesProvider: new TzktBalancesProvider('https://api.mainnet.tzkt.io/'),\n      swapTransactionsProvider,\n    }\n    : {\n      rpcUrl: testNetRpcUrl,\n      currencies: tezosTestnetCurrencies,\n      currencyOptions: createCurrencyOptions(atomexContext, tezosTestnetCurrencies, testnetTezosTaquitoAtomexProtocolMultiChainOptions),\n      blockchainToolkitProvider: new TaquitoBlockchainToolkitProvider(testNetRpcUrl),\n      balancesProvider: new TzktBalancesProvider('https://api.ghostnet.tzkt.io/'),\n      swapTransactionsProvider,\n    };\n\n  return tezosOptions;\n};\n", "import BigNumber from 'bignumber.js';\n\nimport type { Transaction } from '../blockchain/models/index';\nimport type { CurrenciesProvider } from '../common/index';\nimport { ExchangeSymbol, ExchangeSymbolsProvider, Order, OrderBook, OrderBookEntry, OrderBookProvider, Quote, symbolsHelper } from '../exchange/index';\nimport type { Swap, SwapParticipantTrade } from '../swaps/index';\nimport type {\n  OrderBookDto, OrderBookEntryDto, OrderDto, QuoteDto, SwapDto, SymbolDto,\n  TradeDto, TransactionDto, WebSocketOrderBookEntryDto, WebSocketOrderDataDto\n} from './dtos';\n\nexport const mapQuoteDtosToQuotes = (quoteDtos: QuoteDto[]): Quote[] => {\n  const quotes: Quote[] = quoteDtos.map(quoteDto => mapQuoteDtoToQuote(quoteDto));\n\n  return quotes;\n};\n\nexport const mapQuoteDtoToQuote = (quoteDto: QuoteDto): Quote => {\n  const [baseCurrency, quoteCurrency] = symbolsHelper.getBaseQuoteCurrenciesBySymbol(quoteDto.symbol);\n\n  const quote: Quote = {\n    ask: new BigNumber(quoteDto.ask),\n    bid: new BigNumber(quoteDto.bid),\n    symbol: quoteDto.symbol,\n    timeStamp: new Date(quoteDto.timeStamp),\n    baseCurrency,\n    quoteCurrency\n  };\n\n  return quote;\n};\n\nexport const mapSymbolDtoToSymbol = (symbolDto: SymbolDto, currenciesProvider: CurrenciesProvider, defaultDecimals = 9): ExchangeSymbol => {\n  const [baseCurrency, quoteCurrency] = symbolsHelper.getBaseQuoteCurrenciesBySymbol(symbolDto.name);\n  const baseCurrencyDecimals = currenciesProvider.getCurrency(baseCurrency)?.decimals;\n  const quoteCurrencyDecimals = currenciesProvider.getCurrency(quoteCurrency)?.decimals;\n\n  const preparedBaseCurrencyDecimals = baseCurrencyDecimals ? Math.min(baseCurrencyDecimals, defaultDecimals) : defaultDecimals;\n  const preparedQuoteCurrencyDecimals = quoteCurrencyDecimals ? Math.min(quoteCurrencyDecimals, defaultDecimals) : defaultDecimals;\n\n  return {\n    name: symbolDto.name,\n    baseCurrency,\n    quoteCurrency,\n    minimumQty: new BigNumber(symbolDto.minimumQty),\n    decimals: {\n      baseCurrency: preparedBaseCurrencyDecimals,\n      quoteCurrency: preparedQuoteCurrencyDecimals,\n      price: defaultDecimals\n    }\n  };\n};\n\nexport const mapSymbolDtosToSymbols = (\n  symbolDtos: readonly SymbolDto[],\n  currenciesProvider: CurrenciesProvider,\n  defaultDecimals?: number\n): ExchangeSymbol[] => {\n  return symbolDtos.map(symbolDto => mapSymbolDtoToSymbol(symbolDto, currenciesProvider, defaultDecimals));\n};\n\nexport const mapOrderBookDtoToOrderBook = (orderBookDto: OrderBookDto): OrderBook => {\n  const [baseCurrency, quoteCurrency] = symbolsHelper.getBaseQuoteCurrenciesBySymbol(orderBookDto.symbol);\n\n  const orderBook: OrderBook = {\n    updateId: orderBookDto.updateId,\n    symbol: orderBookDto.symbol,\n    baseCurrency,\n    quoteCurrency,\n    entries: orderBookDto.entries.map(orderBookEntryDto => mapOrderBookEntryDtoToOrderBookEntry(orderBookEntryDto))\n  };\n\n  return orderBook;\n};\n\nexport const mapOrderBookEntryDtoToOrderBookEntry = (entryDto: OrderBookEntryDto): OrderBookEntry => {\n  const entry: OrderBookEntry = {\n    side: entryDto.side,\n    price: new BigNumber(entryDto.price),\n    qtyProfile: entryDto.qtyProfile\n  };\n\n  return entry;\n};\n\nexport const mapWebSocketOrderBookEntryDtoToOrderBooks = (\n  orderBookEntryDtos: WebSocketOrderBookEntryDto[],\n  orderBookProvider: OrderBookProvider\n): OrderBook[] => {\n  const updatedOrderBooks: Map<OrderBook['symbol'], OrderBook> = new Map();\n\n  for (const entryDto of orderBookEntryDtos) {\n    const orderBook = updatedOrderBooks.get(entryDto.symbol) || orderBookProvider.getOrderBook(entryDto.symbol);\n    if (!orderBook)\n      continue;\n\n    const entry = mapOrderBookEntryDtoToOrderBookEntry(entryDto);\n    const storedEntry = orderBook.entries.find(e => e.side === entry.side && e.price.isEqualTo(entry.price));\n\n    const updatedEntries = entryDto.qtyProfile.length\n      ? storedEntry\n        ? orderBook.entries.map(e => e === storedEntry ? { ...e, qtyProfile: entry.qtyProfile } : e)\n        : [...orderBook.entries, entry]\n      : orderBook.entries.filter(e => e !== storedEntry);\n\n    const updatedOrderBook: OrderBook = {\n      ...orderBook,\n      updateId: entryDto.updateId,\n      entries: updatedEntries\n    };\n\n    updatedOrderBooks.set(updatedOrderBook.symbol, updatedOrderBook);\n  }\n\n  return Array.from(updatedOrderBooks.values());\n};\n\nexport const mapOrderDtoToOrder = (orderDto: OrderDto, exchangeSymbolsProvider: ExchangeSymbolsProvider): Order => {\n  const exchangeSymbol = exchangeSymbolsProvider.getSymbol(orderDto.symbol);\n  if (!exchangeSymbol)\n    throw new Error(`\"${orderDto.symbol}\" symbol not found`);\n\n  const [from, to] = symbolsHelper.convertSymbolAndSideToFromAndToSymbolCurrencies(exchangeSymbol, orderDto.side, orderDto.qty, orderDto.price);\n\n  return {\n    id: orderDto.id,\n    from,\n    to,\n    clientOrderId: orderDto.clientOrderId,\n    side: orderDto.side,\n    symbol: orderDto.symbol,\n    leaveQty: new BigNumber(orderDto.leaveQty),\n    timeStamp: new Date(orderDto.timeStamp),\n    type: orderDto.type,\n    status: orderDto.status,\n    swapIds: orderDto.swaps?.map(swap => swap.id) || [],\n  };\n};\n\nexport const mapOrderDtosToOrders = (orderDtos: OrderDto[], exchangeSymbolsProvider: ExchangeSymbolsProvider): Order[] => {\n  return orderDtos.map(orderDto => mapOrderDtoToOrder(orderDto, exchangeSymbolsProvider));\n};\n\nexport const mapTransactionDtosToTransactions = (transactionDtos: TransactionDto[]): Transaction[] => {\n  const transactions = transactionDtos.map(transactionDto => ({\n    id: transactionDto.txId,\n    blockId: transactionDto.blockHeight,\n    confirmations: transactionDto.confirmations,\n    currencyId: transactionDto.currency,\n    status: transactionDto.status,\n    type: transactionDto.type\n  }));\n\n  return transactions;\n};\n\nexport const mapSwapDtoToSwap = (swapDto: SwapDto, exchangeSymbolsProvider: ExchangeSymbolsProvider): Swap => {\n  const exchangeSymbol = exchangeSymbolsProvider.getSymbol(swapDto.symbol);\n  if (!exchangeSymbol)\n    throw new Error(`\"${swapDto.symbol}\" symbol not found`);\n\n  const [from, to] = symbolsHelper.convertSymbolAndSideToFromAndToSymbolCurrencies(exchangeSymbol, swapDto.side, swapDto.qty, swapDto.price);\n\n  const swap: Swap = {\n    isInitiator: swapDto.isInitiator,\n    secret: swapDto.secret,\n    secretHash: swapDto.secretHash,\n    id: Number(swapDto.id),\n    from,\n    to,\n    trade: {\n      qty: new BigNumber(swapDto.qty),\n      price: new BigNumber(swapDto.price),\n      side: swapDto.side,\n      symbol: swapDto.symbol\n    },\n    timeStamp: new Date(swapDto.timeStamp),\n    counterParty: {\n      status: swapDto.counterParty.status,\n      transactions: mapTransactionDtosToTransactions(swapDto.counterParty.transactions),\n      requisites: {\n        ...swapDto.counterParty.requisites,\n        rewardForRedeem: new BigNumber(swapDto.counterParty.requisites.rewardForRedeem),\n      },\n      trades: mapTradeDtosToTrades(swapDto.counterParty.trades)\n    },\n    user: {\n      status: swapDto.user.status,\n      transactions: mapTransactionDtosToTransactions(swapDto.user.transactions),\n      requisites: {\n        ...swapDto.user.requisites,\n        rewardForRedeem: new BigNumber(swapDto.user.requisites.rewardForRedeem),\n      },\n      trades: mapTradeDtosToTrades(swapDto.user.trades)\n    },\n  };\n\n  return swap;\n};\n\nexport const mapTradeDtosToTrades = (tradeDtos: TradeDto[]): SwapParticipantTrade[] => {\n  const trades = tradeDtos.map(tradeDto => ({\n    orderId: tradeDto.orderId,\n    price: new BigNumber(tradeDto.price),\n    qty: new BigNumber(tradeDto.qty),\n  }));\n\n  return trades;\n};\n\nexport const mapSwapDtosToSwaps = (swapDtos: SwapDto[], exchangeSymbolsProvider: ExchangeSymbolsProvider): Swap[] => {\n  return swapDtos.map(swapDto => mapSwapDtoToSwap(swapDto, exchangeSymbolsProvider));\n};\n\nexport const mapWebSocketOrderDtoToOrder = (orderDto: WebSocketOrderDataDto, exchangeSymbolsProvider: ExchangeSymbolsProvider): Order => {\n  const exchangeSymbol = exchangeSymbolsProvider.getSymbol(orderDto.symbol);\n  if (!exchangeSymbol)\n    throw new Error(`\"${orderDto.symbol}\" symbol not found`);\n\n  const [from, to] = symbolsHelper.convertSymbolAndSideToFromAndToSymbolCurrencies(exchangeSymbol, orderDto.side, orderDto.qty, orderDto.price);\n\n  const order: Order = {\n    id: orderDto.id,\n    clientOrderId: orderDto.clientOrderId,\n    side: orderDto.side,\n    status: orderDto.status,\n    leaveQty: new BigNumber(orderDto.leaveQty),\n    swapIds: orderDto.swaps,\n    symbol: orderDto.symbol,\n    type: orderDto.type,\n    timeStamp: new Date(orderDto.timeStamp),\n    from,\n    to\n  };\n\n  return order;\n};\n", "import type BigNumber from 'bignumber.js';\n\nimport type { AuthorizationManager } from '../../authorization/index';\nimport type { Transaction } from '../../blockchain/index';\nimport type { AtomexNetwork, CancelAllSide, CurrenciesProvider, Side } from '../../common/index';\nimport { EventEmitter } from '../../core';\nimport { HttpClient } from '../../core/index';\nimport {\n  symbolsHelper, ordersHelper,\n  Order, OrderBook, Quote, ExchangeSymbol, OrdersSelector, CancelOrderRequest,\n  CancelAllOrdersRequest, SwapsSelector, CurrencyDirection, ExchangeSymbolsProvider, FilledNewOrderRequest\n} from '../../exchange/index';\nimport type { Swap } from '../../swaps/index';\nimport type { AtomexClient } from '../atomexClient';\nimport type { CreatedOrderDto, NewOrderRequestDto, OrderBookDto, OrderDto, ProofOfFundsDto, QuoteDto, SwapDto, SymbolDto } from '../dtos';\nimport {\n  mapOrderBookDtoToOrderBook, mapOrderDtosToOrders, mapOrderDtoToOrder,\n  mapQuoteDtosToQuotes, mapSwapDtosToSwaps, mapSwapDtoToSwap, mapSymbolDtosToSymbols\n} from '../helpers';\n\nexport interface RestAtomexClientOptions {\n  atomexNetwork: AtomexNetwork;\n  authorizationManager: AuthorizationManager;\n  currenciesProvider: CurrenciesProvider;\n  exchangeSymbolsProvider: ExchangeSymbolsProvider;\n  apiBaseUrl: string;\n}\n\nexport class RestAtomexClient implements AtomexClient {\n  readonly atomexNetwork: AtomexNetwork;\n\n  readonly events: AtomexClient['events'] = {\n    swapUpdated: new EventEmitter(),\n    orderUpdated: new EventEmitter(),\n    orderBookSnapshot: new EventEmitter(),\n    orderBookUpdated: new EventEmitter(),\n    topOfBookUpdated: new EventEmitter()\n  };\n\n  protected readonly authorizationManager: AuthorizationManager;\n  protected readonly currenciesProvider: CurrenciesProvider;\n  protected readonly exchangeSymbolsProvider: ExchangeSymbolsProvider;\n  protected readonly apiBaseUrl: string;\n  protected readonly httpClient: HttpClient;\n\n  private _isStarted = false;\n\n  constructor(options: RestAtomexClientOptions) {\n    this.atomexNetwork = options.atomexNetwork;\n    this.authorizationManager = options.authorizationManager;\n    this.currenciesProvider = options.currenciesProvider;\n    this.exchangeSymbolsProvider = options.exchangeSymbolsProvider;\n    this.apiBaseUrl = options.apiBaseUrl;\n    this.httpClient = new HttpClient(this.apiBaseUrl);\n  }\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  async start() {\n    if (this.isStarted)\n      return;\n\n    this._isStarted = true;\n  }\n\n  stop(): void {\n    if (!this.isStarted)\n      return;\n\n    this._isStarted = false;\n  }\n\n  async getOrder(accountAddress: string, orderId: number): Promise<Order | undefined> {\n    const urlPath = `/v1/Orders/${orderId}`;\n    const authToken = this.getRequiredAuthToken(accountAddress);\n    const orderDto = await this.httpClient.request<OrderDto>({ urlPath, authToken });\n\n    return orderDto ? mapOrderDtoToOrder(orderDto, this.exchangeSymbolsProvider) : undefined;\n  }\n\n  async getOrders(accountAddress: string, selector?: OrdersSelector | undefined): Promise<Order[]> {\n    const urlPath = '/v1/Orders';\n    const authToken = this.getRequiredAuthToken(accountAddress);\n    const params = {\n      ...selector,\n      sortAsc: undefined,\n      sort: selector?.sortAsc !== undefined\n        ? selector.sortAsc ? 'Asc' : 'Desc'\n        : undefined,\n    };\n\n    const orderDtos = await this.httpClient.request<OrderDto[]>({ urlPath, authToken, params });\n\n    return orderDtos ? mapOrderDtosToOrders(orderDtos, this.exchangeSymbolsProvider) : [];\n  }\n\n  async getSymbols(): Promise<ExchangeSymbol[]> {\n    const urlPath = '/v1/Symbols';\n    const symbolDtos = await this.httpClient.request<SymbolDto[]>({ urlPath });\n\n    return symbolDtos ? mapSymbolDtosToSymbols(symbolDtos, this.currenciesProvider) : [];\n  }\n\n  getTopOfBook(symbols?: string[]): Promise<Quote[]>;\n  getTopOfBook(directions?: CurrencyDirection[]): Promise<Quote[]>;\n  async getTopOfBook(symbolsOrDirections?: string[] | CurrencyDirection[]): Promise<Quote[]> {\n    const urlPath = '/v1/MarketData/quotes';\n    let symbols: string[] | undefined = undefined;\n\n    if (symbolsOrDirections?.length) {\n      if (typeof symbolsOrDirections[0] === 'string')\n        symbols = symbolsOrDirections as string[];\n      else {\n        const exchangeSymbols = this.exchangeSymbolsProvider.getSymbolsMap();\n        symbols = (symbolsOrDirections as CurrencyDirection[])\n          .map(d => symbolsHelper.convertFromAndToCurrenciesToSymbolAndSide(exchangeSymbols, d.from, d.to)[0].name);\n      }\n    }\n\n    const params = { symbols: symbols?.join(',') };\n\n    const quoteDtos = await this.httpClient.request<QuoteDto[]>({ urlPath, params });\n\n    return quoteDtos ? mapQuoteDtosToQuotes(quoteDtos) : [];\n  }\n\n  getOrderBook(symbol: string): Promise<OrderBook | undefined>;\n  getOrderBook(direction: CurrencyDirection): Promise<OrderBook | undefined>;\n  async getOrderBook(symbolOrDirection: string | CurrencyDirection): Promise<OrderBook | undefined> {\n    const urlPath = '/v1/MarketData/book';\n    let symbol: string;\n\n    if (typeof symbolOrDirection === 'string')\n      symbol = symbolOrDirection;\n    else {\n      const exchangeSymbols = this.exchangeSymbolsProvider.getSymbolsMap();\n      symbol = symbolsHelper.convertFromAndToCurrenciesToSymbolAndSide(exchangeSymbols, symbolOrDirection.from, symbolOrDirection.to)[0].name;\n    }\n\n    const params = { symbol };\n    const orderBookDto = await this.httpClient.request<OrderBookDto>({ urlPath, params });\n\n    return orderBookDto ? mapOrderBookDtoToOrderBook(orderBookDto) : undefined;\n  }\n\n  async addOrder(accountAddress: string, newOrderRequest: FilledNewOrderRequest): Promise<number> {\n    const urlPath = '/v1/Orders';\n    const authToken = this.getRequiredAuthToken(accountAddress);\n    let symbol: string | undefined = undefined;\n    let side: Side | undefined = undefined;\n    let amountBigNumber: BigNumber;\n    let priceBigNumber: BigNumber;\n\n    if (ordersHelper.isOrderPreview(newOrderRequest.orderBody)) {\n      symbol = newOrderRequest.orderBody.symbol;\n      side = newOrderRequest.orderBody.side;\n\n      const baseCurrencyId = symbolsHelper.getBaseQuoteCurrenciesBySymbol(symbol)[0];\n      const directionName: 'from' | 'to' = baseCurrencyId === newOrderRequest.orderBody.from.currencyId ? 'from' : 'to';\n\n      amountBigNumber = newOrderRequest.orderBody[directionName].amount;\n      priceBigNumber = newOrderRequest.orderBody[directionName].price;\n    }\n    else {\n      [symbol, side] = [newOrderRequest.orderBody.symbol, newOrderRequest.orderBody.side];\n      amountBigNumber = newOrderRequest.orderBody.amount;\n      priceBigNumber = newOrderRequest.orderBody.price;\n    }\n\n    // TODO: move to the mapper\n    const payload: NewOrderRequestDto = {\n      clientOrderId: newOrderRequest.clientOrderId,\n      symbol,\n      side,\n      type: newOrderRequest.orderBody.type,\n      requisites: newOrderRequest.requisites ? {\n        secretHash: newOrderRequest.requisites.secretHash,\n        receivingAddress: newOrderRequest.requisites.receivingAddress,\n        refundAddress: newOrderRequest.requisites.refundAddress,\n        rewardForRedeem: newOrderRequest.requisites.rewardForRedeem.toNumber(),\n        lockTime: newOrderRequest.requisites.lockTime,\n        quoteCurrencyContract: newOrderRequest.requisites.quoteCurrencyContract,\n        baseCurrencyContract: newOrderRequest.requisites.baseCurrencyContract\n      } : undefined,\n      proofsOfFunds: newOrderRequest.proofsOfFunds.map<ProofOfFundsDto>(proof => ({\n        address: proof.address,\n        currency: proof.currency,\n        timeStamp: proof.timeStamp,\n        message: proof.message,\n        publicKey: proof.publicKey,\n        signature: proof.signature,\n        algorithm: proof.algorithm\n      })),\n      qty: amountBigNumber.toNumber(),\n      price: priceBigNumber.toNumber()\n    };\n\n    const newOrderDto = await this.httpClient.request<CreatedOrderDto>({\n      urlPath,\n      authToken,\n      method: 'POST',\n      payload\n    });\n\n    if (newOrderDto === undefined)\n      throw new Error('Unexpected response dto');\n\n    return newOrderDto.orderId;\n  }\n\n  async cancelOrder(accountAddress: string, cancelOrderRequest: CancelOrderRequest): Promise<boolean> {\n    const urlPath = `/v1/Orders/${cancelOrderRequest.orderId}`;\n    const authToken = this.getRequiredAuthToken(accountAddress);\n    let symbol: string | undefined = undefined;\n    let side: Side | undefined = undefined;\n\n    if (cancelOrderRequest.symbol && cancelOrderRequest.side)\n      [symbol, side] = [cancelOrderRequest.symbol, cancelOrderRequest.side];\n    else if (cancelOrderRequest.from && cancelOrderRequest.to) {\n      const exchangeSymbols = this.exchangeSymbolsProvider.getSymbolsMap();\n      const exchangeSymbolAndSide = symbolsHelper.convertFromAndToCurrenciesToSymbolAndSide(exchangeSymbols, cancelOrderRequest.from, cancelOrderRequest.to);\n      symbol = exchangeSymbolAndSide[0].name;\n      side = exchangeSymbolAndSide[1];\n    }\n    else\n      throw new Error('Invalid cancelOrderRequest argument passed');\n\n    const params = { symbol, side };\n\n    const isSuccess = await this.httpClient.request<boolean>({\n      urlPath,\n      authToken,\n      params,\n      method: 'DELETE'\n    });\n\n    if (isSuccess === undefined)\n      throw new Error('Unexpected response dto');\n\n    return isSuccess;\n  }\n\n  async cancelAllOrders(accountAddress: string, cancelAllOrdersRequest: CancelAllOrdersRequest): Promise<number> {\n    const urlPath = '/v1/Orders';\n    const authToken = this.getRequiredAuthToken(accountAddress);\n\n    let symbol: string | undefined = undefined;\n    let side: CancelAllSide | undefined = undefined;\n\n    if (cancelAllOrdersRequest.symbol && cancelAllOrdersRequest.side)\n      [symbol, side] = [cancelAllOrdersRequest.symbol, cancelAllOrdersRequest.side];\n    else if (cancelAllOrdersRequest.from && cancelAllOrdersRequest.to) {\n      const exchangeSymbols = this.exchangeSymbolsProvider.getSymbolsMap();\n      const exchangeSymbolAndSide = symbolsHelper.convertFromAndToCurrenciesToSymbolAndSide(exchangeSymbols, cancelAllOrdersRequest.from, cancelAllOrdersRequest.to);\n      symbol = exchangeSymbolAndSide[0].name;\n      side = exchangeSymbolAndSide[1];\n\n      if (cancelAllOrdersRequest.cancelAllDirections)\n        side = 'All';\n    }\n    else\n      throw new Error('Invalid cancelAllOrdersRequest argument passed');\n\n    const canceledOrdersCount = await this.httpClient.request<number>({\n      urlPath,\n      authToken,\n      params: {\n        symbol,\n        side,\n        forAllConnections: cancelAllOrdersRequest.forAllConnections\n      },\n      method: 'DELETE'\n    });\n\n    if (canceledOrdersCount === undefined)\n      throw new Error('Unexpected response dto');\n\n    return canceledOrdersCount;\n  }\n\n  getSwapTransactions(_swap: Swap): Promise<readonly Transaction[]> {\n    throw new Error('Method not implemented.');\n  }\n\n  async getSwap(swapId: number, accountAddress: string): Promise<Swap | undefined>;\n  async getSwap(swapId: number, accountAddresses: string[]): Promise<Swap | undefined>;\n  async getSwap(swapId: number, addressOrAddresses: string | string[]): Promise<Swap | undefined> {\n    const urlPath = `/v1/Swaps/${swapId}`;\n\n    const userIds = this.getUserIds(addressOrAddresses);\n    const params = {\n      userIds: userIds.join(',')\n    };\n\n    const swapDto = await this.httpClient.request<SwapDto>({\n      urlPath,\n      params\n    });\n\n    return swapDto ? mapSwapDtoToSwap(swapDto, this.exchangeSymbolsProvider) : undefined;\n  }\n\n  async getSwaps(accountAddress: string, selector?: SwapsSelector): Promise<Swap[]>;\n  async getSwaps(accountAddresses: string[], selector?: SwapsSelector): Promise<Swap[]>;\n  async getSwaps(addressOrAddresses: string | string[], selector?: SwapsSelector): Promise<Swap[]> {\n    const urlPath = '/v1/Swaps';\n\n    const userIds = this.getUserIds(addressOrAddresses);\n    const params = {\n      ...selector,\n      sortAsc: undefined,\n      sort: selector?.sortAsc !== undefined\n        ? selector.sortAsc ? 'Asc' : 'Desc'\n        : undefined,\n      userIds: userIds.join(',')\n    };\n\n    const swapDtos = await this.httpClient.request<SwapDto[]>({\n      urlPath,\n      params\n    });\n\n    return swapDtos ? mapSwapDtosToSwaps(swapDtos, this.exchangeSymbolsProvider) : [];\n  }\n\n  private getUserIds(addressOrAddresses: string | string[]) {\n    const accountAddresses = Array.isArray(addressOrAddresses) ? addressOrAddresses : [addressOrAddresses];\n\n    const userIds = accountAddresses\n      .map(address => this.authorizationManager.getAuthToken(address)?.userId)\n      .filter(userId => userId);\n\n    if (!userIds.length)\n      throw new Error('Incorrect accountAddresses');\n\n    return userIds;\n  }\n\n  private getRequiredAuthToken(accountAddress: string): string {\n    const authToken = this.authorizationManager.getAuthToken(accountAddress)?.value;\n\n    if (!authToken)\n      throw new Error(`Cannot find auth token for address: ${accountAddress}`);\n\n    return authToken;\n  }\n}\n", "import { EventEmitter } from '../../core/index';\nimport type { WebSocketRequestDto, WebSocketResponseDto } from '../dtos';\n\nexport interface WebSocketClientEvents {\n  messageReceived: EventEmitter<readonly [message: WebSocketResponseDto]>;\n  closed: EventEmitter<readonly [socket: WebSocketClient, event: CloseEvent]>;\n}\n\nexport class WebSocketClient {\n  readonly events: WebSocketClientEvents = {\n    messageReceived: new EventEmitter(),\n    closed: new EventEmitter()\n  };\n\n  protected _socket: WebSocket | undefined;\n\n  protected get socket(): WebSocket {\n    if (!this._socket)\n      throw new Error('Internal websocket is not created. Use the connect method first');\n\n    return this._socket;\n  }\n\n  constructor(\n    protected readonly url: string | URL,\n    protected readonly authToken?: string,\n  ) {\n  }\n\n  async connect(): Promise<void> {\n    this.disconnect();\n    return new Promise(resolve => {\n      const protocols = this.authToken ? ['access_token', this.authToken] : undefined;\n      this._socket = new WebSocket(this.url, protocols);\n      this.socket.addEventListener('message', this.onMessageReceived);\n      this.socket.addEventListener('error', this.onError);\n      this.socket.addEventListener('close', this.onClosed);\n\n      this.socket.addEventListener('open', () => resolve());\n    });\n  }\n\n  disconnect() {\n    if (this._socket) {\n      this.socket.removeEventListener('message', this.onMessageReceived);\n      this.socket.removeEventListener('error', this.onError);\n      this.socket.removeEventListener('close', this.onClosed);\n      this.socket.close();\n    }\n  }\n\n  subscribe(stream: string) {\n    const message: WebSocketRequestDto = {\n      method: 'subscribe',\n      data: stream,\n      requestId: Date.now()\n    };\n\n    this.socket.send(JSON.stringify(message));\n  }\n\n  unsubscribe(stream: string) {\n    const message: WebSocketRequestDto = {\n      method: 'unsubscribe',\n      data: stream,\n      requestId: Date.now()\n    };\n\n    this.socket.send(JSON.stringify(message));\n  }\n\n  protected onMessageReceived = (event: MessageEvent<string>) => {\n    this.events.messageReceived.emit(JSON.parse(event.data));\n  };\n\n  protected onError(event: Event) {\n    throw new Error(`Websocket received error: ${JSON.stringify(event)}`);\n  }\n\n  protected onClosed = (event: CloseEvent) => {\n    this.events.closed.emit(this, event);\n  };\n}\n", "import type { AuthorizationManager, AuthToken } from '../../authorization/index';\nimport { EventEmitter } from '../../core/index';\nimport type { WebSocketResponseDto } from '../dtos';\nimport { WebSocketClient } from './webSocketClient';\n\nexport interface ExchangeWebSocketClientEvents {\n  messageReceived: EventEmitter<readonly [message: WebSocketResponseDto]>;\n}\n\nexport class ExchangeWebSocketClient {\n  protected static readonly EXCHANGE_URL_PATH = '/ws/exchange';\n\n  readonly events: ExchangeWebSocketClientEvents = {\n    messageReceived: new EventEmitter()\n  };\n\n  protected readonly sockets: Map<string, WebSocketClient> = new Map();\n\n  private _isStarted = false;\n\n  constructor(\n    protected readonly webSocketApiBaseUrl: string,\n    protected readonly authorizationManager: AuthorizationManager\n  ) {\n  }\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  async start() {\n    if (this.isStarted)\n      return;\n\n    this.subscribeOnAuthEvents();\n\n    this._isStarted = true;\n  }\n\n  stop() {\n    if (!this.isStarted)\n      return;\n\n    this.sockets.forEach((_, userId) => {\n      this.removeSocket(userId);\n    });\n\n    this._isStarted = false;\n  }\n\n  protected subscribeOnAuthEvents() {\n    this.authorizationManager.events.authorized.addListener(this.onAuthorized);\n    this.authorizationManager.events.unauthorized.addListener(this.onUnauthorized);\n  }\n\n  protected onAuthorized = async (authToken: AuthToken) => {\n    this.removeSocket(authToken.userId);\n\n    const socket = new WebSocketClient(new URL(ExchangeWebSocketClient.EXCHANGE_URL_PATH, this.webSocketApiBaseUrl), authToken.value);\n    socket.events.messageReceived.addListener(this.onSocketMessageReceived);\n    socket.events.closed.addListener(this.onClosed);\n\n    this.sockets.set(authToken.userId, socket);\n    await socket.connect();\n  };\n\n  protected onUnauthorized = (authToken: AuthToken) => {\n    this.removeSocket(authToken.userId);\n  };\n\n  protected removeSocket(userId: string) {\n    const socket = this.sockets.get(userId);\n\n    if (socket) {\n      socket.events.messageReceived.removeListener(this.onSocketMessageReceived);\n      socket.events.closed.removeListener(this.onClosed);\n      this.sockets.delete(userId);\n      socket.disconnect();\n    }\n  }\n\n  protected onSocketMessageReceived = (message: WebSocketResponseDto) => {\n    this.events.messageReceived.emit(message);\n  };\n\n  protected onClosed = (socket: WebSocketClient, _event: CloseEvent) => {\n    setTimeout(() => {\n      socket.connect();\n    }, 1000);\n  };\n}\n", "import { EventEmitter } from '../../core/index';\nimport type { WebSocketResponseDto } from '../dtos';\nimport { WebSocketClient } from './webSocketClient';\n\nexport interface MarketDataWebSocketClientEvents {\n  messageReceived: EventEmitter<readonly [message: WebSocketResponseDto]>;\n}\n\nexport class MarketDataWebSocketClient {\n  protected static readonly MARKET_DATA_URL_PATH = '/ws/marketdata';\n  protected static readonly TOP_OF_BOOK_STREAM = 'topOfBook';\n  protected static readonly ORDER_BOOK_STREAM = 'orderBook';\n\n  readonly events: MarketDataWebSocketClientEvents = {\n    messageReceived: new EventEmitter()\n  };\n\n  protected socket: WebSocketClient;\n\n  private _isStarted = false;\n\n  constructor(\n    protected readonly webSocketApiBaseUrl: string\n  ) {\n    this.socket = new WebSocketClient(new URL(MarketDataWebSocketClient.MARKET_DATA_URL_PATH, this.webSocketApiBaseUrl));\n  }\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  async start(): Promise<void> {\n    if (this.isStarted)\n      return;\n\n    this.socket.events.messageReceived.addListener(this.onSocketMessageReceived);\n    this.socket.events.closed.addListener(this.onSocketClosed);\n    await this.socket.connect();\n\n    this.subscribeOnStreams(this.socket);\n\n    this._isStarted = true;\n  }\n\n  stop() {\n    if (!this.isStarted)\n      return;\n\n    this.socket.events.messageReceived.removeListener(this.onSocketMessageReceived);\n    this.socket.events.closed.removeListener(this.onSocketClosed);\n    this.socket.disconnect();\n\n    this._isStarted = false;\n  }\n\n  protected subscribeOnStreams(socket: WebSocketClient) {\n    socket.subscribe(MarketDataWebSocketClient.TOP_OF_BOOK_STREAM);\n    socket.subscribe(MarketDataWebSocketClient.ORDER_BOOK_STREAM);\n  }\n\n  protected onSocketClosed = (socket: WebSocketClient, _event: CloseEvent) => {\n    setTimeout(async () => {\n      await socket.connect();\n      this.subscribeOnStreams(socket);\n    }, 1000);\n  };\n\n  protected onSocketMessageReceived = (message: WebSocketResponseDto) => {\n    this.events.messageReceived.emit(message);\n  };\n}\n", "import type { AuthorizationManager } from '../../authorization/index';\nimport type { Transaction } from '../../blockchain/index';\nimport type { AtomexNetwork, CurrenciesProvider } from '../../common/index';\nimport { DeferredEventEmitter, EventEmitter, ToDeferredEventEmitter, type ToEventEmitter } from '../../core';\nimport type {\n  Order, OrderBook, Quote, ExchangeSymbol, FilledNewOrderRequest,\n  OrdersSelector, CancelOrderRequest,\n  CancelAllOrdersRequest, SwapsSelector, CurrencyDirection, ExchangeSymbolsProvider, ManagedOrderBookProvider\n} from '../../exchange/index';\nimport type { Swap } from '../../swaps/index';\nimport type { AtomexClient } from '../atomexClient';\nimport type { OrderBookDto, WebSocketOrderBookEntryDto, WebSocketResponseDto } from '../dtos';\nimport { mapOrderBookDtoToOrderBook, mapQuoteDtosToQuotes, mapSwapDtoToSwap, mapWebSocketOrderBookEntryDtoToOrderBooks, mapWebSocketOrderDtoToOrder } from '../helpers';\nimport { ExchangeWebSocketClient } from './exchangeWebSocketClient';\nimport { MarketDataWebSocketClient } from './marketDataWebSocketClient';\n\nexport interface WebSocketAtomexClientOptions {\n  atomexNetwork: AtomexNetwork;\n  authorizationManager: AuthorizationManager;\n  currenciesProvider: CurrenciesProvider;\n  exchangeSymbolsProvider: ExchangeSymbolsProvider;\n  orderBookProvider: ManagedOrderBookProvider;\n  webSocketApiBaseUrl: string;\n}\n\nexport class WebSocketAtomexClient implements AtomexClient {\n  readonly atomexNetwork: AtomexNetwork;\n  readonly events: AtomexClient['events'] = {\n    swapUpdated: new EventEmitter(),\n    orderUpdated: new EventEmitter(),\n    orderBookSnapshot: new EventEmitter(),\n    orderBookUpdated: new DeferredEventEmitter(),\n    topOfBookUpdated: new EventEmitter()\n  };\n\n  protected readonly authorizationManager: AuthorizationManager;\n  protected readonly exchangeSymbolsProvider: ExchangeSymbolsProvider;\n  protected readonly currenciesProvider: CurrenciesProvider;\n  protected readonly webSocketApiBaseUrl: string;\n  protected readonly marketDataWebSocketClient: MarketDataWebSocketClient;\n  protected readonly exchangeWebSocketClient: ExchangeWebSocketClient;\n  protected readonly orderBookProvider: ManagedOrderBookProvider;\n\n  private _isStarted = false;\n\n  constructor(options: WebSocketAtomexClientOptions) {\n    this.atomexNetwork = options.atomexNetwork;\n    this.authorizationManager = options.authorizationManager;\n    this.currenciesProvider = options.currenciesProvider;\n    this.exchangeSymbolsProvider = options.exchangeSymbolsProvider;\n    this.orderBookProvider = options.orderBookProvider;\n    this.webSocketApiBaseUrl = options.webSocketApiBaseUrl;\n\n    this.exchangeWebSocketClient = new ExchangeWebSocketClient(this.webSocketApiBaseUrl, this.authorizationManager);\n    this.marketDataWebSocketClient = new MarketDataWebSocketClient(this.webSocketApiBaseUrl);\n  }\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  async start() {\n    if (this.isStarted)\n      return;\n\n    this.exchangeWebSocketClient.events.messageReceived.addListener(this.onSocketMessageReceived);\n    this.marketDataWebSocketClient.events.messageReceived.addListener(this.onSocketMessageReceived);\n\n    await Promise.all([\n      this.exchangeWebSocketClient.start(),\n      this.marketDataWebSocketClient.start()\n    ]);\n\n    this._isStarted = true;\n  }\n\n  stop(): void {\n    if (!this.isStarted)\n      return;\n\n    this.exchangeWebSocketClient.events.messageReceived.removeListener(this.onSocketMessageReceived);\n    this.marketDataWebSocketClient.events.messageReceived.removeListener(this.onSocketMessageReceived);\n\n    this.exchangeWebSocketClient.stop();\n    this.marketDataWebSocketClient.stop();\n\n    this._isStarted = false;\n  }\n\n  getOrder(_accountAddress: string, _orderId: number): Promise<Order | undefined> {\n    throw new Error('Method not implemented.');\n  }\n\n  getOrders(_accountAddress: string, _selector?: OrdersSelector | undefined): Promise<Order[]> {\n    throw new Error('Method not implemented.');\n  }\n\n  getSymbols(): Promise<ExchangeSymbol[]> {\n    throw new Error('Method not implemented.');\n  }\n\n  getTopOfBook(symbols?: string[]): Promise<Quote[]>;\n  getTopOfBook(directions?: CurrencyDirection[]): Promise<Quote[]>;\n  getTopOfBook(_symbolsOrDirections?: string[] | CurrencyDirection[]): Promise<Quote[]> {\n    throw new Error('Method not implemented.');\n  }\n\n  getOrderBook(symbol: string): Promise<OrderBook | undefined>;\n  getOrderBook(direction: CurrencyDirection): Promise<OrderBook | undefined>;\n  async getOrderBook(_symbolOrDirection: string | CurrencyDirection): Promise<OrderBook | undefined> {\n    throw new Error('Method not implemented.');\n  }\n\n  addOrder(_accountAddress: string, _newOrderRequest: FilledNewOrderRequest): Promise<number> {\n    throw new Error('Method not implemented.');\n  }\n\n  cancelOrder(_accountAddress: string, _cancelOrderRequest: CancelOrderRequest): Promise<boolean> {\n    throw new Error('Method not implemented.');\n  }\n\n  cancelAllOrders(_accountAddress: string, _cancelAllOrdersRequest: CancelAllOrdersRequest): Promise<number> {\n    throw new Error('Method not implemented.');\n  }\n\n  getSwapTransactions(_swap: Swap): Promise<readonly Transaction[]> {\n    throw new Error('Method not implemented.');\n  }\n\n  getSwap(swapId: number, accountAddress: string): Promise<Swap | undefined>;\n  getSwap(swapId: number, accountAddresses: string[]): Promise<Swap | undefined>;\n  getSwap(_swapId: number, _addressOrAddresses: string | string[]): Promise<Swap | undefined> {\n    throw new Error('Method not implemented.');\n  }\n\n  getSwaps(accountAddress: string, selector?: SwapsSelector): Promise<Swap[]>;\n  getSwaps(accountAddresses: string[], selector?: SwapsSelector): Promise<Swap[]>;\n  getSwaps(_addressOrAddresses: string | string[], _selector?: SwapsSelector): Promise<Swap[]> {\n    throw new Error('Method not implemented.');\n  }\n\n  protected readonly onSocketMessageReceived = (message: WebSocketResponseDto) => {\n    switch (message.event) {\n      case 'order':\n        (this.events.orderUpdated as ToEventEmitter<typeof this.events.orderUpdated>).emit(\n          mapWebSocketOrderDtoToOrder(message.data, this.exchangeSymbolsProvider)\n        );\n        break;\n\n      case 'swap':\n        (this.events.swapUpdated as ToEventEmitter<typeof this.events.swapUpdated>).emit(\n          mapSwapDtoToSwap(message.data, this.exchangeSymbolsProvider)\n        );\n        break;\n\n      case 'topOfBook':\n        (this.events.topOfBookUpdated as ToEventEmitter<typeof this.events.topOfBookUpdated>).emit(\n          mapQuoteDtosToQuotes(message.data)\n        );\n        break;\n\n      case 'snapshot':\n        this.onOrderBookSnapshotReceived(message.data);\n        break;\n\n      case 'entries':\n        this.onOrderBookEntriesReceived(message.data);\n        break;\n    }\n  };\n\n  protected onOrderBookSnapshotReceived(orderBookDto: OrderBookDto) {\n    const orderBook = mapOrderBookDtoToOrderBook(orderBookDto);\n    this.orderBookProvider.setOrderBook(orderBook.symbol, orderBook);\n    (this.events.orderBookSnapshot as ToEventEmitter<typeof this.events.orderBookSnapshot>).emit(orderBook);\n  }\n\n  protected onOrderBookEntriesReceived(entryDtos: WebSocketOrderBookEntryDto[]) {\n    const updatedOrderBooks = mapWebSocketOrderBookEntryDtoToOrderBooks(entryDtos, this.orderBookProvider);\n    for (const updatedOrderBook of updatedOrderBooks) {\n      this.orderBookProvider.setOrderBook(updatedOrderBook.symbol, updatedOrderBook);\n      (this.events.orderBookUpdated as ToDeferredEventEmitter<string, typeof this.events.orderBookUpdated>).emit(updatedOrderBook.symbol, updatedOrderBook);\n    }\n  }\n}\n", "import type { Transaction } from '../blockchain/index';\nimport type { AtomexNetwork } from '../common/index';\nimport type {\n  Order, OrderBook, Quote, ExchangeSymbol, FilledNewOrderRequest,\n  OrdersSelector, CancelOrderRequest, CancelAllOrdersRequest,\n  SwapsSelector, CurrencyDirection\n} from '../exchange/index';\nimport type { Swap } from '../swaps/index';\nimport { atomexUtils } from '../utils';\nimport type { AtomexClient } from './atomexClient';\n\nexport class MixedApiAtomexClient implements AtomexClient {\n  readonly events: AtomexClient['events'];\n\n  private _isStarted = false;\n\n  constructor(\n    readonly atomexNetwork: AtomexNetwork,\n    protected readonly restAtomexClient: AtomexClient,\n    protected readonly webSocketAtomexClient: AtomexClient\n  ) {\n    atomexUtils.ensureNetworksAreSame(this, restAtomexClient);\n    atomexUtils.ensureNetworksAreSame(this, webSocketAtomexClient);\n\n    this.events = {\n      swapUpdated: this.webSocketAtomexClient.events.swapUpdated,\n      orderBookSnapshot: this.webSocketAtomexClient.events.orderBookSnapshot,\n      orderBookUpdated: this.webSocketAtomexClient.events.orderBookUpdated,\n      orderUpdated: this.webSocketAtomexClient.events.orderUpdated,\n      topOfBookUpdated: this.webSocketAtomexClient.events.topOfBookUpdated\n    };\n  }\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  async start() {\n    if (this.isStarted)\n      return;\n\n    await Promise.all([\n      this.webSocketAtomexClient.start(),\n      this.restAtomexClient.start()\n    ]);\n\n    this._isStarted = true;\n  }\n\n  stop(): void {\n    if (!this.isStarted)\n      return;\n\n    this.webSocketAtomexClient.stop();\n    this.restAtomexClient.stop();\n\n    this._isStarted = false;\n  }\n\n  getOrder(accountAddress: string, orderId: number): Promise<Order | undefined> {\n    return this.restAtomexClient.getOrder(accountAddress, orderId);\n  }\n\n  getOrders(accountAddress: string, selector?: OrdersSelector | undefined): Promise<Order[]> {\n    return this.restAtomexClient.getOrders(accountAddress, selector);\n  }\n\n  getSymbols(): Promise<ExchangeSymbol[]> {\n    return this.restAtomexClient.getSymbols();\n  }\n\n  getTopOfBook(symbols?: string[]): Promise<Quote[]>;\n  getTopOfBook(directions?: CurrencyDirection[]): Promise<Quote[]>;\n  getTopOfBook(symbolsOrDirections?: string[] | CurrencyDirection[]): Promise<Quote[]> {\n    return (this.restAtomexClient.getTopOfBook as (symbolsOrDirections?: string[] | CurrencyDirection[]) => Promise<Quote[]>)(symbolsOrDirections);\n  }\n\n  getOrderBook(symbol: string): Promise<OrderBook | undefined>;\n  getOrderBook(direction: CurrencyDirection): Promise<OrderBook | undefined>;\n  async getOrderBook(symbolOrDirection: string | CurrencyDirection): Promise<OrderBook | undefined> {\n    return (this.restAtomexClient.getOrderBook as (symbolOrDirection: string | CurrencyDirection) => Promise<OrderBook | undefined>)(symbolOrDirection);\n  }\n\n  addOrder(accountAddress: string, newOrderRequest: FilledNewOrderRequest): Promise<number> {\n    return this.restAtomexClient.addOrder(accountAddress, newOrderRequest);\n  }\n\n  cancelOrder(accountAddress: string, cancelOrderRequest: CancelOrderRequest): Promise<boolean> {\n    return this.restAtomexClient.cancelOrder(accountAddress, cancelOrderRequest);\n  }\n\n  cancelAllOrders(accountAddress: string, cancelAllOrdersRequest: CancelAllOrdersRequest): Promise<number> {\n    return this.restAtomexClient.cancelAllOrders(accountAddress, cancelAllOrdersRequest);\n  }\n\n  getSwapTransactions(swap: Swap): Promise<readonly Transaction[]> {\n    return this.restAtomexClient.getSwapTransactions(swap);\n  }\n\n  getSwap(swapId: number, accountAddress: string): Promise<Swap | undefined>;\n  getSwap(swapId: number, accountAddresses: string[]): Promise<Swap | undefined>;\n  getSwap(swapId: number, addressOrAddresses: string | string[]): Promise<Swap | undefined> {\n    return (this.restAtomexClient.getSwap as (swapId: number, addressOrAddresses: string | string[]) => Promise<Swap | undefined>)(swapId, addressOrAddresses);\n  }\n\n  getSwaps(accountAddress: string, selector?: SwapsSelector): Promise<Swap[]>;\n  getSwaps(accountAddresses: string[], selector?: SwapsSelector): Promise<Swap[]>;\n  getSwaps(addressOrAddresses: string | string[], selector?: SwapsSelector): Promise<Swap[]> {\n    return (this.restAtomexClient.getSwaps as (addressOrAddresses: string | string[], selector?: SwapsSelector) => Promise<Swap[]>)(addressOrAddresses, selector);\n  }\n}\n", "import type { AtomexContext } from '../../atomex/index';\nimport { MixedApiAtomexClient, RestAtomexClient, WebSocketAtomexClient } from '../../clients/index';\nimport type { DeepReadonly } from '../../core/index';\n\nexport type ExchangeServiceDefaultComponentOptions = DeepReadonly<{\n  apiBaseUrl: string;\n  webSocketApiBaseUrl: string;\n}>;\n\nexport const createDefaultExchangeService = (\n  atomexContext: AtomexContext,\n  options: ExchangeServiceDefaultComponentOptions\n) => {\n  return new MixedApiAtomexClient(\n    atomexContext.atomexNetwork,\n    new RestAtomexClient({\n      atomexNetwork: atomexContext.atomexNetwork,\n      authorizationManager: atomexContext.managers.authorizationManager,\n      currenciesProvider: atomexContext.providers.currenciesProvider,\n      exchangeSymbolsProvider: atomexContext.providers.exchangeSymbolsProvider,\n      apiBaseUrl: options.apiBaseUrl,\n    }),\n    new WebSocketAtomexClient({\n      atomexNetwork: atomexContext.atomexNetwork,\n      authorizationManager: atomexContext.managers.authorizationManager,\n      currenciesProvider: atomexContext.providers.currenciesProvider,\n      exchangeSymbolsProvider: atomexContext.providers.exchangeSymbolsProvider,\n      orderBookProvider: atomexContext.providers.orderBookProvider,\n      webSocketApiBaseUrl: options.webSocketApiBaseUrl\n    })\n  );\n};\n", "export enum AuthTokenSource {\n  Local = 1 << 0,\n  Remote = 1 << 1,\n\n  All = Local | Remote\n}\n", "import type { WalletsManager } from '../blockchain/index';\nimport type { AtomexService, AtomexNetwork } from '../common/index';\nimport { EventEmitter, type ToEventEmitters, type PublicEventEmitter } from '../core/index';\nimport type { AuthorizationManagerStore } from '../stores/index';\nimport { atomexUtils, prepareTimeoutDuration } from '../utils/index';\nimport {\n  AuthenticationRequestData, AuthenticationResponseData, AuthorizationManagerOptions,\n  AuthToken, AuthTokenData, AuthTokenSource, AuthorizationParameters\n} from './models/index';\n\ninterface AuthorizationManagerEvents {\n  readonly authorized: PublicEventEmitter<readonly [authToken: AuthToken]>;\n  readonly unauthorized: PublicEventEmitter<readonly [authToken: AuthToken]>;\n  readonly authTokenExpiring: PublicEventEmitter<readonly [expiringAuthToken: AuthToken]>;\n  readonly authTokenExpired: PublicEventEmitter<readonly [expiredAuthToken: AuthToken]>;\n}\n\nexport class AuthorizationManager implements AtomexService {\n  readonly events: AuthorizationManagerEvents = {\n    authorized: new EventEmitter(),\n    unauthorized: new EventEmitter(),\n    authTokenExpiring: new EventEmitter(),\n    authTokenExpired: new EventEmitter()\n  };\n\n  protected static readonly DEFAULT_AUTH_MESSAGE = 'Signing in ';\n  protected static readonly DEFAULT_GET_AUTH_TOKEN_URI = '/v1/token';\n  protected static readonly DEFAULT_EXPIRING_NOTIFICATION_TIME_IN_SECONDS = 60;\n\n  readonly atomexNetwork: AtomexNetwork;\n\n  protected readonly walletsManager: WalletsManager;\n  protected readonly store: AuthorizationManagerStore;\n  protected readonly authorizationUrl: URL;\n  protected readonly expiringNotificationTimeInSeconds: number;\n\n  private readonly _authTokenData: Map<string, AuthTokenData> = new Map();\n\n  private _isStarted = false;\n\n  constructor(options: AuthorizationManagerOptions) {\n    this.atomexNetwork = options.atomexNetwork;\n    this.store = options.store;\n    this.walletsManager = options.walletsManager;\n\n    atomexUtils.ensureNetworksAreSame(this, this.walletsManager);\n\n    this.authorizationUrl = new URL(AuthorizationManager.DEFAULT_GET_AUTH_TOKEN_URI, options.authorizationBaseUrl);\n    this.expiringNotificationTimeInSeconds = options.expiringNotificationTimeInSeconds || AuthorizationManager.DEFAULT_EXPIRING_NOTIFICATION_TIME_IN_SECONDS;\n  }\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  async start(): Promise<void> {\n    if (this.isStarted)\n      return;\n\n    this._isStarted = true;\n  }\n\n  stop(): void {\n    if (!this.isStarted)\n      return;\n\n    for (const authTokenDataTuple of this.authTokenData)\n      this.untrackAuthToken(authTokenDataTuple[1].watcherId);\n\n    this._isStarted = false;\n  }\n\n  protected get authTokenData(): ReadonlyMap<string, AuthTokenData> {\n    return this._authTokenData;\n  }\n\n  getAuthToken(address: string): AuthToken | undefined {\n    return this.authTokenData.get(address)?.authToken;\n  }\n\n  async authorize({\n    address,\n    authTokenSource = AuthTokenSource.All,\n    blockchain,\n    authMessage = AuthorizationManager.DEFAULT_AUTH_MESSAGE\n  }: AuthorizationParameters): Promise<AuthToken | undefined> {\n    if ((authTokenSource & AuthTokenSource.Local) === AuthTokenSource.Local) {\n      const authToken = this.getAuthToken(address) || (await this.loadAuthTokenFromStore(address));\n\n      if (authToken && !this.isTokenExpiring(authToken))\n        return authToken;\n    }\n\n    if ((authTokenSource & AuthTokenSource.Remote) !== AuthTokenSource.Remote)\n      return undefined;\n\n    const wallet = await this.walletsManager.getWallet(address, blockchain);\n    if (!wallet)\n      throw new Error(`Not found: the corresponding wallet by the ${address} address`);\n\n    const timeStamp = this.getAuthorizationTimeStamp(authMessage);\n    const atomexSignature = await wallet.sign(authMessage + timeStamp);\n\n    if (atomexSignature.address !== address)\n      throw new Error('Invalid address in the signed data');\n\n    const authenticationRequestData: AuthenticationRequestData = {\n      message: authMessage,\n      publicKey: atomexSignature.publicKeyBytes,\n      algorithm: atomexSignature.algorithm,\n      signingDataType: atomexSignature.signingDataType,\n      signature: atomexSignature.signatureBytes,\n      timeStamp\n    };\n    const authenticationResponseData = await this.requestAuthToken(authenticationRequestData);\n    const authToken: AuthToken = {\n      value: authenticationResponseData.token,\n      userId: authenticationResponseData.id,\n      address,\n      expired: new Date(authenticationResponseData.expires),\n      request: authenticationRequestData\n    };\n\n    await this.registerAuthToken(authToken, true);\n\n    return authToken;\n  }\n\n  async unauthorize(address: string): Promise<boolean> {\n    const authToken = this.getAuthToken(address);\n\n    return authToken ? this.unregisterAuthToken(authToken) : false;\n  }\n\n  protected async loadAuthTokenFromStore(address: string): Promise<AuthToken | undefined> {\n    const authToken = await this.store.getAuthToken(address);\n\n    if (!authToken)\n      return undefined;\n\n    return await this.registerAuthToken(authToken, false);\n  }\n\n  protected async registerAuthToken(authToken: AuthToken, isNeedSave: boolean): Promise<AuthToken | undefined> {\n    const watcherId = this.trackAuthToken(authToken);\n    if (!watcherId)\n      return;\n\n    const authTokenData = {\n      authToken,\n      watcherId\n    };\n    this._authTokenData.set(authToken.address, authTokenData);\n\n    if (isNeedSave)\n      authToken = await this.store.upsertAuthToken(authToken.address, authToken);\n\n    (this.events as ToEventEmitters<this['events']>).authorized.emit(authToken);\n    return authToken;\n  }\n\n  protected async unregisterAuthToken(authToken: AuthToken): Promise<boolean> {\n    const authTokenData = this._authTokenData.get(authToken.address);\n    if (!authTokenData)\n      return false;\n\n    this.untrackAuthToken(authTokenData.watcherId);\n    const result = (await this.store.removeAuthToken(authToken) && this._authTokenData.delete(authToken.address));\n\n    if (result)\n      (this.events as ToEventEmitters<this['events']>).unauthorized.emit(authToken);\n\n    return result;\n  }\n\n  protected trackAuthToken(authToken: AuthToken): AuthTokenData['watcherId'] {\n    const tokenDuration = authToken.expired.getTime() - Date.now();\n    if (tokenDuration <= 0) {\n      this.store.removeAuthToken(authToken);\n      (this.events as ToEventEmitters<this['events']>).authTokenExpired.emit(authToken);\n\n      return;\n    }\n\n    const expiringTokenDuration = tokenDuration - (this.expiringNotificationTimeInSeconds * 1000);\n    const watcherId = setTimeout(this.authTokenExpiringTimeoutCallback, prepareTimeoutDuration(expiringTokenDuration), authToken);\n\n    return watcherId;\n  }\n\n  protected untrackAuthToken(authTokenWatcherId: AuthTokenData['watcherId']) {\n    clearTimeout(authTokenWatcherId);\n  }\n\n  protected getAuthorizationTimeStamp(_authMessage: string): number {\n    return Date.now();\n  }\n\n  protected async requestAuthToken(requestData: AuthenticationRequestData): Promise<AuthenticationResponseData> {\n    const response = await fetch(this.authorizationUrl.href, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestData)\n    });\n\n    if (!response.ok)\n      throw new Error(await response.text());\n\n    return response.json();\n  }\n\n  protected authTokenExpiringTimeoutCallback = (authToken: AuthToken) => {\n    const authTokenData = this._authTokenData.get(authToken.address);\n    if (!authTokenData)\n      return;\n\n    clearTimeout(authTokenData.watcherId);\n    const duration = authToken.expired.getTime() - Date.now();\n    const newWatcherId = setTimeout(this.authTokenExpiredTimeoutCallback, prepareTimeoutDuration(duration), authToken);\n\n    this._authTokenData.set(authToken.address, {\n      ...authTokenData,\n      watcherId: newWatcherId\n    });\n    (this.events as ToEventEmitters<this['events']>).authTokenExpiring.emit(authToken);\n  };\n\n  protected authTokenExpiredTimeoutCallback = (authToken: AuthToken) => {\n    this.unregisterAuthToken(authToken);\n    (this.events as ToEventEmitters<this['events']>).authTokenExpired.emit(authToken);\n  };\n\n  protected isTokenExpiring(authToken: AuthToken) {\n    return (authToken.expired.getTime() - Date.now()) <= (this.expiringNotificationTimeInSeconds * 1000);\n  }\n}\n", "import type { AuthToken } from '../../authorization/index';\nimport type { SerializedAuthToken } from './serializedAuthToken';\nimport type { SerializedAuthTokenMapper } from './serializedAuthTokenMapper';\n\nexport class DefaultSerializedAuthTokenMapper implements SerializedAuthTokenMapper {\n  mapAuthTokenToSerializedAuthToken(authToken: AuthToken): SerializedAuthToken | null {\n    return {\n      a: authToken.address,\n      u: authToken.userId,\n      e: authToken.expired.getTime(),\n      v: authToken.value,\n      r: this.mapAuthTokenRequestDataToSerializedAuthTokenRequestData(authToken.request)\n    };\n  }\n\n  mapSerializedAuthTokenToAuthToken(serializedAuthToken: SerializedAuthToken): AuthToken | null {\n    if (!serializedAuthToken.r)\n      return null;\n\n    return {\n      address: serializedAuthToken.a,\n      userId: serializedAuthToken.u,\n      expired: new Date(serializedAuthToken.e),\n      value: serializedAuthToken.v,\n      request: this.mapSerializedAuthTokenRequestDataToAuthTokenRequestData(serializedAuthToken.r)\n    };\n  }\n\n  protected mapAuthTokenRequestDataToSerializedAuthTokenRequestData(authTokenRequestData: AuthToken['request']): SerializedAuthToken['r'] {\n    return {\n      m: authTokenRequestData.message,\n      t: authTokenRequestData.timeStamp,\n      pk: authTokenRequestData.publicKey,\n      s: authTokenRequestData.signature,\n      a: authTokenRequestData.algorithm,\n      sdt: authTokenRequestData.signingDataType\n    };\n  }\n\n  protected mapSerializedAuthTokenRequestDataToAuthTokenRequestData(serializedAuthTokenRequestData: SerializedAuthToken['r']): AuthToken['request'] {\n    return {\n      message: serializedAuthTokenRequestData.m,\n      timeStamp: serializedAuthTokenRequestData.t,\n      publicKey: serializedAuthTokenRequestData.pk,\n      signature: serializedAuthTokenRequestData.s,\n      algorithm: serializedAuthTokenRequestData.a,\n      signingDataType: serializedAuthTokenRequestData.sdt\n    };\n  }\n}\n", "import type { AuthToken } from '../../index';\nimport type { SerializedAuthTokenMapper } from './serializedAuthTokenMapper';\nimport type { StoreStrategy } from './storeStrategy';\n\nexport class MultipleKeysStoreStrategy implements StoreStrategy {\n  protected static readonly DefaultKeyPrefix = 'authToken:';\n\n  constructor(\n    protected readonly localStorage: Storage,\n    protected readonly serializedAuthTokenMapper: SerializedAuthTokenMapper,\n    readonly keyPrefix: string = MultipleKeysStoreStrategy.DefaultKeyPrefix\n  ) {\n  }\n\n  getAuthToken(address: string): AuthToken | undefined {\n    const rawAuthToken = localStorage.getItem(this.getKey(address));\n\n    return (rawAuthToken && this.serializedAuthTokenMapper.mapSerializedAuthTokenToAuthToken(JSON.parse(rawAuthToken))\n      || undefined);\n  }\n\n  getAuthTokens(addresses: string[]): AuthToken[] {\n    return addresses.map(address => this.getAuthToken(address))\n      .filter(Boolean) as AuthToken[];\n  }\n\n  upsertAuthToken(address: string, authToken: AuthToken): AuthToken {\n    const serializedAuthToken = this.serializedAuthTokenMapper.mapAuthTokenToSerializedAuthToken(authToken);\n    if (!serializedAuthToken)\n      throw new Error(`The authToken of the ${address} address can't be stored: serialization is failed`);\n\n    localStorage.setItem(this.getKey(address), JSON.stringify(serializedAuthToken));\n\n    return authToken;\n  }\n\n  removeAuthToken(address: string): boolean {\n    localStorage.removeItem(this.getKey(address));\n\n    return true;\n  }\n\n  protected getKey(address: string) {\n    return this.keyPrefix + address;\n  }\n}\n", "import type { AuthToken } from '../../index';\nimport type { SerializedAuthToken } from './serializedAuthToken';\nimport type { SerializedAuthTokenMapper } from './serializedAuthTokenMapper';\nimport type { StoreStrategy } from './storeStrategy';\n\ninterface AuthTokensStoreObject {\n  [address: string]: SerializedAuthToken;\n}\n\nexport class SingleKeyStoreStrategy implements StoreStrategy {\n  protected static readonly DefaultKeyPrefix = 'authTokens';\n\n  constructor(\n    protected readonly localStorage: Storage,\n    protected readonly serializedAuthTokenMapper: SerializedAuthTokenMapper,\n    readonly keyPrefix: string = SingleKeyStoreStrategy.DefaultKeyPrefix\n  ) {\n  }\n\n  protected get key() {\n    return this.keyPrefix;\n  }\n\n  getAuthToken(address: string): AuthToken | undefined {\n    const serializedAuthTokensStoreObject = this.getSerializedAuthTokensStoreObject();\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return serializedAuthTokensStoreObject[address] && (this.serializedAuthTokenMapper.mapSerializedAuthTokenToAuthToken(serializedAuthTokensStoreObject[address]!)\n      || undefined);\n  }\n\n  getAuthTokens(addresses: string[]): AuthToken[] {\n    const serializedAuthTokensStoreObject = this.getSerializedAuthTokensStoreObject();\n\n    return Object.values(serializedAuthTokensStoreObject)\n      .map(serializedAuthToken => this.serializedAuthTokenMapper.mapSerializedAuthTokenToAuthToken(serializedAuthToken))\n      .filter((authToken): authToken is AuthToken => !!authToken && addresses.indexOf(authToken.address) > -1);\n  }\n\n  upsertAuthToken(address: string, authToken: AuthToken): AuthToken {\n    const serializedAuthTokensStoreObject = this.getSerializedAuthTokensStoreObject();\n    const serializedAuthToken = this.serializedAuthTokenMapper.mapAuthTokenToSerializedAuthToken(authToken);\n    if (!serializedAuthToken)\n      throw new Error(`The authToken of the ${address} address can't be stored: serialization is failed`);\n\n    serializedAuthTokensStoreObject[address] = serializedAuthToken;\n    this.localStorage.setItem(this.key, JSON.stringify(serializedAuthTokensStoreObject));\n\n    return authToken;\n  }\n\n  removeAuthToken(address: string): boolean {\n    const serializedAuthTokensStoreObject = this.getSerializedAuthTokensStoreObject();\n\n    if (!serializedAuthTokensStoreObject[address])\n      return false;\n\n    delete serializedAuthTokensStoreObject[address];\n\n    if (Object.keys(serializedAuthTokensStoreObject).length)\n      this.localStorage.setItem(this.key, JSON.stringify(serializedAuthTokensStoreObject));\n    else\n      this.localStorage.removeItem(this.key);\n\n    return true;\n  }\n\n  protected getSerializedAuthTokensStoreObject(): AuthTokensStoreObject {\n    const rawAuthTokens = this.localStorage.getItem(this.key);\n    if (!rawAuthTokens)\n      return {};\n\n    return JSON.parse(rawAuthTokens);\n  }\n}\n", "import type { AuthToken } from '../../authorization/index';\nimport type { AuthorizationManagerStore } from '../../stores/index';\nimport { DefaultSerializedAuthTokenMapper } from './defaultSerializedAuthTokenMapper';\nimport { MultipleKeysStoreStrategy } from './multipleKeysStoreStrategy';\nimport type { SerializedAuthTokenMapper } from './serializedAuthTokenMapper';\nimport { SingleKeyStoreStrategy } from './singleKeyStoreStrategy';\nimport type { StoreStrategy } from './storeStrategy';\n\nexport type PreDefinedStoreStrategyName = 'single-key' | 'multiple-keys';\n\nexport class LocalStorageAuthorizationManagerStore implements AuthorizationManagerStore {\n  protected readonly storeStrategy: StoreStrategy;\n\n  constructor(\n    storeStrategy: PreDefinedStoreStrategyName | StoreStrategy = 'single-key',\n    serializedAuthTokenMapper: SerializedAuthTokenMapper = new DefaultSerializedAuthTokenMapper()\n  ) {\n    this.storeStrategy = typeof storeStrategy === 'string'\n      ? this.createPreDefinedStoreStrategy(storeStrategy, serializedAuthTokenMapper)\n      : storeStrategy;\n  }\n\n  getAuthToken(address: string): Promise<AuthToken | undefined> {\n    return Promise.resolve(this.storeStrategy.getAuthToken(address));\n  }\n\n  getAuthTokens(...addresses: string[]): Promise<AuthToken[]> {\n    return Promise.resolve(this.storeStrategy.getAuthTokens(addresses));\n  }\n\n  upsertAuthToken(address: string, authToken: AuthToken): Promise<AuthToken> {\n    return Promise.resolve(this.storeStrategy.upsertAuthToken(address, authToken));\n  }\n\n  removeAuthToken(authToken: AuthToken): Promise<boolean>;\n  removeAuthToken(address: string): Promise<boolean>;\n  removeAuthToken(addressOrAuthToken: AuthToken | string): Promise<boolean> {\n    const address = typeof addressOrAuthToken === 'string'\n      ? addressOrAuthToken\n      : addressOrAuthToken.address;\n\n    return Promise.resolve(this.storeStrategy.removeAuthToken(address));\n  }\n\n  private createPreDefinedStoreStrategy(strategyName: PreDefinedStoreStrategyName, serializedAuthTokenMapper: SerializedAuthTokenMapper) {\n    switch (strategyName) {\n      case 'single-key':\n        return new SingleKeyStoreStrategy(globalThis.localStorage, serializedAuthTokenMapper);\n      case 'multiple-keys':\n        return new MultipleKeysStoreStrategy(globalThis.localStorage, serializedAuthTokenMapper);\n      default:\n        throw new Error(`Unknown the store strategy name: ${strategyName}`);\n    }\n  }\n}\n", "import type { AuthToken } from '../authorization/index';\nimport type { AuthorizationManagerStore } from './authorizationManagerStore';\n\nexport class InMemoryAuthorizationManagerStore implements AuthorizationManagerStore {\n  protected readonly authTokensMap: Map<string, AuthToken> = new Map();\n\n  getAuthToken(address: string): Promise<AuthToken | undefined> {\n    return Promise.resolve(this.authTokensMap.get(address));\n  }\n\n  getAuthTokens(...addresses: string[]): Promise<AuthToken[]> {\n    return Promise.resolve(\n      addresses.reduce(\n        (result, address) => {\n          const authToken = this.authTokensMap.get(address);\n          if (authToken)\n            result.push(authToken);\n\n          return result;\n        },\n        [] as AuthToken[]\n      )\n    );\n  }\n\n  upsertAuthToken(address: string, authToken: AuthToken): Promise<AuthToken> {\n    this.authTokensMap.set(address, authToken);\n\n    return Promise.resolve(authToken);\n  }\n\n  removeAuthToken(authToken: AuthToken): Promise<boolean>;\n  removeAuthToken(address: string): Promise<boolean>;\n  removeAuthToken(addressOrAuthToken: AuthToken | string): Promise<boolean> {\n    const address = typeof addressOrAuthToken === 'string'\n      ? addressOrAuthToken\n      : addressOrAuthToken.address;\n\n    return Promise.resolve(this.authTokensMap.delete(address));\n  }\n}\n", "import type { AtomexContext } from '../../atomex/index';\nimport { AuthorizationManager } from '../../authorization/index';\nimport { LocalStorageAuthorizationManagerStore, type PreDefinedStoreStrategyName } from '../../browser/index';\nimport type { DeepReadonly } from '../../core/index';\nimport { InMemoryAuthorizationManagerStore } from '../../stores/index';\nimport type { AtomexBuilderOptions } from '../atomexBuilderOptions';\n\nexport type RequiredAuthorizationManagerDefaultComponentOptions = Pick<AuthorizationManagerDefaultComponentOptions, never>;\n\nexport type AuthorizationManagerDefaultComponentOptions = DeepReadonly<{\n  authorizationBaseUrl: string;\n  store: {\n    node: {\n      //\n    },\n    browser: {\n      storeStrategy: PreDefinedStoreStrategyName;\n    }\n  }\n}>;\n\nexport const createDefaultAuthorizationManager = (\n  atomexContext: AtomexContext,\n  options: AuthorizationManagerDefaultComponentOptions,\n  _builderOptions: DeepReadonly<AtomexBuilderOptions>\n) => {\n  const environment = globalThis.window ? 'browser' : 'node';\n\n  return new AuthorizationManager({\n    atomexNetwork: atomexContext.atomexNetwork,\n    walletsManager: atomexContext.managers.walletsManager,\n    authorizationBaseUrl: options.authorizationBaseUrl,\n    store: environment === 'browser'\n      ? new LocalStorageAuthorizationManagerStore(options.store.browser.storeStrategy)\n      : new InMemoryAuthorizationManagerStore()\n  });\n};\n", "import type { DeepReadonly } from '../core/index';\nimport type { AuthorizationManagerDefaultComponentOptions } from './atomexComponents';\nimport type { ExchangeServiceDefaultComponentOptions } from './atomexComponents/exchangeService';\n\ntype AtomexConfigNetworkSection = DeepReadonly<{\n  authorization: AuthorizationManagerDefaultComponentOptions,\n  exchange: ExchangeServiceDefaultComponentOptions\n}>;\n\nexport type AtomexConfig = DeepReadonly<{\n  mainnet: AtomexConfigNetworkSection,\n  testnet: AtomexConfigNetworkSection,\n}>;\n\nconst atomexApiBaseUrl = 'https://api.atomex.me';\nconst atomexMainnetConfig: AtomexConfigNetworkSection = {\n  authorization: {\n    authorizationBaseUrl: atomexApiBaseUrl,\n    store: {\n      node: {},\n      browser: {\n        storeStrategy: 'single-key'\n      }\n    }\n  },\n  exchange: {\n    apiBaseUrl: atomexApiBaseUrl,\n    webSocketApiBaseUrl: 'wss://api.atomex.me'\n  }\n};\n\nconst atomexTestApiBaseUrl = 'https://api.test.atomex.me';\nconst atomexTestnetConfig: AtomexConfigNetworkSection = {\n  authorization: {\n    authorizationBaseUrl: atomexTestApiBaseUrl,\n    store: {\n      node: {},\n      browser: {\n        storeStrategy: 'single-key'\n      }\n    }\n  },\n  exchange: {\n    apiBaseUrl: atomexTestApiBaseUrl,\n    webSocketApiBaseUrl: 'wss://ws.api.test.atomex.me'\n  }\n};\n\nexport const config: AtomexConfig = {\n  mainnet: atomexMainnetConfig,\n  testnet: atomexTestnetConfig\n};\n", "import { Atomex, AtomexContext, DefaultAtomexContext } from '../atomex/index';\nimport type { AtomexBlockchainNetworkOptions } from '../atomex/models/index';\nimport type { AuthorizationManager } from '../authorization/index';\nimport { CachedBalanceManager } from '../blockchain/balanceManager';\nimport { AtomexBlockchainProvider, WalletsManager } from '../blockchain/index';\nimport type { DeepReadonly } from '../core/index';\nimport { createDefaultEthereumBlockchainOptions } from '../ethereum/index';\nimport {\n  AtomexPriceProvider, BinancePriceProvider, ExchangeManager, InMemoryExchangeSymbolsProvider,\n  InMemoryOrderBookProvider, KrakenPriceProvider, PriceManager, MixedPriceManager, PriceProvider\n} from '../exchange/index';\nimport { SwapManager } from '../swaps/swapManager';\nimport { createDefaultTezosBlockchainOptions } from '../tezos/index';\nimport type { AtomexBuilderOptions } from './atomexBuilderOptions';\nimport { createDefaultExchangeService } from './atomexComponents/exchangeService';\nimport { AuthorizationManagerDefaultComponentOptions, createDefaultAuthorizationManager } from './atomexComponents/index';\nimport { config } from './atomexConfig';\nimport type { ControlledAtomexContext } from './controlledAtomexContext';\nimport type { CustomAtomexComponentFactory } from './customAtomexComponentFactory';\n\nexport class AtomexBuilder {\n  protected customAuthorizationManagerFactory?: CustomAtomexComponentFactory<AuthorizationManager, AuthorizationManagerDefaultComponentOptions>;\n  protected customWalletsManagerFactory?: CustomAtomexComponentFactory<WalletsManager>;\n  protected customExchangeManagerFactory?: CustomAtomexComponentFactory<ExchangeManager>;\n\n  private get controlledAtomexContext(): ControlledAtomexContext {\n    return this.atomexContext;\n  }\n\n  constructor(\n    protected readonly options: DeepReadonly<AtomexBuilderOptions>,\n    protected readonly atomexContext: AtomexContext = new DefaultAtomexContext(options.atomexNetwork)\n  ) {\n  }\n\n  useAuthorizationManager(customAuthorizationManagerFactory: NonNullable<AtomexBuilder['customAuthorizationManagerFactory']>): AtomexBuilder {\n    this.customAuthorizationManagerFactory = customAuthorizationManagerFactory;\n    return this;\n  }\n\n  useWalletsManager(customWalletsManagerFactory: NonNullable<AtomexBuilder['customWalletsManagerFactory']>): AtomexBuilder {\n    this.customWalletsManagerFactory = customWalletsManagerFactory;\n    return this;\n  }\n\n  useExchangeManager(customExchangeManagerFactory: NonNullable<AtomexBuilder['customExchangeManagerFactory']>): AtomexBuilder {\n    this.customExchangeManagerFactory = customExchangeManagerFactory;\n    return this;\n  }\n\n  build(): Atomex {\n    const blockchainProvider = new AtomexBlockchainProvider();\n    this.controlledAtomexContext.providers.blockchainProvider = blockchainProvider;\n    this.controlledAtomexContext.providers.currenciesProvider = blockchainProvider;\n    this.controlledAtomexContext.providers.exchangeSymbolsProvider = this.createExchangeSymbolsProvider();\n    this.controlledAtomexContext.providers.orderBookProvider = this.createOrderBookProvider();\n    this.controlledAtomexContext.managers.walletsManager = this.createWalletsManager();\n    this.controlledAtomexContext.managers.authorizationManager = this.createAuthorizationManager();\n    const atomexClient = this.createDefaultExchangeService();\n    this.controlledAtomexContext.services.exchangeService = atomexClient;\n    this.controlledAtomexContext.services.swapService = atomexClient;\n    this.controlledAtomexContext.managers.exchangeManager = this.createExchangeManager();\n    this.controlledAtomexContext.managers.swapManager = this.createSwapManager();\n    this.controlledAtomexContext.managers.priceManager = this.createPriceManager();\n    this.controlledAtomexContext.managers.balanceManager = this.createBalanceManager();\n    const blockchains = this.createDefaultBlockchainOptions();\n\n    return new Atomex({\n      atomexContext: this.atomexContext,\n      managers: {\n        walletsManager: this.atomexContext.managers.walletsManager,\n        authorizationManager: this.atomexContext.managers.authorizationManager,\n        exchangeManager: this.atomexContext.managers.exchangeManager,\n        swapManager: this.atomexContext.managers.swapManager,\n        balanceManager: this.atomexContext.managers.balanceManager,\n        priceManager: this.atomexContext.managers.priceManager,\n      },\n      blockchains\n    });\n  }\n\n  protected createExchangeSymbolsProvider() {\n    return new InMemoryExchangeSymbolsProvider();\n  }\n\n  protected createOrderBookProvider() {\n    return new InMemoryOrderBookProvider();\n  }\n\n  protected createAuthorizationManager() {\n    const defaultAuthorizationManagerOptions = config[this.atomexContext.atomexNetwork].authorization;\n\n    return this.customAuthorizationManagerFactory\n      ? this.customAuthorizationManagerFactory(this.atomexContext, defaultAuthorizationManagerOptions, this.options)\n      : createDefaultAuthorizationManager(this.atomexContext, defaultAuthorizationManagerOptions, this.options);\n  }\n\n  protected createWalletsManager() {\n    return this.customWalletsManagerFactory\n      ? this.customWalletsManagerFactory(this.atomexContext, this.options)\n      : new WalletsManager(this.atomexContext.atomexNetwork);\n  }\n\n  protected createDefaultExchangeService() {\n    const defaultExchangeManagerOptions = config[this.atomexContext.atomexNetwork].exchange;\n\n    return createDefaultExchangeService(this.atomexContext, defaultExchangeManagerOptions);\n  }\n\n  protected createExchangeManager() {\n    return this.customExchangeManagerFactory\n      ? this.customExchangeManagerFactory(this.atomexContext, this.options)\n      : new ExchangeManager({\n        authorizationManager: this.atomexContext.managers.authorizationManager,\n        exchangeService: this.atomexContext.services.exchangeService,\n        symbolsProvider: this.atomexContext.providers.exchangeSymbolsProvider,\n        orderBookProvider: this.atomexContext.providers.orderBookProvider\n      });\n  }\n\n  protected createSwapManager() {\n    return new SwapManager(this.atomexContext.services.swapService);\n  }\n\n  protected createBalanceManager() {\n    return new CachedBalanceManager(this.atomexContext.providers.blockchainProvider);\n  }\n\n  protected createDefaultBlockchainOptions(): Record<string, AtomexBlockchainNetworkOptions> {\n    return {\n      tezos: createDefaultTezosBlockchainOptions(this.atomexContext),\n      ethereum: createDefaultEthereumBlockchainOptions(this.atomexContext)\n    };\n  }\n\n  protected createPriceManager(): PriceManager {\n    return new MixedPriceManager(\n      this.atomexContext.providers.currenciesProvider,\n      new Map<string, PriceProvider>([\n        ['binance', new BinancePriceProvider()],\n        ['kraken', new KrakenPriceProvider()],\n        ['atomex', new AtomexPriceProvider(this.atomexContext.services.exchangeService)]\n      ]));\n  }\n}\n", "import type { Atomex } from '../atomex/index';\nimport type { DeepReadonly } from '../core/index';\nimport { AtomexBuilder } from './atomexBuilder';\nimport type { AtomexBuilderOptions } from './atomexBuilderOptions';\n\nexport const createDefaultMainnetAtomex = (options?: DeepReadonly<Omit<AtomexBuilderOptions, 'atomexNetwork'>>): Atomex => {\n  const builder = new AtomexBuilder({ ...options, atomexNetwork: 'mainnet' });\n\n  return builder.build();\n};\n\nexport const createDefaultTestnetAtomex = (options?: DeepReadonly<Omit<AtomexBuilderOptions, 'atomexNetwork'>>): Atomex => {\n  const builder = new AtomexBuilder({ ...options, atomexNetwork: 'testnet' });\n\n  return builder.build();\n};\n", "export * from './atomex';\nexport * from './ethereum';\nexport * from './helpers';\nexport * from './tezos';\nexport * from './fa12';\nexport * from './fa2';\n", "export default {\n  api: {\n    mainnet: {\n      baseUrl: 'https://api.atomex.me'\n    },\n    testnet: {\n      baseUrl: 'https://api.test.atomex.me'\n    },\n    localhost: {\n      baseUrl: 'http://127.0.0.1:5000'\n    }\n  },\n  blockchains: {\n    ethereum: {\n      rpc: {\n        mainnet: {\n          chainID: 1,\n          rpc: 'https://mainnet.infura.io/v3/7cd728d2d3384719a630d836f1693c5c',\n          blockTime: 10\n        },\n        testnet: {\n          chainID: 5,\n          rpc: 'https://goerli.infura.io/v3/7cd728d2d3384719a630d836f1693c5c',\n          blockTime: 10\n        }\n      }\n    },\n    tezos: {\n      rpc: {\n        mainnet: {\n          chainID: 'NetXdQprcVkpaWU',\n          rpc: 'https://rpc.tzkt.io/mainnet/',\n          blockTime: 30,\n          minimalFees: 100,\n          minimalNanotezPerGasUnit: 0.1,\n          minimalNanotezPerByte: 1,\n          costPerByte: 250\n        },\n        testnet: {\n          chainID: 'NetXnHfVqm9iesp',\n          rpc: 'https://rpc.tzkt.io/ithacanet/',\n          blockTime: 15,\n          minimalFees: 100,\n          minimalNanotezPerGasUnit: 0.1,\n          minimalNanotezPerByte: 1,\n          costPerByte: 250\n        }\n      }\n    }\n  },\n  currencies: {\n    ETH: {\n      contracts: {\n        mainnet: {\n          address: '0xe9c251cbb4881f9e056e40135e7d3ea9a7d037df',\n          initiateGasLimitWithoutReward: 200000,\n          initiateGasLimitWithReward: 210000,\n          redeemGasLimit: 140000\n        },\n        testnet: {\n          address: '0x512fe6B803bA327DCeFBF2Cec7De333f761B0f2b',\n          initiateGasLimitWithoutReward: 200000,\n          initiateGasLimitWithReward: 210000,\n          redeemGasLimit: 140000\n        },\n        abi: [\n          {\n            anonymous: false,\n            inputs: [\n              {\n                indexed: true,\n                internalType: 'bytes32',\n                name: '_hashedSecret',\n                type: 'bytes32'\n              }\n            ],\n            name: 'Activated',\n            type: 'event'\n          },\n          {\n            anonymous: false,\n            inputs: [\n              {\n                indexed: true,\n                internalType: 'bytes32',\n                name: '_hashedSecret',\n                type: 'bytes32'\n              },\n              {\n                indexed: false,\n                internalType: 'address',\n                name: '_sender',\n                type: 'address'\n              },\n              {\n                indexed: false,\n                internalType: 'uint256',\n                name: '_value',\n                type: 'uint256'\n              }\n            ],\n            name: 'Added',\n            type: 'event'\n          },\n          {\n            anonymous: false,\n            inputs: [\n              {\n                indexed: true,\n                internalType: 'bytes32',\n                name: '_hashedSecret',\n                type: 'bytes32'\n              },\n              {\n                indexed: true,\n                internalType: 'address',\n                name: '_participant',\n                type: 'address'\n              },\n              {\n                indexed: false,\n                internalType: 'address',\n                name: '_initiator',\n                type: 'address'\n              },\n              {\n                indexed: false,\n                internalType: 'uint256',\n                name: '_refundTimestamp',\n                type: 'uint256'\n              },\n              {\n                indexed: false,\n                internalType: 'uint256',\n                name: '_countdown',\n                type: 'uint256'\n              },\n              {\n                indexed: false,\n                internalType: 'uint256',\n                name: '_value',\n                type: 'uint256'\n              },\n              {\n                indexed: false,\n                internalType: 'uint256',\n                name: '_payoff',\n                type: 'uint256'\n              },\n              {\n                indexed: false,\n                internalType: 'bool',\n                name: '_active',\n                type: 'bool'\n              }\n            ],\n            name: 'Initiated',\n            type: 'event'\n          },\n          {\n            anonymous: false,\n            inputs: [\n              {\n                indexed: true,\n                internalType: 'bytes32',\n                name: '_hashedSecret',\n                type: 'bytes32'\n              },\n              {\n                indexed: false,\n                internalType: 'bytes32',\n                name: '_secret',\n                type: 'bytes32'\n              }\n            ],\n            name: 'Redeemed',\n            type: 'event'\n          },\n          {\n            anonymous: false,\n            inputs: [\n              {\n                indexed: true,\n                internalType: 'bytes32',\n                name: '_hashedSecret',\n                type: 'bytes32'\n              }\n            ],\n            name: 'Refunded',\n            type: 'event'\n          },\n          {\n            constant: true,\n            inputs: [\n              {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32'\n              }\n            ],\n            name: 'swaps',\n            outputs: [\n              {\n                internalType: 'bytes32',\n                name: 'hashedSecret',\n                type: 'bytes32'\n              },\n              {\n                internalType: 'address payable',\n                name: 'initiator',\n                type: 'address'\n              },\n              {\n                internalType: 'address payable',\n                name: 'participant',\n                type: 'address'\n              },\n              {\n                internalType: 'uint256',\n                name: 'refundTimestamp',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'countdown',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'payoff',\n                type: 'uint256'\n              },\n              {\n                internalType: 'bool',\n                name: 'active',\n                type: 'bool'\n              },\n              {\n                internalType: 'enum Atomex.State',\n                name: 'state',\n                type: 'uint8'\n              }\n            ],\n            payable: false,\n            stateMutability: 'view',\n            type: 'function'\n          },\n          {\n            constant: false,\n            inputs: [\n              {\n                internalType: 'bytes32',\n                name: '_hashedSecret',\n                type: 'bytes32'\n              },\n              {\n                internalType: 'address payable',\n                name: '_participant',\n                type: 'address'\n              },\n              {\n                internalType: 'uint256',\n                name: '_refundTimestamp',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: '_payoff',\n                type: 'uint256'\n              }\n            ],\n            name: 'initiate',\n            outputs: [],\n            payable: true,\n            stateMutability: 'payable',\n            type: 'function'\n          },\n          {\n            constant: false,\n            inputs: [\n              {\n                internalType: 'bytes32',\n                name: '_hashedSecret',\n                type: 'bytes32'\n              }\n            ],\n            name: 'add',\n            outputs: [],\n            payable: true,\n            stateMutability: 'payable',\n            type: 'function'\n          },\n          {\n            constant: false,\n            inputs: [\n              {\n                internalType: 'bytes32',\n                name: '_hashedSecret',\n                type: 'bytes32'\n              }\n            ],\n            name: 'activate',\n            outputs: [],\n            payable: false,\n            stateMutability: 'nonpayable',\n            type: 'function'\n          },\n          {\n            constant: false,\n            inputs: [\n              {\n                internalType: 'bytes32',\n                name: '_hashedSecret',\n                type: 'bytes32'\n              },\n              {\n                internalType: 'bytes32',\n                name: '_secret',\n                type: 'bytes32'\n              }\n            ],\n            name: 'redeem',\n            outputs: [],\n            payable: false,\n            stateMutability: 'nonpayable',\n            type: 'function'\n          },\n          {\n            constant: false,\n            inputs: [\n              {\n                internalType: 'bytes32',\n                name: '_hashedSecret',\n                type: 'bytes32'\n              }\n            ],\n            name: 'refund',\n            outputs: [],\n            payable: false,\n            stateMutability: 'nonpayable',\n            type: 'function'\n          }\n        ]\n      },\n      decimals: {\n        original: 18,\n        displayed: 4\n      },\n      blockchain: 'ethereum'\n    },\n    XTZ: {\n      contracts: {\n        mainnet: {\n          address: 'KT1VG2WtYdSWz5E7chTeAdDPZNy2MpP8pTfL',\n          redeemTxSize: 133,\n          initiateTxSize: 200,\n          gasLimit: 15000\n        },\n        testnet: {\n          address: 'KT1SJMtHZFSPva5AzQEx5btBuQ8BjvXqort3',\n          redeemTxSize: 133,\n          initiateTxSize: 200,\n          gasLimit: 85000\n        },\n        entrypoints: {\n          default: {\n            prim: 'or',\n            args: [\n              {\n                prim: 'or',\n                args: [\n                  {\n                    prim: 'pair',\n                    args: [\n                      {\n                        prim: 'address',\n                        annots: [\n                          '%participant'\n                        ]\n                      },\n                      {\n                        prim: 'pair',\n                        args: [\n                          {\n                            prim: 'pair',\n                            args: [\n                              {\n                                prim: 'bytes',\n                                annots: [\n                                  '%hashed_secret'\n                                ]\n                              },\n                              {\n                                prim: 'timestamp',\n                                annots: [\n                                  '%refund_time'\n                                ]\n                              }\n                            ]\n                          },\n                          {\n                            prim: 'mutez',\n                            annots: [\n                              '%payoff'\n                            ]\n                          }\n                        ],\n                        annots: [\n                          '%settings'\n                        ]\n                      }\n                    ],\n                    annots: [\n                      ':initiate',\n                      '%initiate'\n                    ]\n                  },\n                  {\n                    prim: 'bytes',\n                    annots: [\n                      ':hashed_secret',\n                      '%add'\n                    ]\n                  }\n                ],\n                annots: [\n                  '%fund'\n                ]\n              },\n              {\n                prim: 'or',\n                args: [\n                  {\n                    prim: 'bytes',\n                    annots: [\n                      ':secret',\n                      '%redeem'\n                    ]\n                  },\n                  {\n                    prim: 'bytes',\n                    annots: [\n                      ':hashed_secret',\n                      '%refund'\n                    ]\n                  }\n                ],\n                annots: [\n                  '%withdraw'\n                ]\n              }\n            ]\n          },\n          withdraw: {\n            prim: 'or',\n            args: [\n              {\n                prim: 'bytes',\n                annots: [\n                  ':secret',\n                  '%redeem'\n                ]\n              },\n              {\n                prim: 'bytes',\n                annots: [\n                  ':hashed_secret',\n                  '%refund'\n                ]\n              }\n            ]\n          },\n          refund: {\n            prim: 'bytes',\n            annots: [\n              ':hashed_secret'\n            ]\n          },\n          redeem: {\n            prim: 'bytes',\n            annots: [\n              ':secret'\n            ]\n          },\n          initiate: {\n            prim: 'pair',\n            args: [\n              {\n                prim: 'address',\n                annots: [\n                  '%participant'\n                ]\n              },\n              {\n                prim: 'pair',\n                args: [\n                  {\n                    prim: 'pair',\n                    args: [\n                      {\n                        prim: 'bytes',\n                        annots: [\n                          '%hashed_secret'\n                        ]\n                      },\n                      {\n                        prim: 'timestamp',\n                        annots: [\n                          '%refund_time'\n                        ]\n                      }\n                    ]\n                  },\n                  {\n                    prim: 'mutez',\n                    annots: [\n                      '%payoff'\n                    ]\n                  }\n                ],\n                annots: [\n                  '%settings'\n                ]\n              }\n            ],\n            annots: [\n              ':initiate'\n            ]\n          },\n          fund: {\n            prim: 'or',\n            args: [\n              {\n                prim: 'pair',\n                args: [\n                  {\n                    prim: 'address',\n                    annots: [\n                      '%participant'\n                    ]\n                  },\n                  {\n                    prim: 'pair',\n                    args: [\n                      {\n                        prim: 'pair',\n                        args: [\n                          {\n                            prim: 'bytes',\n                            annots: [\n                              '%hashed_secret'\n                            ]\n                          },\n                          {\n                            prim: 'timestamp',\n                            annots: [\n                              '%refund_time'\n                            ]\n                          }\n                        ]\n                      },\n                      {\n                        prim: 'mutez',\n                        annots: [\n                          '%payoff'\n                        ]\n                      }\n                    ],\n                    annots: [\n                      '%settings'\n                    ]\n                  }\n                ],\n                annots: [\n                  ':initiate',\n                  '%initiate'\n                ]\n              },\n              {\n                prim: 'bytes',\n                annots: [\n                  ':hashed_secret',\n                  '%add'\n                ]\n              }\n            ]\n          },\n          add: {\n            prim: 'bytes',\n            annots: [\n              ':hashed_secret'\n            ]\n          }\n        }\n      },\n      decimals: {\n        original: 6,\n        displayed: 3\n      },\n      blockchain: 'tezos'\n    },\n    TZBTC: {\n      contracts: {\n        mainnet: {\n          address: 'KT1Ap287P1NzsnToSJdA4aqSNjPomRaHBZSr',\n          tokenAddress: 'KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn',\n          redeemTxSize: 133,\n          initiateTxSize: 250,\n          gasLimit: 100000\n        },\n        testnet: {\n          address: 'KT1Jj1jzDQbDRHt4u7M73DUrBDV1napRbNFr',\n          tokenAddress: '',\n          redeemTxSize: 133,\n          initiateTxSize: 250,\n          gasLimit: 100000\n        },\n        entrypoints: {\n          default: {\n            prim: 'or',\n            args: [\n              {\n                prim: 'or',\n                args: [\n                  {\n                    prim: 'pair',\n                    args: [\n                      {\n                        prim: 'pair',\n                        args: [\n                          {\n                            prim: 'pair',\n                            args: [\n                              {\n                                prim: 'bytes',\n                                annots: [\n                                  '%hashedSecret'\n                                ]\n                              },\n                              {\n                                prim: 'address',\n                                annots: [\n                                  '%participant'\n                                ]\n                              }\n                            ]\n                          },\n                          {\n                            prim: 'pair',\n                            args: [\n                              {\n                                prim: 'nat',\n                                annots: [\n                                  '%payoffAmount'\n                                ]\n                              },\n                              {\n                                prim: 'timestamp',\n                                annots: [\n                                  '%refundTime'\n                                ]\n                              }\n                            ]\n                          }\n                        ]\n                      },\n                      {\n                        prim: 'pair',\n                        args: [\n                          {\n                            prim: 'address',\n                            annots: [\n                              '%tokenAddress'\n                            ]\n                          },\n                          {\n                            prim: 'nat',\n                            annots: [\n                              '%totalAmount'\n                            ]\n                          }\n                        ]\n                      }\n                    ],\n                    annots: [\n                      '%initiate'\n                    ]\n                  },\n                  {\n                    prim: 'bytes',\n                    annots: [\n                      '%redeem'\n                    ]\n                  }\n                ]\n              },\n              {\n                prim: 'bytes',\n                annots: [\n                  '%refund'\n                ]\n              }\n            ]\n          },\n          refund: {\n            prim: 'bytes'\n          },\n          redeem: {\n            prim: 'bytes'\n          },\n          initiate: {\n            prim: 'pair',\n            args: [\n              {\n                prim: 'pair',\n                args: [\n                  {\n                    prim: 'pair',\n                    args: [\n                      {\n                        prim: 'bytes',\n                        annots: [\n                          '%hashedSecret'\n                        ]\n                      },\n                      {\n                        prim: 'address',\n                        annots: [\n                          '%participant'\n                        ]\n                      }\n                    ]\n                  },\n                  {\n                    prim: 'nat',\n                    annots: [\n                      '%payoffAmount'\n                    ]\n                  },\n                  {\n                    prim: 'timestamp',\n                    annots: [\n                      '%refundTime'\n                    ]\n                  }\n                ]\n              },\n              {\n                prim: 'address',\n                annots: [\n                  '%tokenAddress'\n                ]\n              },\n              {\n                prim: 'nat',\n                annots: [\n                  '%totalAmount'\n                ]\n              }\n            ]\n          }\n        }\n      },\n      decimals: {\n        original: 8,\n        displayed: 4\n      },\n      blockchain: 'tezos'\n    },\n    USDT_XTZ: {\n      contracts: {\n        mainnet: {\n          address: 'KT1Ays1Chwx3ArnHGoQXchUgDsvKe9JboUjj',\n          tokenAddress: 'KT1XnTn74bUtxHfDtBmm2bGZAQfhPbvKWR8o',\n          redeemTxSize: 20000,\n          initiateTxSize: 20000,\n          gasLimit: 400000\n        },\n        testnet: {\n          address: 'KT1HHjNxi3okxxGJT1SPPhpcs3gMQt8hqixY',\n          tokenAddress: 'KT1BWvRQnVVowZZLGkct9A7sdj5YEe8CdUhR',\n          redeemTxSize: 20000,\n          initiateTxSize: 20000,\n          gasLimit: 400000\n        },\n        entrypoints: {\n          default: {\n            prim: 'or',\n            args: [\n              {\n                prim: 'or',\n                args: [\n                  {\n                    prim: 'pair',\n                    args: [\n                      {\n                        prim: 'pair',\n                        args: [\n                          {\n                            prim: 'pair',\n                            args: [\n                              {\n                                prim: 'bytes',\n                                annots: [\n                                  '%hashedSecret'\n                                ]\n                              },\n                              {\n                                prim: 'address',\n                                annots: [\n                                  '%participant'\n                                ]\n                              }\n                            ]\n                          },\n                          {\n                            prim: 'pair',\n                            args: [\n                              {\n                                prim: 'nat',\n                                annots: [\n                                  '%payoffAmount'\n                                ]\n                              },\n                              {\n                                prim: 'timestamp',\n                                annots: [\n                                  '%refundTime'\n                                ]\n                              }\n                            ]\n                          }\n                        ]\n                      },\n                      {\n                        prim: 'pair',\n                        args: [\n                          {\n                            prim: 'pair',\n                            args: [\n                              {\n                                prim: 'address',\n                                annots: [\n                                  '%tokenAddress'\n                                ]\n                              },\n                              {\n                                prim: 'nat',\n                                annots: [\n                                  '%tokenId'\n                                ]\n                              }\n                            ]\n                          },\n                          {\n                            prim: 'nat',\n                            annots: [\n                              '%totalAmount'\n                            ]\n                          }\n                        ]\n                      }\n                    ],\n                    annots: [\n                      '%initiate'\n                    ]\n                  },\n                  {\n                    prim: 'bytes',\n                    annots: [\n                      '%redeem'\n                    ]\n                  }\n                ]\n              },\n              {\n                prim: 'bytes',\n                annots: [\n                  '%refund'\n                ]\n              }\n            ]\n          },\n          refund: {\n            prim: 'bytes'\n          },\n          redeem: {\n            prim: 'bytes'\n          },\n          initiate: {\n            prim: 'pair',\n            args: [\n              {\n                prim: 'pair',\n                args: [\n                  {\n                    prim: 'pair',\n                    args: [\n                      {\n                        prim: 'bytes',\n                        annots: [\n                          '%hashedSecret'\n                        ]\n                      },\n                      {\n                        prim: 'address',\n                        annots: [\n                          '%participant'\n                        ]\n                      }\n                    ]\n                  },\n                  {\n                    prim: 'nat',\n                    annots: [\n                      '%payoffAmount'\n                    ]\n                  },\n                  {\n                    prim: 'timestamp',\n                    annots: [\n                      '%refundTime'\n                    ]\n                  }\n                ]\n              },\n              {\n                prim: 'pair',\n                args: [\n                  {\n                    prim: 'address',\n                    annots: [\n                      '%tokenAddress'\n                    ]\n                  },\n                  {\n                    prim: 'nat',\n                    annots: [\n                      '%tokenId'\n                    ]\n                  }\n                ]\n              },\n              {\n                prim: 'nat',\n                annots: [\n                  '%totalAmount'\n                ]\n              }\n            ]\n          }\n        }\n      },\n      decimals: {\n        original: 6,\n        displayed: 4\n      },\n      blockchain: 'tezos'\n    }\n  }\n};\n", "import type { AuthorizationManager } from '../authorization';\nimport config from './config';\nimport type {\n  AddOrderRequest,\n  AddSwapRequisites,\n  AuthTokenRequest,\n  AuthTokenResponse,\n  BookQuote,\n  GetOrdersRequest,\n  GetSwapsRequest,\n  Order,\n  OrderBook,\n  OrderPreview,\n  Side,\n  Swap,\n  SymbolData,\n  CurrencyConfig,\n} from './types';\n\ninterface Query {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n}\n\nexport class Atomex {\n  private _network: 'mainnet' | 'testnet';\n  private _baseUrl: string;\n  private _authToken?: string;\n  private _authorizationManager?: AuthorizationManager;\n\n  constructor(\n    network: 'mainnet' | 'testnet',\n    baseUrl: string,\n    authToken?: string,\n  ) {\n    this._network = network;\n    this._baseUrl = baseUrl;\n    this._authToken = authToken;\n  }\n\n  static create(network: 'mainnet' | 'testnet' | 'localhost'): Atomex {\n    return new Atomex(\n      network == 'mainnet' ? 'mainnet' : 'testnet',\n      config.api[network].baseUrl,\n    );\n  }\n\n  setAuthorizationManager(authorizationManager: AuthorizationManager) {\n    this._authorizationManager = authorizationManager;\n  }\n\n  private getLocalAuthToken(address: string) {\n    const authToken = this._authorizationManager?.getAuthToken(address);\n\n    return authToken?.value;\n  }\n\n  /**\n   * Initialize Atomex authorization token\n   *\n   * @remarks the token can be generated using [[getAuthToken]]\n   *\n   * @param authToken Atomex authorization token with expiration time\n   */\n  setAuthToken(authToken: string) {\n    this._authToken = authToken;\n  }\n\n  private async makeRequest<T>(\n    method: 'get' | 'post' | 'delete',\n    path: string,\n    auth: boolean | string = false,\n    params?: Query,\n    payload?: Query,\n  ): Promise<T> {\n    const url = new URL(path, this._baseUrl);\n    if (params !== undefined) {\n      Object.keys(params).forEach(key =>\n        url.searchParams.append(key, params[key]),\n      );\n    }\n\n    const headers: Record<string, string> = {};\n    if (auth) {\n      const authToken = typeof auth === 'string' ? this.getLocalAuthToken(auth) : this._authToken;\n\n      if (!authToken)\n        throw new Error('Auth token is undefined');\n\n      headers['Authorization'] = `Bearer ${authToken}`;\n    }\n\n    let body = undefined;\n    if (method === 'post' && payload !== undefined) {\n      body = JSON.stringify(payload);\n      headers['Content-Type'] = 'application/json';\n    }\n\n    const response = await fetch(url.toString(), {\n      method,\n      headers,\n      body,\n    });\n    if (response.ok) {\n      return response.json();\n    } else {\n      const errBody = await response.text();\n      throw Error(errBody);\n    }\n  }\n\n  /**\n   * Get Atomex authorization token\n   *\n   * @remarks the message details can be generated using [[getAuthMessage]]\n   *\n   * @param authRequest details of the message, timeStamp and signed message with the algorithm used\n   * @returns atomex authorization token with expiration time\n   */\n  async getAuthToken(\n    authRequest: AuthTokenRequest,\n  ): Promise<AuthTokenResponse> {\n    return this.makeRequest('post', '/v1/Token', false, {}, authRequest);\n  }\n\n  /**\n   * Get list of all available symbols in Atomex\n   *\n   * @returns list of all the symbols and their minimum qty.\n   */\n  async getSymbols(): Promise<SymbolData[]> {\n    return this.makeRequest('get', '/v1/Symbols', false);\n  }\n\n  /**\n   * Get Top of Book Quotes for all or specific Symbols\n   *\n   * @param symbolList an array of Symbols eg. `ETH/BTC` , `XTZ/ETH`. A list of all symbols can be found using [[getSymbols]]\n   * @returns a list of Book Quotes\n   */\n  async getQuotes(symbolList?: string[]): Promise<BookQuote[]> {\n    const symbols =\n      symbolList !== undefined && symbolList.length > 0\n        ? symbolList.join(',')\n        : 'All';\n    return this.makeRequest('get', '/v1/MarketData/quotes', false, { symbols });\n  }\n\n  /**\n   * Get the Order Book for a particular Symbol\n   *\n   * @param symbol a symbol eg. `ETH/BTC`. A list of all symbols can be found using [[getSymbols]]\n   * @returns an order book containing all orders for the particular symbol\n   */\n  async getOrderBook(symbol: string): Promise<OrderBook> {\n    return this.makeRequest('get', '/v1/MarketData/book', false, { symbol });\n  }\n\n  /**\n   * Create a new Order in Atomex\n   *\n   * @param addOrderRequest details of the order being placed\n   * @returns order id\n   */\n  async addOrder(addOrderRequest: AddOrderRequest): Promise<number> {\n    const [baseConfig, quoteConfig] = this.splitSymbol(\n      addOrderRequest.symbol,\n    ).map(x => this.getCurrencyConfig(x)) as [CurrencyConfig, CurrencyConfig];\n    const query: Query = addOrderRequest;\n    query.requisites = {\n      baseCurrencyContract: baseConfig.contractAddress,\n      quoteCurrencyContract: quoteConfig.contractAddress,\n      ...query.requisites,\n    };\n\n    return this.makeRequest<Record<string, number>>(\n      'post',\n      '/v1/Orders',\n      addOrderRequest.requisites?.receivingAddress || true,\n      {},\n      query,\n    ).then(res => res['orderId']!);\n  }\n\n  /**\n   * Query and filter all available orders in Atomex\n   *\n   * @param {string?} address\n   * @param getOrdersRequest optional filters for querying all orders\n   * @returns list of orders\n   */\n  async getOrders(address?: string, getOrdersRequest?: GetOrdersRequest): Promise<Order[]> {\n    return this.makeRequest('get', '/v1/Orders', address || true, { ...getOrdersRequest });\n  }\n\n  /**\n   * Query specific Order using Order ID\n   *\n   * @param orderID order id to query\n   * @param {string?} address\n   * @returns details of requested order\n   */\n  async getOrder(orderID: string, address?: string): Promise<Order> {\n    return this.makeRequest('get', `/v1/Orders/${orderID}`, address || true);\n  }\n\n  /**\n   * Cancel an order request in Atomex\n   *\n   * @param orderID id of order to cancel\n   * @param symbol symbol used in the order. A list of all symbols can be found using [[getSymbols]]\n   * @param side side of the order `Buy` or `Sell`\n   * @param {string?} address\n   * @returns true/false value depending on operation success\n   */\n  async cancelOrder(\n    orderID: string,\n    symbol: string,\n    side: Side,\n    address: string,\n  ): Promise<boolean> {\n    return this.makeRequest<Record<string, boolean>>(\n      'delete',\n      `/v1/Orders/${orderID}`,\n      address || true,\n      { symbol, side },\n    ).then(res => res['result']!);\n  }\n\n  /**\n   * Add Requisites to a Swap in Atomex\n   *\n   * @param swapID id of swap\n   * @param swapRequisites swap requisites being updated\n   * @returns true/false depending on operation success\n   */\n  async addSwapRequisites(\n    swapID: string,\n    swapRequisites: AddSwapRequisites,\n  ): Promise<boolean> {\n    return this.makeRequest<Record<string, boolean>>(\n      'post',\n      `/v1/Swaps/${swapID}/requisites`,\n      swapRequisites?.receivingAddress || true,\n      {},\n      swapRequisites,\n    ).then(res => res['result']!);\n  }\n\n  /**\n   * Query and filter all available swaps in Atomex\n   *\n   * \n   * @param {string?} address\n   * @param getSwapsRequest filters for querying all swaps\n   * @returns a list of swaps\n   */\n  async getSwaps(address?: string, getSwapsRequest?: GetSwapsRequest): Promise<Swap[]> {\n    return this.makeRequest('get', '/v1/Swaps', address || true, { ...getSwapsRequest });\n  }\n\n  /**\n   * Query specific Swap using Swap ID\n   *\n   * @param swapID Atomex internal swap id\n   * @param {string?} address\n   * @returns details of swap requested\n   */\n  async getSwap(swapID: string, address?: string): Promise<Swap> {\n    return this.makeRequest('get', `/v1/Swaps/${swapID}`, address || true);\n  }\n\n  /**\n   * Returns an approximate preview of the requested amount and expected receive amount\n   *\n   * @param orderBook order-book received from [[getOrderBook]]\n   * @param side side for the transaction Buy/Sell\n   * @param amount amount received/sent\n   * @param direction direction for the order - Send/Receive\n   */\n  getOrderPreview(\n    orderBook: OrderBook,\n    side: Side,\n    amount: number,\n    direction: 'Send' | 'Receive',\n  ): OrderPreview {\n    const availablePrices = orderBook.entries\n      .filter(entry => {\n        if (entry.side == side) {\n          return false;\n        }\n        const getOrderSize = () => {\n          switch (side + direction) {\n            case 'BuySend':\n            case 'SellReceive':\n              return amount / entry.price;\n            default:\n              return amount;\n          }\n        };\n        return getOrderSize() <= Math.max(...entry.qtyProfile);\n      })\n      .map(entry => entry.price);\n\n    if (availablePrices.length == 0) {\n      throw new Error(\n        `No matching order found (${direction} ${amount} / ${side})`,\n      );\n    }\n\n    const bestPrice =\n      side == 'Buy'\n        ? Math.min(...availablePrices)\n        : Math.max(...availablePrices);\n    const getExpectedAmount = () => {\n      switch (side + direction) {\n        case 'BuySend':\n        case 'SellReceive':\n          return amount / bestPrice;\n        default:\n          return amount * bestPrice;\n      }\n    };\n    return {\n      price: bestPrice,\n      amountSent: direction == 'Send' ? amount : getExpectedAmount(),\n      amountReceived: direction == 'Receive' ? amount : getExpectedAmount(),\n    };\n  }\n\n  /**\n   * Split Atomex trading pair to base and quote currencies\n   *\n   * @param symbol Atomex trading pair {baseCurrency}/{quoteCurrency}\n   */\n  splitSymbol(symbol: string): [baseCurrency: string, quoteCurrency: string] {\n    const [baseCurrency, quoteCurrency] = symbol.split('/', 2);\n    if (!baseCurrency || !quoteCurrency)\n      throw new Error('Symbol is invalid');\n\n    return [baseCurrency, quoteCurrency];\n  }\n\n  /**\n   * Get currency & network specific configuration\n   *\n   * @param currency L1/L2 token symbol (uppercase)\n   */\n  getCurrencyConfig(currency: string): CurrencyConfig {\n    const currencyEntry = Object.entries(config.currencies).find(\n      ([k, _v]) => k == currency,\n    );\n    if (currencyEntry == undefined) {\n      throw new Error(`No matching config section for ${currency}`);\n    }\n    return {\n      blockchain: currencyEntry[1].blockchain,\n      decimals: currencyEntry[1].decimals.original,\n      displayDecimals: currencyEntry[1].decimals.displayed,\n      contractAddress: currencyEntry[1].contracts[this._network].address,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      tokenAddress: (currencyEntry[1].contracts[this._network] as any).tokenAddress\n    };\n  }\n\n  /**\n   * Formatting an amount based on currency\n   *\n   * @param amount Amount received / sent\n   * @param currency L1/L2 token symbol (uppercase)\n   */\n  formatAmount(amount: number | string, currency: string): number {\n    const cfg = this.getCurrencyConfig(currency);\n    return typeof amount === 'string'\n      ? parseFloat(parseFloat(amount).toFixed(cfg.displayDecimals))\n      : parseFloat(amount.toFixed(cfg.displayDecimals));\n  }\n\n  /**\n   * Get order side for a particular trading pair given the bridge direction\n   *\n   * @param symbol Atomex trading pair {baseCurrency}/{quoteCurrency}\n   * @param fromCurrency Currency to send\n   * @param toCurrency Currency to receive\n   */\n  getOrderSide(\n    symbol: string,\n    fromCurrency: string,\n    toCurrency: string,\n  ): Side {\n    const [baseCurrency, quoteCurrency] = this.splitSymbol(symbol);\n\n    if (baseCurrency === fromCurrency && quoteCurrency === toCurrency)\n      return 'Sell';\n\n    if (quoteCurrency === fromCurrency && baseCurrency === toCurrency)\n      return 'Buy';\n\n    throw new Error(`Mismatch ${fromCurrency} => ${toCurrency} (${symbol})`);\n  }\n\n  /**\n   * Get maximum available liquidity\n   *\n   * @param orderBook order-book received from [[getOrderBook]]\n   * @param side order side Buy/Sell\n   */\n  getMaxOrderSize(orderBook: OrderBook, side: Side): number {\n    return Math.max(\n      ...orderBook.entries\n        .filter(entry => entry.side != side)\n        .map(entry => Math.max(...entry.qtyProfile)),\n    );\n  }\n}\n", "/* eslint-disable @typescript-eslint/ban-types */\nimport BigNumber from 'bignumber.js';\nimport elliptic from 'elliptic';\nimport Web3 from 'web3';\nimport type { Transaction } from 'web3-core';\nimport type { Contract } from 'web3-eth-contract';\nimport type { AbiInput, AbiItem } from 'web3-utils';\n\nimport type { Atomex } from '../atomex';\nimport config from './config';\nimport { Helpers, now } from './helpers';\nimport type {\n  AuthMessage,\n  InitiateParameters,\n  PartialTransactionBody,\n  RedeemFees,\n  SwapTransactionStatus,\n} from './types';\n\nexport interface Function {\n  types: AbiInput[];\n  signature: string;\n}\n\n/**\n * Ethereum Util class for Ethereum related Atomex helper functions\n */\nexport class EthereumHelpers extends Helpers {\n  private _web3: Web3;\n  private _contract: Contract;\n  private _timeBetweenBlocks: number;\n  private _functions: Map<string, Function>;\n  private _initiateGasLimitWithoutReward: number;\n  private _initiateGasLimitWithReward: number;\n  private _redeemGasLimit: number;\n\n  constructor(\n    atomex: Atomex,\n    web3: Web3,\n    jsonInterface: AbiItem[],\n    contractAddress: string,\n    timeBetweenBlocks: number,\n    initiateGasLimitWithoutReward: number,\n    initiateGasLimitWithReward: number,\n    redeemGasLimit: number,\n  ) {\n    super(atomex);\n    this._web3 = web3;\n    this._contract = this.createContract(jsonInterface, contractAddress);\n    this._timeBetweenBlocks = timeBetweenBlocks;\n    this._initiateGasLimitWithoutReward = initiateGasLimitWithoutReward;\n    this._initiateGasLimitWithReward = initiateGasLimitWithReward;\n    this._redeemGasLimit = redeemGasLimit;\n    this._functions = new Map<string, Function>();\n    this.initializeFunctions(jsonInterface);\n  }\n\n  private initializeFunctions(jsonInterface: AbiItem[]) {\n    jsonInterface.forEach(item => {\n      if (item.type === 'function') {\n        this._functions.set(item.name!, {\n          types: item.inputs!,\n          signature: this._web3.eth.abi.encodeFunctionSignature(item as AbiItem),\n        });\n      }\n    });\n  }\n\n  /**\n   * Connects to the supported ethereum chain\n   *\n   * @param newAtomex instance of new Atomex class\n   * @param network networks supported by atomex, can be either mainnet or testnet\n   * @param rpcUri optional rpc endpoint to create eth chain client\n   * @returns chain id of the connected chain\n   */\n  static async create(\n    newAtomex: Atomex,\n    network: 'mainnet' | 'testnet',\n    rpcUri?: string,\n  ): Promise<EthereumHelpers> {\n    const networkSettings = config.blockchains.ethereum.rpc[network];\n    if (rpcUri !== undefined) {\n      networkSettings.rpc = rpcUri;\n    }\n\n    const web3 = new Web3(networkSettings.rpc);\n    const chainID = await web3.eth.getChainId();\n    if (networkSettings.chainID !== chainID) {\n      throw new Error(\n        `Wrong chain ID: expected ${networkSettings.chainID}, actual ${chainID}`,\n      );\n    }\n\n    return new EthereumHelpers(\n      newAtomex,\n      web3,\n      config.currencies.ETH.contracts.abi as AbiItem[],\n      config.currencies.ETH.contracts[network].address,\n      networkSettings.blockTime,\n      config.currencies.ETH.contracts[network].initiateGasLimitWithoutReward,\n      config.currencies.ETH.contracts[network].initiateGasLimitWithReward,\n      config.currencies.ETH.contracts[network].redeemGasLimit,\n    );\n  }\n\n  getAuthMessage(message: string, _address?: string): AuthMessage {\n    const nowMillis = Date.now();\n    return {\n      message,\n      timestamp: nowMillis,\n      msgToSign: message + nowMillis.toString(),\n      algorithm: 'Keccak256WithEcdsa:Geth2940',\n    };\n  }\n\n  buildInitiateTransaction(\n    initiateParameters: InitiateParameters,\n  ): PartialTransactionBody {\n    if (initiateParameters.refundTimestamp < now()) {\n      throw new Error(\n        `Swap timestamp is in the past: ${initiateParameters.refundTimestamp}`,\n      );\n    }\n\n    const data: string = this._contract.methods\n      .initiate(\n        '0x' + initiateParameters.secretHash,\n        initiateParameters.receivingAddress,\n        initiateParameters.refundTimestamp,\n        initiateParameters.rewardForRedeem.toString(10),\n      )\n      .encodeABI();\n    return {\n      data,\n      contractAddr: this._contract.options.address,\n      amount: initiateParameters.netAmount.plus(initiateParameters.rewardForRedeem),\n    };\n  }\n\n  buildRedeemTransaction(\n    secret: string,\n    hashedSecret: string,\n  ): PartialTransactionBody {\n    const data = this._contract.methods\n      .redeem(hashedSecret, secret)\n      .encodeABI();\n    return {\n      data,\n      contractAddr: this._contract.options.address,\n    };\n  }\n\n  buildRefundTransaction(secretHash: string): PartialTransactionBody {\n    const data = this._contract.methods.refund(secretHash).encodeABI();\n    return {\n      data,\n      contractAddr: this._contract.options.address,\n    };\n  }\n\n  /**\n   * Get the tx data for Atomex Contract Activate Swap call\n   *\n   * @param hashedSecret hashedSecret to identify swap\n   * @returns contract address and tx data that can be used to make a contract call\n   */\n  buildActivateTransaction(secretHash: string): PartialTransactionBody {\n    const data: string = this._contract.methods\n      .activate(secretHash)\n      .encodeABI();\n    return {\n      data,\n      contractAddr: this._contract.options.address,\n    };\n  }\n\n  parseInitiateParameters(transaction: Transaction): InitiateParameters {\n    const initiateMethod = this._functions.get('initiate')!;\n\n    if (!transaction.input.startsWith(initiateMethod.signature)) {\n      throw new Error(`Unexpected method signature: ${transaction.input}`);\n    }\n\n    const params = this._web3.eth.abi.decodeParameters(\n      initiateMethod.types,\n      transaction.input.slice(initiateMethod.signature.length),\n    );\n\n    return {\n      secretHash: params['_hashedSecret'].slice(2),\n      receivingAddress: params['_participant'],\n      refundTimestamp: parseInt(params['_refundTimestamp']),\n      rewardForRedeem: new BigNumber(\n        this._web3.utils.toBN(params['_payoff']).toString(),\n      ),\n      netAmount: new BigNumber(\n        this._web3.utils\n          .toBN(transaction.value)\n          .sub(this._web3.utils.toBN(params['_payoff']))\n          .toString(),\n      ),\n    };\n  }\n\n  async validateInitiateTransaction(\n    _blockHeight: number,\n    txId: string,\n    secretHash: string,\n    receivingAddress: string,\n    amount: BigNumber | number,\n    payoff: BigNumber | number,\n    minRefundTimestamp: number,\n    minConfirmations = 2,\n  ): Promise<SwapTransactionStatus> {\n    amount = new BigNumber(amount);\n    payoff = new BigNumber(payoff);\n\n    const netAmount = amount.minus(payoff);\n    const transaction = await this.getTransaction(txId);\n\n    try {\n      if (!transaction)\n        throw new Error(`Failed to retrieve transaction: ${txId}`);\n\n      const errors: string[] = [];\n      if (transaction.to?.toLowerCase() !== this._contract.options.address.toLowerCase())\n        errors.push(`Wrong contract address: expect ${this._contract.options.address}, actual ${transaction.to}`);\n\n\n      const initiateParameters = this.parseInitiateParameters(transaction);\n      if (initiateParameters.secretHash !== secretHash)\n        errors.push(`Secret hash: expect ${secretHash}, actual ${initiateParameters.secretHash}`);\n\n      if (initiateParameters.receivingAddress.toLowerCase() !== receivingAddress.toLowerCase())\n        errors.push(`Receiving address: expect ${receivingAddress}, actual ${initiateParameters.receivingAddress}`);\n\n      if (!initiateParameters.netAmount.isEqualTo(netAmount))\n        errors.push(`Net amount: expect ${netAmount.toString(10)}, actual ${initiateParameters.netAmount.toString(10)}`);\n\n      if (initiateParameters.refundTimestamp < minRefundTimestamp)\n        errors.push(`Refund timestamp: minimum ${minRefundTimestamp}, actual ${initiateParameters.refundTimestamp}`);\n\n      if (errors.length) {\n        const errorMessage = errors.reduce(\n          (result, error, index) => `${result}\\n\\t${index + 1}. ${error};`,\n          `Initiate transaction that satisfies the expected criteria is not found in ${txId} contents:`\n        );\n        throw new Error(errorMessage);\n      }\n    } catch (e: any) {\n      return {\n        status: 'Invalid',\n        message: e.message,\n        confirmations: 0,\n        nextBlockETA: 0,\n      };\n    }\n\n    const latestBlock = await this.getBlock('latest');\n    const confirmations = latestBlock.number - (transaction.blockNumber || latestBlock.number);\n\n    const res: SwapTransactionStatus = {\n      status: transaction.blockNumber !== undefined ? 'Included' : 'Pending',\n      confirmations,\n      nextBlockETA: parseInt(latestBlock.timestamp.toString()) + this._timeBetweenBlocks,\n    };\n\n    if (confirmations >= minConfirmations) {\n      res.status = 'Confirmed';\n    }\n\n    return res;\n  }\n\n  private hexSlice(i: number, j: number, bs: string) {\n    return '0x' + bs.slice(i * 2 + 2, j * 2 + 2);\n  }\n\n  private getVRS(signature: string) {\n    const vals = [\n      this.hexSlice(64, (signature.length - 2) / 2, signature),\n      this.hexSlice(0, 32, signature),\n      this.hexSlice(32, 64, signature),\n    ] as const;\n\n    return {\n      v: parseInt(vals[0].slice(2), 16),\n      r: vals[1].slice(2),\n      s: vals[2].slice(2),\n    };\n  }\n\n  /**\n   * Recover Ethereum Account Public Key from RLC signature\n   *\n   * @param msg original message, `msgToSign` parameter generated using [[getAuthMessage]]\n   * @param signature signed message\n   * @returns ethereum public key\n   */\n  recoverPublicKey(msg: string, signature: string) {\n    const hash = this._web3.eth.accounts.hashMessage(msg);\n    const vrs = this.getVRS(signature);\n    const secp256k1 = new elliptic.ec('secp256k1');\n    const ecPublicKey = secp256k1.recoverPubKey(\n      Buffer.from(hash.slice(2), 'hex'),\n      vrs,\n      vrs.v < 2 ? vrs.v : 1 - (vrs.v % 2),\n    );\n    return '0x' + ecPublicKey.encode('hex', false);\n  }\n\n  encodePublicKey(pubKey: string): string {\n    if (pubKey.startsWith('0x')) {\n      return pubKey.slice(2);\n    }\n    return pubKey;\n  }\n\n  encodeSignature(signature: string): string {\n    const vrs = this.getVRS(signature);\n    return vrs.r.padStart(64, '0') + vrs.s.padStart(64, '0');\n  }\n\n  async estimateInitiateFees(_source: string): Promise<number> {\n    const gasPrice = await this._web3.eth.getGasPrice();\n    const fee = parseInt(gasPrice) * this._initiateGasLimitWithReward * 1.2;\n\n    return fee;\n  }\n\n  async estimateRedeemFees(_recipient: string): Promise<RedeemFees> {\n    const gasPrice = await this._web3.eth.getGasPrice();\n    const fee = parseInt(gasPrice) * this._redeemGasLimit;\n\n    return {\n      totalCost: fee,\n      rewardForRedeem: 2 * fee,\n    };\n  }\n\n  isValidAddress(address: string): boolean {\n    return this._web3.utils.isAddress(address);\n  }\n\n  private getTransaction(txId: string) {\n    return this._web3.eth.getTransaction(txId);\n  }\n\n  private getBlock(blockId: string | number) {\n    return this._web3.eth.getBlock(blockId);\n  }\n\n  private createContract(jsonInterface: AbiItem[], contractAddress: string) {\n    return new this._web3.eth.Contract(jsonInterface, contractAddress);\n  }\n}\n", "import type BigNumber from 'bignumber.js';\n\nimport type { Atomex } from '../atomex';\nimport type { Swap } from '../swaps';\nimport { converters } from '../utils';\nimport type {\n  AuthMessage,\n  InitiateParameters,\n  PartialTransactionBody,\n  RedeemFees,\n  SwapTransactionStatus,\n} from './types';\n\nexport abstract class Helpers {\n  constructor(readonly atomex: Atomex) {\n  }\n\n  /**\n   * Get the details needed for `getAuthToken` request\n   *\n   * @remarks the `msgToSign` value needs to be signed before being used for Auth\n   * @param message message to include for the Atomex Authentication message\n   * @param address required for Tezos blockchain, in order to determine the EC algorithm\n   * @returns details required for Atomex Auth\n   */\n  abstract getAuthMessage(\n    message: string,\n    address?: string,\n  ): AuthMessage;\n\n  /**\n   * Get the tx data for Atomex Contract Initiate Swap call\n   *\n   * @param swapDetails details of the swap being initiated\n   * @returns contract address and tx data that can be used to make a contract call\n   */\n  abstract buildInitiateTransaction(\n    initiateParameters: InitiateParameters,\n  ): PartialTransactionBody;\n\n  /**\n   * Get the tx data for Atomex Contract Redeem Swap call\n   *\n   * @param secret secret that can used to verify and redeem the funds\n   * @returns contract address and tx data that can be used to make a contract call\n   */\n  abstract buildRedeemTransaction(\n    secret: string,\n    hashedSecret: string,\n  ): PartialTransactionBody;\n\n  /**\n   * Get the tx data for Atomex Contract Refund Swap call\n   *\n   * @param secretHash secretHash to identify swap\n   * @returns contract address and tx data that can be used to make a contract call\n   */\n  abstract buildRefundTransaction(\n    secretHash: string,\n  ): PartialTransactionBody;\n\n  /**\n   * Validate the Swap Details on chain using the tx detail from Atomex\n   * [does not check tx status, use status provided by atomex]\n   *\n   * @param blockHeight block height of the block where the tx is present\n   * @param txID operation/tx hash to identify blockchain transaction\n   * @param expectedData expected swap details that will be used for validation\n   * @param confirmations no. of tx confirmations required\n   * @returns status of tx, current no. of confirms and est. next block generation timestamp.\n   * No. of confirmations and block timestamp is only returned when `status:Included`\n   */\n  abstract validateInitiateTransaction(\n    blockHeight: number,\n    txID: string,\n    secretHash: string,\n    receivingAddress: string,\n    amount: BigNumber | number,\n    payoff: BigNumber | number,\n    minRefundTimestamp: number,\n    minConfirmations: number,\n  ): Promise<SwapTransactionStatus>;\n\n  /**\n   * Encodes Signature in a form compliant with Atomex\n   *\n   * @param signature signature to encode\n   * @returns encoded signature\n   */\n  abstract encodeSignature(signature: string): string;\n\n  /**\n   * Encodes Public Key in a form compliant with Atomex\n   *\n   * @param publicKey public key\n   * @returns encoded public key\n   */\n  abstract encodePublicKey(publicKey: string): string;\n\n  /**\n   * Estimates Initiate fees for a Swap\n   *\n   * @param source the initiator address\n   * @returns the initiate fees for Swap\n   */\n  abstract estimateInitiateFees(source: string): Promise<number>;\n\n  /**\n   * Estimates Miner Fee and Reward for Redeem to be used in a Swap\n   *\n   * @param recipient the counter-party address\n   * @returns the minerFee and the rewardForRedeem\n   */\n  abstract estimateRedeemFees(recipient: string): Promise<RedeemFees>;\n\n  /**\n   * Check validity of an account address\n   * \n   * @param address account address\n   * @returns true if valid, else false\n   */\n  abstract isValidAddress(address: string): boolean;\n\n  validateInitiateTransactionBySwap(swap: Swap): Promise<SwapTransactionStatus> {\n    const initiateTransaction = swap.counterParty.transactions.find(transaction => transaction.type === 'Lock');\n    if (!initiateTransaction)\n      return Promise.resolve({\n        status: 'NotFound',\n        confirmations: 0,\n        nextBlockETA: 0\n      });\n\n    const toCurrency = this.atomex.getCurrency(swap.to.currencyId);\n    if (!toCurrency)\n      throw new Error(`Config of the \"${swap.to.currencyId}\" not found`);\n\n    return this.validateInitiateTransaction(\n      initiateTransaction.blockId,\n      initiateTransaction.id,\n      swap.secretHash,\n      swap.user.requisites.receivingAddress,\n      converters.tokensAmountToNat(swap.to.amount, toCurrency.decimals),\n      converters.tokensAmountToNat(swap.user.requisites.rewardForRedeem, toCurrency.decimals),\n      0,\n      2\n    );\n  }\n}\n\nexport const dt2ts = (isoTime: Date | string): number =>\n  Math.round(new Date(isoTime).getTime() / 1000);\n\nexport const now = (): number => Math.round(Date.now() / 1000);\n", "import { ParameterSchema } from '@taquito/michelson-encoder';\nimport {\n  BlockResponse,\n  OperationContentsAndResultTransaction,\n  OpKind,\n} from '@taquito/rpc';\nimport { TezosToolkit } from '@taquito/taquito';\nimport {\n  b58cdecode,\n  prefix,\n  validateAddress,\n  ValidationResult,\n} from '@taquito/utils';\nimport BigNumber from 'bignumber.js';\n\nimport type { Atomex } from '../atomex';\nimport config from './config';\nimport { dt2ts, Helpers, now } from './helpers';\nimport type {\n  Algorithm,\n  AuthMessage,\n  InitiateParameters,\n  PartialTransactionBody,\n  RedeemFees,\n  SwapTransactionStatus,\n  TezosBasedCurrency,\n  Network\n} from './types';\n\nconst formatTimestamp = (timestamp: number) => {\n  return new Date(timestamp * 1000).toISOString().slice(0, -5) + 'Z';\n};\n\n/**\n * Tezos Util class for Tezos related Atomex helper functions\n */\nexport class TezosHelpers extends Helpers {\n  protected _tezos: TezosToolkit;\n  protected _contractAddress: string;\n  protected _timeBetweenBlocks: number;\n  protected _entrypoints: Map<string, ParameterSchema>;\n  protected _gasLimit: number;\n  protected _minimalFees: number;\n  protected _minimalNanotezPerGasUnit: number;\n  protected _minimalNanotezPerByte: number;\n  protected _costPerByte: number;\n  protected _redeemTxSize: number;\n  protected _initiateTxSize: number;\n\n  constructor(\n    atomex: Atomex,\n    tezos: TezosToolkit,\n    entrypoints: Record<string, any>,\n    contractAddress: string,\n    timeBetweenBlocks: number,\n    gasLimit: number,\n    minimalFees: number,\n    minimalNanotezPerGasUnit: number,\n    minimalNanotezPerByte: number,\n    costPerByte: number,\n    redeemTxSize: number,\n    initiateTxSize: number,\n  ) {\n    super(atomex);\n    this._tezos = tezos;\n    this._contractAddress = contractAddress;\n    this._timeBetweenBlocks = timeBetweenBlocks;\n    this._gasLimit = gasLimit;\n    this._minimalFees = minimalFees;\n    this._minimalNanotezPerGasUnit = minimalNanotezPerGasUnit;\n    this._minimalNanotezPerByte = minimalNanotezPerByte;\n    this._costPerByte = costPerByte;\n    this._redeemTxSize = redeemTxSize;\n    this._initiateTxSize = initiateTxSize;\n    this._entrypoints = new Map<string, ParameterSchema>(\n      Object.entries(entrypoints).map(([name, typeExpr]) => {\n        return [name, new ParameterSchema(typeExpr)];\n      }),\n    );\n  }\n\n  /**\n   * Connects to the supported tezos chain\n   *\n   * @param newAtomex instance of new Atomex class\n   * @param network networks supported by atomex, can be either mainnet or testnet\n   * @param currency either native currency (XTZ) or any supported FA1.2/FA2 token symbol\n   * @param rpcUri optional rpc endpoint to create tezos chain client\n   * @returns chain id of the connected chain\n   */\n  static async create(\n    newAtomex: Atomex,\n    network: Network,\n    currency: TezosBasedCurrency = 'XTZ',\n    rpcUri?: string,\n  ): Promise<TezosHelpers> {\n    const networkSettings = config.blockchains.tezos.rpc[network];\n    if (rpcUri !== undefined) {\n      networkSettings.rpc = rpcUri;\n    }\n\n    const tezos = new TezosToolkit(networkSettings.rpc);\n    const chainID = await tezos.rpc.getChainId();\n    if (networkSettings.chainID !== chainID.toString()) {\n      throw new Error(\n        `Wrong chain ID: expected ${networkSettings.chainID}, actual ${chainID}`,\n      );\n    }\n\n    return new TezosHelpers(\n      newAtomex,\n      tezos,\n      config.currencies[currency].contracts.entrypoints,\n      config.currencies[currency].contracts[network].address,\n      config.blockchains.tezos.rpc[network].blockTime,\n      config.currencies[currency].contracts[network].gasLimit,\n      config.blockchains.tezos.rpc[network].minimalFees,\n      config.blockchains.tezos.rpc[network].minimalNanotezPerGasUnit,\n      config.blockchains.tezos.rpc[network].minimalNanotezPerByte,\n      config.blockchains.tezos.rpc[network].costPerByte,\n      config.currencies[currency].contracts[network].redeemTxSize,\n      config.currencies[currency].contracts[network].initiateTxSize,\n    );\n  }\n\n  private getTezosAlgorithm(prefix?: string): Algorithm {\n    switch (prefix) {\n      case 'tz1':\n        return 'Ed25519:Blake2b';\n      case 'tz2':\n        return 'Blake2bWithEcdsa:Secp256k1';\n      case 'tz3':\n        return 'Blake2bWithEcdsa:Secp256r1';\n      default:\n        throw new Error(`Unexpected address prefix: ${prefix}`);\n    }\n  }\n\n  getAuthMessage(message: string, address: string): AuthMessage {\n    const nowMillis = Date.now();\n    return {\n      message,\n      timestamp: nowMillis,\n      msgToSign: message + nowMillis.toString(),\n      algorithm: this.getTezosAlgorithm(address.slice(0, 3)),\n    };\n  }\n\n  buildInitiateTransaction(\n    initiateParameters: InitiateParameters,\n  ): PartialTransactionBody {\n    if (initiateParameters.refundTimestamp < now()) {\n      throw new Error(\n        `Swap timestamp is in the past: ${initiateParameters.refundTimestamp}`,\n      );\n    }\n\n    const parameter = this._entrypoints\n      .get('initiate')\n      ?.Encode(\n        initiateParameters.receivingAddress,\n        initiateParameters.secretHash,\n        formatTimestamp(initiateParameters.refundTimestamp),\n        initiateParameters.rewardForRedeem,\n      );\n    return {\n      data: {\n        entrypoint: 'initiate',\n        value: parameter,\n      },\n      contractAddr: this._contractAddress,\n      amount: initiateParameters.netAmount.plus(initiateParameters.rewardForRedeem),\n    };\n  }\n\n  buildRedeemTransaction(\n    secret: string,\n    _hashedSecret = '',\n  ): PartialTransactionBody {\n    return {\n      data: {\n        entrypoint: 'redeem',\n        value: this._entrypoints.get('redeem')?.Encode(secret),\n      },\n      contractAddr: this._contractAddress,\n    };\n  }\n\n  buildRefundTransaction(secretHash: string): PartialTransactionBody {\n    return {\n      data: {\n        entrypoint: 'refund',\n        value: this._entrypoints.get('refund')?.Encode(secretHash),\n      },\n      contractAddr: this._contractAddress,\n    };\n  }\n\n  /**\n   * Get Block level\n   *\n   * @param blockLevel block level to identify the block\n   * @returns level of the block and block generation time\n   */\n  getBlockDetails(block: BlockResponse) {\n    return {\n      level: block.metadata.level_info!.level,\n      timestamp: dt2ts(block.header.timestamp),\n    };\n  }\n\n  parseInitiateParameters(\n    content: OperationContentsAndResultTransaction,\n  ): InitiateParameters {\n    if (content.parameters === undefined) {\n      throw new Error('Parameters are undefined');\n    }\n\n    const params = this._entrypoints\n      .get(content.parameters.entrypoint)\n      ?.Execute(content.parameters.value);\n    if (params === undefined) {\n      throw new Error(\n        `Unexpected entrypoint: ${content.parameters.entrypoint}`,\n      );\n    }\n\n    const initiateParams = (() => {\n      switch (content.parameters.entrypoint) {\n        case 'initiate':\n          return params;\n        case 'fund':\n        case 'default':\n          return params['initiate'];\n        default:\n          throw new Error(\n            `Unexpected entrypoint: ${content.parameters.entrypoint}`,\n          );\n      }\n    })();\n\n    return {\n      secretHash: initiateParams['settings']['hashed_secret'],\n      receivingAddress: initiateParams['participant'],\n      refundTimestamp: dt2ts(initiateParams['settings']['refund_time']),\n      netAmount: new BigNumber(content.amount).minus(initiateParams['settings']['payoff']),\n      rewardForRedeem: new BigNumber(initiateParams['settings']['payoff']),\n    };\n  }\n\n  findContractCall(\n    block: BlockResponse,\n    txID: string,\n  ): OperationContentsAndResultTransaction[] {\n    const opg = block.operations[3]?.find(opg => opg.hash == txID);\n    if (opg === undefined) {\n      throw new Error(`Operation not found: ${txID} @ ${block.hash}`);\n    }\n\n    const contents = (\n      opg.contents.filter(c => c.kind == 'transaction' && c.destination == this._contractAddress)\n    ) as OperationContentsAndResultTransaction[];\n    if (contents.length === 0) {\n      throw new Error('Unsupported contract version is used');\n    }\n\n    return contents;\n  }\n\n  async validateInitiateTransaction(\n    blockHeight: number,\n    txID: string,\n    secretHash: string,\n    receivingAddress: string,\n    amount: BigNumber | number,\n    payoff: BigNumber | number,\n    minRefundTimestamp: number,\n    minConfirmations = 2,\n  ): Promise<SwapTransactionStatus> {\n    amount = new BigNumber(amount);\n    payoff = new BigNumber(payoff);\n\n    const netAmount = amount.minus(payoff);\n    const block = await this.getBlock(blockHeight);\n\n    try {\n      let errors: string[] = [];\n      const tx = this.findContractCall(block, txID).find(content => {\n        errors = [];\n\n        const initiateParameters = this.parseInitiateParameters(content);\n        if (initiateParameters.secretHash !== secretHash)\n          errors.push(`Secret hash: expect ${secretHash}, actual ${initiateParameters.secretHash}. Counter = ${content.counter}`);\n\n        if (initiateParameters.receivingAddress.toLowerCase() !== receivingAddress.toLowerCase())\n          errors.push(`Receiving address: expect ${receivingAddress}, actual ${initiateParameters.receivingAddress}. Counter = ${content.counter}`);\n\n        if (!initiateParameters.netAmount.isEqualTo(netAmount))\n          errors.push(`Net amount: expect ${netAmount.toString(10)}, actual ${initiateParameters.netAmount.toString(10)}. Counter = ${content.counter}`);\n\n        if (initiateParameters.refundTimestamp < minRefundTimestamp)\n          errors.push(`Refund timestamp: minimum ${minRefundTimestamp}, actual ${initiateParameters.refundTimestamp}. Counter = ${content.counter}`);\n\n        return !errors.length;\n      }, this);\n\n      if (!tx) {\n        const errorMessage = errors.reduce(\n          (result, error, index) => `${result}\\n\\t${index + 1}. ${error};`,\n          `Initiate transaction that satisfies the expected criteria is not found in ${txID} contents:`\n        );\n        throw new Error(errorMessage);\n      }\n    } catch (e: any) {\n      return {\n        status: 'Invalid',\n        message: e.message,\n        confirmations: 0,\n        nextBlockETA: 0,\n      };\n    }\n\n    const headDetails = this.getBlockDetails(\n      await this.getBlock('head')\n    );\n    const txBlockDetails = this.getBlockDetails(block);\n    const confirmations = headDetails.level! - txBlockDetails.level!;\n\n    const res: SwapTransactionStatus = {\n      status: 'Included',\n      confirmations,\n      nextBlockETA: headDetails.timestamp + this._timeBetweenBlocks,\n    };\n\n    if (confirmations >= minConfirmations) {\n      res.status = 'Confirmed';\n    }\n\n    return res;\n  }\n\n  encodePublicKey(pubKey: string): string {\n    const curve = pubKey.substring(0, 2);\n    switch (curve) {\n      case 'ed':\n        return Buffer.from(b58cdecode(pubKey, prefix['edpk'])).toString('hex');\n      case 'p2':\n        return Buffer.from(b58cdecode(pubKey, prefix['p2pk'])).toString('hex');\n      case 'sp':\n        return Buffer.from(b58cdecode(pubKey, prefix['sppk'])).toString('hex');\n      default:\n        throw new Error('Unsupported Public Key Type');\n    }\n  }\n\n  encodeSignature(signature: string): string {\n    const pref = signature.startsWith('sig')\n      ? signature.substring(0, 3)\n      : signature.substring(0, 5);\n    if (Object.prototype.hasOwnProperty.call(prefix, pref)) {\n      return Buffer.from(\n        b58cdecode(\n          signature,\n          Object.getOwnPropertyDescriptor(prefix, pref)?.value,\n        ),\n      ).toString('hex');\n    }\n    throw new Error('Unsupported Signature Type');\n  }\n\n  calcFees(gas = 0, storageDiff = 0, txSize = 0): number {\n    return (\n      this._minimalFees +\n      this._minimalNanotezPerGasUnit * gas +\n      this._minimalNanotezPerByte * txSize +\n      storageDiff * this._costPerByte\n    );\n  }\n\n  async estimateInitiateFees(source: string): Promise<number> {\n    const dummyTx = {\n      receivingAddress: 'tz1Q2prWCrDGFDuGTe7axdt4z9e3QkCqdhmD',\n      secretHash:\n        '169cbd29345af89a0983f28254e71bdd1367890b9876fc8a9ea117c32f6a521b',\n      refundTimestamp: 2147483647,\n      rewardForRedeem: new BigNumber(0),\n      netAmount: new BigNumber(100),\n    };\n\n    const tx = this.buildInitiateTransaction(dummyTx);\n\n    const header = await this._tezos.rpc.getBlockHeader();\n    const contract = await this._tezos.rpc.getContract(source);\n    const op = await this._tezos.rpc.runOperation({\n      chain_id: header.chain_id,\n      operation: {\n        branch: header.hash,\n        signature:\n          'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP',\n        contents: [\n          {\n            amount: '0',\n            counter: (parseInt(contract.counter || '0') + 1).toString(),\n            destination: this._contractAddress,\n            fee: this.calcFees(1040000, 60000, this._initiateTxSize).toString(),\n            gas_limit: '1040000', // TODO: move to config\n            kind: OpKind.TRANSACTION,\n            source,\n            storage_limit: '60000', // TODO: move to config\n            parameters: tx.data,\n          },\n        ],\n      },\n    });\n\n    let paidStorageDiff = 0,\n      consumedGas = 0;\n    (op.contents as OperationContentsAndResultTransaction[]).forEach(tx => {\n      if (tx.metadata.operation_result.status !== 'applied') {\n        throw new Error('Some error was encountered while estimating fees');\n      }\n      consumedGas += parseInt(tx.metadata.operation_result.consumed_gas || '0');\n      paidStorageDiff += parseInt(\n        tx.metadata.operation_result.paid_storage_size_diff || '0',\n      );\n    });\n\n    return this.calcFees(consumedGas, paidStorageDiff, this._initiateTxSize);\n  }\n\n  async estimateRedeemFees(recipient: string): Promise<RedeemFees> {\n    let fees = this.calcFees(this._gasLimit, 0, this._redeemTxSize);\n    const revealedKey = await this._tezos.rpc.getManagerKey(recipient);\n    if (revealedKey === null) {\n      fees += 257 * this._costPerByte;\n    }\n    return {\n      totalCost: fees,\n      rewardForRedeem: 2 * fees,\n    };\n  }\n\n  isValidAddress(address: string): boolean {\n    return validateAddress(address) == ValidationResult.VALID;\n  }\n\n  private getBlock(blockId: string | number) {\n    return this._tezos.rpc.getBlock({ block: blockId.toString() });\n  }\n}\n", "import type { OperationContentsAndResultTransaction } from '@taquito/rpc';\nimport { TezosToolkit } from '@taquito/taquito';\nimport BigNumber from 'bignumber.js';\n\nimport type { Atomex } from '../atomex';\nimport config from './config';\nimport { dt2ts } from './helpers';\nimport { TezosHelpers } from './tezos';\nimport type { InitiateParameters, Network, TezosBasedCurrency } from './types';\n\n\n/**\n * TZIP-7 Util class for Tezos FA1.2 tokens related Atomex helper functions\n */\nexport class FA12Helpers extends TezosHelpers {\n\n  /**\n   * Connects to the supported tezos chain\n   *\n   * @param newAtomex instance of new Atomex class\n   * @param network networks supported by atomex, can be either mainnet or testnet\n   * @param currency FA1.2 token symbol\n   * @param rpcUri optional rpc endpoint to create tezos chain client\n   * @returns chain id of the connected chain\n   */\n  static async create(\n    newAtomex: Atomex,\n    network: Network,\n    currency: TezosBasedCurrency,\n    rpcUri?: string,\n  ): Promise<TezosHelpers> {\n    const networkSettings = config.blockchains.tezos.rpc[network];\n    if (rpcUri !== undefined) {\n      networkSettings.rpc = rpcUri;\n    }\n\n    const tezos = new TezosToolkit(networkSettings.rpc);\n    const chainID = await tezos.rpc.getChainId();\n    if (networkSettings.chainID !== chainID.toString()) {\n      throw new Error(\n        `Wrong chain ID: expected ${networkSettings.chainID}, actual ${chainID}`,\n      );\n    }\n\n    return new FA12Helpers(\n      newAtomex,\n      tezos,\n      config.currencies[currency].contracts.entrypoints,\n      config.currencies[currency].contracts[network].address,\n      config.blockchains.tezos.rpc[network].blockTime,\n      config.currencies[currency].contracts[network].gasLimit,\n      config.blockchains.tezos.rpc[network].minimalFees,\n      config.blockchains.tezos.rpc[network].minimalNanotezPerGasUnit,\n      config.blockchains.tezos.rpc[network].minimalNanotezPerByte,\n      config.blockchains.tezos.rpc[network].costPerByte,\n      config.currencies[currency].contracts[network].redeemTxSize,\n      config.currencies[currency].contracts[network].initiateTxSize,\n    );\n  }\n\n  parseInitiateParameters(\n    content: OperationContentsAndResultTransaction,\n  ): InitiateParameters {\n    if (content.parameters === undefined) {\n      throw new Error('Parameters are undefined');\n    }\n\n    const params = this._entrypoints\n      .get(content.parameters.entrypoint)\n      ?.Execute(content.parameters.value);\n    if (params === undefined) {\n      throw new Error(\n        `Unexpected entrypoint: ${content.parameters.entrypoint}`,\n      );\n    }\n\n    const initiateParams = (() => {\n      switch (content.parameters.entrypoint) {\n        case 'initiate':\n          return params;\n        case 'default':\n          return params['initiate'];\n        default:\n          throw new Error(\n            `Unexpected entrypoint: ${content.parameters.entrypoint}`,\n          );\n      }\n    })();\n\n    return {\n      secretHash: initiateParams['hashedSecret'],\n      receivingAddress: initiateParams['participant'],\n      refundTimestamp: dt2ts(initiateParams['refundTime']),\n      netAmount: new BigNumber(initiateParams['totalAmount']).minus(initiateParams['payoffAmount']),\n      rewardForRedeem: new BigNumber(initiateParams['payoffAmount']),\n    };\n  }\n}\n", "import type { OperationContentsAndResultTransaction } from '@taquito/rpc';\nimport { TezosToolkit } from '@taquito/taquito';\nimport BigNumber from 'bignumber.js';\n\nimport type { Atomex } from '../atomex';\nimport config from './config';\nimport { dt2ts } from './helpers';\nimport { TezosHelpers } from './tezos';\nimport type { InitiateParameters, Network, TezosBasedCurrency } from './types';\n\n\nexport class FA2Helpers extends TezosHelpers {\n\n  /**\n   * Connects to the supported tezos chain\n   *\n   * @param newAtomex instance of new Atomex class\n   * @param network networks supported by atomex, can be either mainnet or testnet\n   * @param currency FA2 token symbol\n   * @param rpcUri optional rpc endpoint to create tezos chain client\n   * @returns chain id of the connected chain\n   */\n  static async create(\n    newAtomex: Atomex,\n    network: Network,\n    currency: TezosBasedCurrency,\n    rpcUri?: string,\n  ): Promise<TezosHelpers> {\n    const networkSettings = config.blockchains.tezos.rpc[network];\n    if (rpcUri !== undefined) {\n      networkSettings.rpc = rpcUri;\n    }\n\n    const tezos = new TezosToolkit(networkSettings.rpc);\n    const chainID = await tezos.rpc.getChainId();\n    if (networkSettings.chainID !== chainID.toString()) {\n      throw new Error(\n        `Wrong chain ID: expected ${networkSettings.chainID}, actual ${chainID}`,\n      );\n    }\n\n    return new FA2Helpers(\n      newAtomex,\n      tezos,\n      config.currencies[currency].contracts.entrypoints,\n      config.currencies[currency].contracts[network].address,\n      config.blockchains.tezos.rpc[network].blockTime,\n      config.currencies[currency].contracts[network].gasLimit,\n      config.blockchains.tezos.rpc[network].minimalFees,\n      config.blockchains.tezos.rpc[network].minimalNanotezPerGasUnit,\n      config.blockchains.tezos.rpc[network].minimalNanotezPerByte,\n      config.blockchains.tezos.rpc[network].costPerByte,\n      config.currencies[currency].contracts[network].redeemTxSize,\n      config.currencies[currency].contracts[network].initiateTxSize,\n    );\n  }\n\n  parseInitiateParameters(content: OperationContentsAndResultTransaction): InitiateParameters {\n    if (!content.parameters) {\n      throw new Error('Parameters are undefined');\n    }\n\n    const params = this._entrypoints.get(content.parameters.entrypoint)?.Execute(content.parameters.value);\n    if (!params) {\n      throw new Error(`Unexpected entrypoint: ${content.parameters.entrypoint}`);\n    }\n\n    const initiateParams = this.getInitiateParams(content.parameters.entrypoint, params);\n\n    return {\n      // TODO: return tokenAddress and tokenId\n      secretHash: initiateParams['hashedSecret'],\n      receivingAddress: initiateParams['participant'],\n      refundTimestamp: dt2ts(initiateParams['refundTime']),\n      netAmount: new BigNumber(initiateParams['totalAmount']).minus(initiateParams['payoffAmount']),\n      rewardForRedeem: new BigNumber(initiateParams['payoffAmount']),\n    };\n  }\n\n  private getInitiateParams(entrypoint: string, params: any) {\n    switch (entrypoint) {\n      case 'initiate':\n        return params;\n      case 'default':\n        return params['initiate'];\n      default:\n        throw new Error(\n          `Unexpected entrypoint: ${entrypoint}`,\n        );\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
