import type { Transaction } from '../blockchain/models/index';
import type { CurrenciesProvider } from '../common/index';
import { ExchangeSymbol, ExchangeSymbolsProvider, NewOrderRequest, Order, OrderBook, OrderPreview, Quote } from '../exchange/index';
import type { Swap, SwapParticipantTrade } from '../swaps/index';
import type { OrderBookDto, OrderDto, QuoteDto, SwapDto, SymbolDto, TradeDto, TransactionDto, WebSocketOrderBookEntryDto, WebSocketOrderDataDto } from './dtos';
export declare const isOrderPreview: (orderBody: NewOrderRequest['orderBody']) => orderBody is OrderPreview;
export declare const mapQuoteDtosToQuotes: (quoteDtos: QuoteDto[]) => Quote[];
export declare const mapQuoteDtoToQuote: (quoteDto: QuoteDto) => Quote;
export declare const mapSymbolDtoToSymbol: (symbolDto: SymbolDto, currenciesProvider: CurrenciesProvider, defaultDecimals?: number) => ExchangeSymbol;
export declare const mapSymbolDtosToSymbols: (symbolDtos: readonly SymbolDto[], currenciesProvider: CurrenciesProvider, defaultDecimals?: number) => ExchangeSymbol[];
export declare const mapOrderBookDtoToOrderBook: (orderBookDto: OrderBookDto) => OrderBook;
export declare const mapWebSocketOrderBookEntryDtoToOrderBook: (orderBookEntryDtos: WebSocketOrderBookEntryDto[]) => OrderBook;
export declare const mapOrderDtoToOrder: (orderDto: OrderDto, exchangeSymbolsProvider: ExchangeSymbolsProvider) => Order;
export declare const mapOrderDtosToOrders: (orderDtos: OrderDto[], exchangeSymbolsProvider: ExchangeSymbolsProvider) => Order[];
export declare const mapTransactionDtosToTransactions: (transactionDtos: TransactionDto[]) => Transaction[];
export declare const mapSwapDtoToSwap: (swapDto: SwapDto, exchangeSymbolsProvider: ExchangeSymbolsProvider) => Swap;
export declare const mapTradeDtosToTrades: (tradeDtos: TradeDto[]) => SwapParticipantTrade[];
export declare const mapSwapDtosToSwaps: (swapDtos: SwapDto[], exchangeSymbolsProvider: ExchangeSymbolsProvider) => Swap[];
export declare const mapWebSocketOrderDtoToOrder: (orderDto: WebSocketOrderDataDto, exchangeSymbolsProvider: ExchangeSymbolsProvider) => Order;
